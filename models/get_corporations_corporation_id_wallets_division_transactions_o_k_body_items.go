// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCorporationsCorporationIDWalletsDivisionTransactionsOKBodyItems get_corporations_corporation_id_wallets_division_transactions_200_ok
//
// wallet transaction
// swagger:model getCorporationsCorporationIdWalletsDivisionTransactionsOKBodyItems
type GetCorporationsCorporationIDWalletsDivisionTransactionsOKBodyItems struct {

	// get_corporations_corporation_id_wallets_division_transactions_client_id
	//
	// client_id integer
	// Required: true
	ClientID *int32 `json:"client_id"`

	// get_corporations_corporation_id_wallets_division_transactions_date
	//
	// Date and time of transaction
	// Required: true
	// Format: date-time
	Date *strfmt.DateTime `json:"date"`

	// get_corporations_corporation_id_wallets_division_transactions_is_buy
	//
	// is_buy boolean
	// Required: true
	IsBuy *bool `json:"is_buy"`

	// get_corporations_corporation_id_wallets_division_transactions_journal_ref_id
	//
	// -1 if there is no corresponding wallet journal entry
	// Required: true
	JournalRefID *int64 `json:"journal_ref_id"`

	// get_corporations_corporation_id_wallets_division_transactions_location_id
	//
	// location_id integer
	// Required: true
	LocationID *int64 `json:"location_id"`

	// get_corporations_corporation_id_wallets_division_transactions_quantity
	//
	// quantity integer
	// Required: true
	Quantity *int32 `json:"quantity"`

	// get_corporations_corporation_id_wallets_division_transactions_transaction_id
	//
	// Unique transaction ID
	// Required: true
	TransactionID *int64 `json:"transaction_id"`

	// get_corporations_corporation_id_wallets_division_transactions_type_id
	//
	// type_id integer
	// Required: true
	TypeID *int32 `json:"type_id"`

	// get_corporations_corporation_id_wallets_division_transactions_unit_price
	//
	// Amount paid per unit
	// Required: true
	UnitPrice *float64 `json:"unit_price"`
}

// Validate validates this get corporations corporation Id wallets division transactions o k body items
func (m *GetCorporationsCorporationIDWalletsDivisionTransactionsOKBodyItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsBuy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJournalRefID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitPrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCorporationsCorporationIDWalletsDivisionTransactionsOKBodyItems) validateClientID(formats strfmt.Registry) error {

	if err := validate.Required("client_id", "body", m.ClientID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDWalletsDivisionTransactionsOKBodyItems) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDWalletsDivisionTransactionsOKBodyItems) validateIsBuy(formats strfmt.Registry) error {

	if err := validate.Required("is_buy", "body", m.IsBuy); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDWalletsDivisionTransactionsOKBodyItems) validateJournalRefID(formats strfmt.Registry) error {

	if err := validate.Required("journal_ref_id", "body", m.JournalRefID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDWalletsDivisionTransactionsOKBodyItems) validateLocationID(formats strfmt.Registry) error {

	if err := validate.Required("location_id", "body", m.LocationID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDWalletsDivisionTransactionsOKBodyItems) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDWalletsDivisionTransactionsOKBodyItems) validateTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("transaction_id", "body", m.TransactionID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDWalletsDivisionTransactionsOKBodyItems) validateTypeID(formats strfmt.Registry) error {

	if err := validate.Required("type_id", "body", m.TypeID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDWalletsDivisionTransactionsOKBodyItems) validateUnitPrice(formats strfmt.Registry) error {

	if err := validate.Required("unit_price", "body", m.UnitPrice); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCorporationsCorporationIDWalletsDivisionTransactionsOKBodyItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCorporationsCorporationIDWalletsDivisionTransactionsOKBodyItems) UnmarshalBinary(b []byte) error {
	var res GetCorporationsCorporationIDWalletsDivisionTransactionsOKBodyItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
