package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// GetCharactersCharacterIDMailLabelsLabel label object
// swagger:model get_characters_character_id_mail_labels_label
type GetCharactersCharacterIDMailLabelsLabel struct {

	// get_characters_character_id_mail_labels_color
	//
	// color string
	Color *string `json:"color,omitempty"`

	// get_characters_character_id_mail_labels_label_id
	//
	// label_id integer
	// Minimum: 0
	LabelID *int32 `json:"label_id,omitempty"`

	// get_characters_character_id_mail_labels_name
	//
	// name string
	// Max Length: 40
	Name string `json:"name,omitempty"`

	// get_characters_character_id_mail_labels_unread_count
	//
	// unread_count integer
	// Minimum: 0
	UnreadCount *int32 `json:"unread_count,omitempty"`
}

// Validate validates this get characters character id mail labels label
func (m *GetCharactersCharacterIDMailLabelsLabel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLabelID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUnreadCount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getCharactersCharacterIdMailLabelsLabelTypeColorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["#ffffff","#ffff01","#ff6600","#fe0000","#9a0000","#660066","#0000fe","#0099ff","#01ffff","#00ff33","#349800","#006634","#666666","#999999","#e6e6e6","#ffffcd","#99ffff","#ccff9a"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCharactersCharacterIdMailLabelsLabelTypeColorPropEnum = append(getCharactersCharacterIdMailLabelsLabelTypeColorPropEnum, v)
	}
}

const (
	getCharactersCharacterIdMailLabelsLabelColorNrFfffff string = "#ffffff"
	getCharactersCharacterIdMailLabelsLabelColorNrFfff01 string = "#ffff01"
	getCharactersCharacterIdMailLabelsLabelColorNrFf6600 string = "#ff6600"
	getCharactersCharacterIdMailLabelsLabelColorNrFe0000 string = "#fe0000"
	getCharactersCharacterIdMailLabelsLabelColorNr9a0000 string = "#9a0000"
	getCharactersCharacterIdMailLabelsLabelColorNr660066 string = "#660066"
	getCharactersCharacterIdMailLabelsLabelColorNr0000fe string = "#0000fe"
	getCharactersCharacterIdMailLabelsLabelColorNr0099ff string = "#0099ff"
	getCharactersCharacterIdMailLabelsLabelColorNr01ffff string = "#01ffff"
	getCharactersCharacterIdMailLabelsLabelColorNr00ff33 string = "#00ff33"
	getCharactersCharacterIdMailLabelsLabelColorNr349800 string = "#349800"
	getCharactersCharacterIdMailLabelsLabelColorNr006634 string = "#006634"
	getCharactersCharacterIdMailLabelsLabelColorNr666666 string = "#666666"
	getCharactersCharacterIdMailLabelsLabelColorNr999999 string = "#999999"
	getCharactersCharacterIdMailLabelsLabelColorNrE6e6e6 string = "#e6e6e6"
	getCharactersCharacterIdMailLabelsLabelColorNrFfffcd string = "#ffffcd"
	getCharactersCharacterIdMailLabelsLabelColorNr99ffff string = "#99ffff"
	getCharactersCharacterIdMailLabelsLabelColorNrCcff9a string = "#ccff9a"
)

// prop value enum
func (m *GetCharactersCharacterIDMailLabelsLabel) validateColorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getCharactersCharacterIdMailLabelsLabelTypeColorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetCharactersCharacterIDMailLabelsLabel) validateColor(formats strfmt.Registry) error {

	if swag.IsZero(m.Color) { // not required
		return nil
	}

	// value enum
	if err := m.validateColorEnum("color", "body", *m.Color); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDMailLabelsLabel) validateLabelID(formats strfmt.Registry) error {

	if swag.IsZero(m.LabelID) { // not required
		return nil
	}

	if err := validate.MinimumInt("label_id", "body", int64(*m.LabelID), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDMailLabelsLabel) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 40); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDMailLabelsLabel) validateUnreadCount(formats strfmt.Registry) error {

	if swag.IsZero(m.UnreadCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("unread_count", "body", int64(*m.UnreadCount), 0, false); err != nil {
		return err
	}

	return nil
}
