package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// GetKillmailsKillmailIDKillmailHashItem item object
// swagger:model get_killmails_killmail_id_killmail_hash_item
type GetKillmailsKillmailIDKillmailHashItem struct {

	// get_killmails_killmail_id_killmail_hash_flag
	//
	// flag integer
	// Required: true
	Flag *int32 `json:"flag"`

	// get_killmails_killmail_id_killmail_hash_item_type_id
	//
	// item_type_id integer
	// Required: true
	ItemTypeID *int32 `json:"item_type_id"`

	// get_killmails_killmail_id_killmail_hash_quantity_destroyed
	//
	// quantity_destroyed integer
	QuantityDestroyed int64 `json:"quantity_destroyed,omitempty"`

	// get_killmails_killmail_id_killmail_hash_quantity_dropped
	//
	// quantity_dropped integer
	QuantityDropped int64 `json:"quantity_dropped,omitempty"`

	// get_killmails_killmail_id_killmail_hash_singleton
	//
	// singleton integer
	// Required: true
	Singleton *int32 `json:"singleton"`
}

// Validate validates this get killmails killmail id killmail hash item
func (m *GetKillmailsKillmailIDKillmailHashItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlag(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateItemTypeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSingleton(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetKillmailsKillmailIDKillmailHashItem) validateFlag(formats strfmt.Registry) error {

	if err := validate.Required("flag", "body", m.Flag); err != nil {
		return err
	}

	return nil
}

func (m *GetKillmailsKillmailIDKillmailHashItem) validateItemTypeID(formats strfmt.Registry) error {

	if err := validate.Required("item_type_id", "body", m.ItemTypeID); err != nil {
		return err
	}

	return nil
}

func (m *GetKillmailsKillmailIDKillmailHashItem) validateSingleton(formats strfmt.Registry) error {

	if err := validate.Required("singleton", "body", m.Singleton); err != nil {
		return err
	}

	return nil
}
