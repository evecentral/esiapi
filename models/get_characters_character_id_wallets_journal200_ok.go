package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// GetCharactersCharacterIDWalletsJournal200Ok transaction
// swagger:model get_characters_character_id_wallets_journal_200_ok
type GetCharactersCharacterIDWalletsJournal200Ok struct {

	// get_characters_character_id_wallets_journal_argument_name
	//
	// argument_name string
	ArgumentName string `json:"argument_name,omitempty"`

	// get_characters_character_id_wallets_journal_argument_value
	//
	// argument_value integer
	ArgumentValue int32 `json:"argument_value,omitempty"`

	// get_characters_character_id_wallets_journal_first_party_id
	//
	// first_party_id integer
	FirstPartyID int32 `json:"first_party_id,omitempty"`

	// get_characters_character_id_wallets_journal_first_party_type
	//
	// first_party_type string
	FirstPartyType string `json:"first_party_type,omitempty"`

	// get_characters_character_id_wallets_journal_post_transaction_balance
	//
	// post_transaction_balance integer
	PostTransactionBalance int64 `json:"post_transaction_balance,omitempty"`

	// get_characters_character_id_wallets_journal_reason
	//
	// reason string
	Reason string `json:"reason,omitempty"`

	// get_characters_character_id_wallets_journal_ref_id
	//
	// ref_id integer
	// Required: true
	RefID *int64 `json:"ref_id"`

	// get_characters_character_id_wallets_journal_ref_type
	//
	// ref_type string
	// Required: true
	RefType *string `json:"ref_type"`

	// get_characters_character_id_wallets_journal_second_party_id
	//
	// second_party_id integer
	SecondPartyID int32 `json:"second_party_id,omitempty"`

	// get_characters_character_id_wallets_journal_second_party_type
	//
	// second_party_type string
	SecondPartyType string `json:"second_party_type,omitempty"`

	// get_characters_character_id_wallets_journal_tax_amount
	//
	// tax_amount integer
	TaxAmount int64 `json:"tax_amount,omitempty"`

	// get_characters_character_id_wallets_journal_tax_reciever_id
	//
	// tax_reciever_id integer
	TaxRecieverID int32 `json:"tax_reciever_id,omitempty"`

	// get_characters_character_id_wallets_journal_transaction_amount
	//
	// Positive if transferred to first party, negative if transferred to second party
	TransactionAmount int64 `json:"transaction_amount,omitempty"`

	// get_characters_character_id_wallets_journal_transaction_date
	//
	// transaction_date string
	// Required: true
	TransactionDate *strfmt.DateTime `json:"transaction_date"`
}

// Validate validates this get characters character id wallets journal 200 ok
func (m *GetCharactersCharacterIDWalletsJournal200Ok) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstPartyType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRefID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRefType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSecondPartyType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTransactionDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getCharactersCharacterIdWalletsJournal200OkTypeFirstPartyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["character","corporation","alliance"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCharactersCharacterIdWalletsJournal200OkTypeFirstPartyTypePropEnum = append(getCharactersCharacterIdWalletsJournal200OkTypeFirstPartyTypePropEnum, v)
	}
}

const (
	GetCharactersCharacterIDWalletsJournal200OkFirstPartyTypeCharacter   string = "character"
	GetCharactersCharacterIDWalletsJournal200OkFirstPartyTypeCorporation string = "corporation"
	GetCharactersCharacterIDWalletsJournal200OkFirstPartyTypeAlliance    string = "alliance"
)

// prop value enum
func (m *GetCharactersCharacterIDWalletsJournal200Ok) validateFirstPartyTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getCharactersCharacterIdWalletsJournal200OkTypeFirstPartyTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetCharactersCharacterIDWalletsJournal200Ok) validateFirstPartyType(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstPartyType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFirstPartyTypeEnum("first_party_type", "body", m.FirstPartyType); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDWalletsJournal200Ok) validateRefID(formats strfmt.Registry) error {

	if err := validate.Required("ref_id", "body", m.RefID); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDWalletsJournal200Ok) validateRefType(formats strfmt.Registry) error {

	if err := validate.Required("ref_type", "body", m.RefType); err != nil {
		return err
	}

	return nil
}

var getCharactersCharacterIdWalletsJournal200OkTypeSecondPartyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["character","corporation","alliance"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCharactersCharacterIdWalletsJournal200OkTypeSecondPartyTypePropEnum = append(getCharactersCharacterIdWalletsJournal200OkTypeSecondPartyTypePropEnum, v)
	}
}

const (
	GetCharactersCharacterIDWalletsJournal200OkSecondPartyTypeCharacter   string = "character"
	GetCharactersCharacterIDWalletsJournal200OkSecondPartyTypeCorporation string = "corporation"
	GetCharactersCharacterIDWalletsJournal200OkSecondPartyTypeAlliance    string = "alliance"
)

// prop value enum
func (m *GetCharactersCharacterIDWalletsJournal200Ok) validateSecondPartyTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getCharactersCharacterIdWalletsJournal200OkTypeSecondPartyTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetCharactersCharacterIDWalletsJournal200Ok) validateSecondPartyType(formats strfmt.Registry) error {

	if swag.IsZero(m.SecondPartyType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSecondPartyTypeEnum("second_party_type", "body", m.SecondPartyType); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDWalletsJournal200Ok) validateTransactionDate(formats strfmt.Registry) error {

	if err := validate.Required("transaction_date", "body", m.TransactionDate); err != nil {
		return err
	}

	return nil
}
