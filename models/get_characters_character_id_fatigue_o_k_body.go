// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCharactersCharacterIDFatigueOKBody get_characters_character_id_fatigue_ok
//
// 200 ok object
// swagger:model getCharactersCharacterIdFatigueOKBody
type GetCharactersCharacterIDFatigueOKBody struct {

	// get_characters_character_id_fatigue_jump_fatigue_expire_date
	//
	// Character's jump fatigue expiry
	// Format: date-time
	JumpFatigueExpireDate strfmt.DateTime `json:"jump_fatigue_expire_date,omitempty"`

	// get_characters_character_id_fatigue_last_jump_date
	//
	// Character's last jump activation
	// Format: date-time
	LastJumpDate strfmt.DateTime `json:"last_jump_date,omitempty"`

	// get_characters_character_id_fatigue_last_update_date
	//
	// Character's last jump update
	// Format: date-time
	LastUpdateDate strfmt.DateTime `json:"last_update_date,omitempty"`
}

// Validate validates this get characters character Id fatigue o k body
func (m *GetCharactersCharacterIDFatigueOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJumpFatigueExpireDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastJumpDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCharactersCharacterIDFatigueOKBody) validateJumpFatigueExpireDate(formats strfmt.Registry) error {

	if swag.IsZero(m.JumpFatigueExpireDate) { // not required
		return nil
	}

	if err := validate.FormatOf("jump_fatigue_expire_date", "body", "date-time", m.JumpFatigueExpireDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDFatigueOKBody) validateLastJumpDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastJumpDate) { // not required
		return nil
	}

	if err := validate.FormatOf("last_jump_date", "body", "date-time", m.LastJumpDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDFatigueOKBody) validateLastUpdateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("last_update_date", "body", "date-time", m.LastUpdateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCharactersCharacterIDFatigueOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCharactersCharacterIDFatigueOKBody) UnmarshalBinary(b []byte) error {
	var res GetCharactersCharacterIDFatigueOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
