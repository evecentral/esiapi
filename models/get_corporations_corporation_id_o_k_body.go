// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCorporationsCorporationIDOKBody get_corporations_corporation_id_ok
//
// 200 ok object
// swagger:model getCorporationsCorporationIdOKBody
type GetCorporationsCorporationIDOKBody struct {

	// get_corporations_corporation_id_alliance_id
	//
	// ID of the alliance that corporation is a member of, if any
	AllianceID int32 `json:"alliance_id,omitempty"`

	// get_corporations_corporation_id_ceo_id
	//
	// ceo_id integer
	// Required: true
	CeoID *int32 `json:"ceo_id"`

	// get_corporations_corporation_id_creator_id
	//
	// creator_id integer
	// Required: true
	CreatorID *int32 `json:"creator_id"`

	// get_corporations_corporation_id_date_founded
	//
	// date_founded string
	// Format: date-time
	DateFounded strfmt.DateTime `json:"date_founded,omitempty"`

	// get_corporations_corporation_id_description
	//
	// description string
	Description string `json:"description,omitempty"`

	// get_corporations_corporation_id_faction_id
	//
	// faction_id integer
	FactionID int32 `json:"faction_id,omitempty"`

	// get_corporations_corporation_id_home_station_id
	//
	// home_station_id integer
	HomeStationID int32 `json:"home_station_id,omitempty"`

	// get_corporations_corporation_id_member_count
	//
	// member_count integer
	// Required: true
	MemberCount *int32 `json:"member_count"`

	// get_corporations_corporation_id_name
	//
	// the full name of the corporation
	// Required: true
	Name *string `json:"name"`

	// get_corporations_corporation_id_shares
	//
	// shares integer
	Shares int64 `json:"shares,omitempty"`

	// get_corporations_corporation_id_tax_rate
	//
	// tax_rate number
	// Required: true
	// Maximum: 1
	// Minimum: 0
	TaxRate *float32 `json:"tax_rate"`

	// get_corporations_corporation_id_ticker
	//
	// the short name of the corporation
	// Required: true
	Ticker *string `json:"ticker"`

	// get_corporations_corporation_id_url
	//
	// url string
	URL string `json:"url,omitempty"`
}

// Validate validates this get corporations corporation Id o k body
func (m *GetCorporationsCorporationIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCeoID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateFounded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTicker(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCorporationsCorporationIDOKBody) validateCeoID(formats strfmt.Registry) error {

	if err := validate.Required("ceo_id", "body", m.CeoID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDOKBody) validateCreatorID(formats strfmt.Registry) error {

	if err := validate.Required("creator_id", "body", m.CreatorID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDOKBody) validateDateFounded(formats strfmt.Registry) error {

	if swag.IsZero(m.DateFounded) { // not required
		return nil
	}

	if err := validate.FormatOf("date_founded", "body", "date-time", m.DateFounded.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDOKBody) validateMemberCount(formats strfmt.Registry) error {

	if err := validate.Required("member_count", "body", m.MemberCount); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDOKBody) validateTaxRate(formats strfmt.Registry) error {

	if err := validate.Required("tax_rate", "body", m.TaxRate); err != nil {
		return err
	}

	if err := validate.Minimum("tax_rate", "body", float64(*m.TaxRate), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("tax_rate", "body", float64(*m.TaxRate), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDOKBody) validateTicker(formats strfmt.Registry) error {

	if err := validate.Required("ticker", "body", m.Ticker); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCorporationsCorporationIDOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCorporationsCorporationIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetCorporationsCorporationIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
