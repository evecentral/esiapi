// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCharactersCharacterIDStatsOKBodyItems get_characters_character_id_stats_200_ok
//
// Aggregate stats for a year
// swagger:model getCharactersCharacterIdStatsOKBodyItems
type GetCharactersCharacterIDStatsOKBodyItems struct {

	// character
	Character *GetCharactersCharacterIDStatsOKBodyItemsCharacter `json:"character,omitempty"`

	// combat
	Combat *GetCharactersCharacterIDStatsOKBodyItemsCombat `json:"combat,omitempty"`

	// industry
	Industry *GetCharactersCharacterIDStatsOKBodyItemsIndustry `json:"industry,omitempty"`

	// inventory
	Inventory *GetCharactersCharacterIDStatsOKBodyItemsInventory `json:"inventory,omitempty"`

	// isk
	Isk *GetCharactersCharacterIDStatsOKBodyItemsIsk `json:"isk,omitempty"`

	// market
	Market *GetCharactersCharacterIDStatsOKBodyItemsMarket `json:"market,omitempty"`

	// mining
	Mining *GetCharactersCharacterIDStatsOKBodyItemsMining `json:"mining,omitempty"`

	// module
	Module *GetCharactersCharacterIDStatsOKBodyItemsModule `json:"module,omitempty"`

	// orbital
	Orbital *GetCharactersCharacterIDStatsOKBodyItemsOrbital `json:"orbital,omitempty"`

	// pve
	Pve *GetCharactersCharacterIDStatsOKBodyItemsPve `json:"pve,omitempty"`

	// social
	Social *GetCharactersCharacterIDStatsOKBodyItemsSocial `json:"social,omitempty"`

	// travel
	Travel *GetCharactersCharacterIDStatsOKBodyItemsTravel `json:"travel,omitempty"`

	// get_characters_character_id_stats_year
	//
	// Gregorian year for this set of aggregates
	// Required: true
	Year *int32 `json:"year"`
}

// Validate validates this get characters character Id stats o k body items
func (m *GetCharactersCharacterIDStatsOKBodyItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCharacter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCombat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndustry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMining(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrbital(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePve(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSocial(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTravel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCharactersCharacterIDStatsOKBodyItems) validateCharacter(formats strfmt.Registry) error {

	if swag.IsZero(m.Character) { // not required
		return nil
	}

	if m.Character != nil {
		if err := m.Character.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("character")
			}
			return err
		}
	}

	return nil
}

func (m *GetCharactersCharacterIDStatsOKBodyItems) validateCombat(formats strfmt.Registry) error {

	if swag.IsZero(m.Combat) { // not required
		return nil
	}

	if m.Combat != nil {
		if err := m.Combat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("combat")
			}
			return err
		}
	}

	return nil
}

func (m *GetCharactersCharacterIDStatsOKBodyItems) validateIndustry(formats strfmt.Registry) error {

	if swag.IsZero(m.Industry) { // not required
		return nil
	}

	if m.Industry != nil {
		if err := m.Industry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("industry")
			}
			return err
		}
	}

	return nil
}

func (m *GetCharactersCharacterIDStatsOKBodyItems) validateInventory(formats strfmt.Registry) error {

	if swag.IsZero(m.Inventory) { // not required
		return nil
	}

	if m.Inventory != nil {
		if err := m.Inventory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inventory")
			}
			return err
		}
	}

	return nil
}

func (m *GetCharactersCharacterIDStatsOKBodyItems) validateIsk(formats strfmt.Registry) error {

	if swag.IsZero(m.Isk) { // not required
		return nil
	}

	if m.Isk != nil {
		if err := m.Isk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isk")
			}
			return err
		}
	}

	return nil
}

func (m *GetCharactersCharacterIDStatsOKBodyItems) validateMarket(formats strfmt.Registry) error {

	if swag.IsZero(m.Market) { // not required
		return nil
	}

	if m.Market != nil {
		if err := m.Market.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("market")
			}
			return err
		}
	}

	return nil
}

func (m *GetCharactersCharacterIDStatsOKBodyItems) validateMining(formats strfmt.Registry) error {

	if swag.IsZero(m.Mining) { // not required
		return nil
	}

	if m.Mining != nil {
		if err := m.Mining.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mining")
			}
			return err
		}
	}

	return nil
}

func (m *GetCharactersCharacterIDStatsOKBodyItems) validateModule(formats strfmt.Registry) error {

	if swag.IsZero(m.Module) { // not required
		return nil
	}

	if m.Module != nil {
		if err := m.Module.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("module")
			}
			return err
		}
	}

	return nil
}

func (m *GetCharactersCharacterIDStatsOKBodyItems) validateOrbital(formats strfmt.Registry) error {

	if swag.IsZero(m.Orbital) { // not required
		return nil
	}

	if m.Orbital != nil {
		if err := m.Orbital.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orbital")
			}
			return err
		}
	}

	return nil
}

func (m *GetCharactersCharacterIDStatsOKBodyItems) validatePve(formats strfmt.Registry) error {

	if swag.IsZero(m.Pve) { // not required
		return nil
	}

	if m.Pve != nil {
		if err := m.Pve.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pve")
			}
			return err
		}
	}

	return nil
}

func (m *GetCharactersCharacterIDStatsOKBodyItems) validateSocial(formats strfmt.Registry) error {

	if swag.IsZero(m.Social) { // not required
		return nil
	}

	if m.Social != nil {
		if err := m.Social.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("social")
			}
			return err
		}
	}

	return nil
}

func (m *GetCharactersCharacterIDStatsOKBodyItems) validateTravel(formats strfmt.Registry) error {

	if swag.IsZero(m.Travel) { // not required
		return nil
	}

	if m.Travel != nil {
		if err := m.Travel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("travel")
			}
			return err
		}
	}

	return nil
}

func (m *GetCharactersCharacterIDStatsOKBodyItems) validateYear(formats strfmt.Registry) error {

	if err := validate.Required("year", "body", m.Year); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCharactersCharacterIDStatsOKBodyItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCharactersCharacterIDStatsOKBodyItems) UnmarshalBinary(b []byte) error {
	var res GetCharactersCharacterIDStatsOKBodyItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
