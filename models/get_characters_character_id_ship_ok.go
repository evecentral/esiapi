package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// GetCharactersCharacterIDShipOk 200 ok object
// swagger:model get_characters_character_id_ship_ok
type GetCharactersCharacterIDShipOk struct {

	// get_characters_character_id_ship_ship_item_id
	//
	// Item id's are unique to a ship and persist until it is repackaged. This value can be used to track repeated uses of a ship, or detect when a pilot changes into a different instance of the same ship type.
	// Required: true
	ShipItemID *int64 `json:"ship_item_id"`

	// get_characters_character_id_ship_ship_name
	//
	// ship_name string
	// Required: true
	ShipName *string `json:"ship_name"`

	// get_characters_character_id_ship_ship_type_id
	//
	// ship_type_id integer
	// Required: true
	ShipTypeID *int32 `json:"ship_type_id"`
}

// Validate validates this get characters character id ship ok
func (m *GetCharactersCharacterIDShipOk) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateShipItemID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateShipName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateShipTypeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCharactersCharacterIDShipOk) validateShipItemID(formats strfmt.Registry) error {

	if err := validate.Required("ship_item_id", "body", m.ShipItemID); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDShipOk) validateShipName(formats strfmt.Registry) error {

	if err := validate.Required("ship_name", "body", m.ShipName); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDShipOk) validateShipTypeID(formats strfmt.Registry) error {

	if err := validate.Required("ship_type_id", "body", m.ShipTypeID); err != nil {
		return err
	}

	return nil
}
