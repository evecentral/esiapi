package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// GetCorporationsCorporationIDOk 200 ok object
// swagger:model get_corporations_corporation_id_ok
type GetCorporationsCorporationIDOk struct {

	// get_corporations_corporation_id_alliance_id
	//
	// id of alliance that corporation is a member of, if any
	AllianceID int32 `json:"alliance_id,omitempty"`

	// get_corporations_corporation_id_ceo_id
	//
	// ceo_id integer
	// Required: true
	CeoID *int32 `json:"ceo_id"`

	// get_corporations_corporation_id_corporation_name
	//
	// the full name of the corporation
	// Required: true
	CorporationName *string `json:"corporation_name"`

	// get_corporations_corporation_id_member_count
	//
	// member_count integer
	// Required: true
	MemberCount *int32 `json:"member_count"`

	// get_corporations_corporation_id_ticker
	//
	// the short name of the corporation
	// Required: true
	Ticker *string `json:"ticker"`
}

// Validate validates this get corporations corporation id ok
func (m *GetCorporationsCorporationIDOk) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCeoID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCorporationName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMemberCount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTicker(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCorporationsCorporationIDOk) validateCeoID(formats strfmt.Registry) error {

	if err := validate.Required("ceo_id", "body", m.CeoID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDOk) validateCorporationName(formats strfmt.Registry) error {

	if err := validate.Required("corporation_name", "body", m.CorporationName); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDOk) validateMemberCount(formats strfmt.Registry) error {

	if err := validate.Required("member_count", "body", m.MemberCount); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDOk) validateTicker(formats strfmt.Registry) error {

	if err := validate.Required("ticker", "body", m.Ticker); err != nil {
		return err
	}

	return nil
}
