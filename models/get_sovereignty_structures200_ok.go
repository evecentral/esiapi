package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// GetSovereigntyStructures200Ok 200 ok object
// swagger:model get_sovereignty_structures_200_ok
type GetSovereigntyStructures200Ok struct {

	// get_sovereignty_structures_alliance_id
	//
	// The alliance that owns the structure.
	//
	// Required: true
	AllianceID *int64 `json:"alliance_id"`

	// get_sovereignty_structures_solar_system_id
	//
	// Solar system in which the structure is located.
	//
	// Required: true
	SolarSystemID *int64 `json:"solar_system_id"`

	// get_sovereignty_structures_structure_id
	//
	// Unique item ID for this structure.
	// Required: true
	StructureID *int64 `json:"structure_id"`

	// get_sovereignty_structures_structure_type_id
	//
	// A reference to the type of structure this is.
	//
	// Required: true
	StructureTypeID *int64 `json:"structure_type_id"`

	// get_sovereignty_structures_vulnerability_occupancy_level
	//
	// The occupancy level for the next or current vulnerability window. This takes into account all development indexes and capital system bonuses. Also known as Activity Defense Multiplier from in the client. It increases the time that attackers must spend using their entosis links on the structure.
	//
	VulnerabilityOccupancyLevel float32 `json:"vulnerability_occupancy_level,omitempty"`

	// get_sovereignty_structures_vulnerable_end_time
	//
	// The time at which the next or current vulnerability window ends. At the end of a vulnerability window the next window is recalculated and locked in along with the vulnerabilityOccupancyLevel. If the structure is not in 100% entosis control of the defender, it will go in to 'overtime' and stay vulnerable for as long as that situation persists. Only once the defenders have 100% entosis control and has the vulnerableEndTime passed does the vulnerability interval expire and a new one is calculated.
	//
	VulnerableEndTime strfmt.DateTime `json:"vulnerable_end_time,omitempty"`

	// get_sovereignty_structures_vulnerable_start_time
	//
	// The next time at which the structure will become vulnerable. Or the start time of the current window if current time is between this and vulnerableEndTime.
	//
	VulnerableStartTime strfmt.DateTime `json:"vulnerable_start_time,omitempty"`
}

// Validate validates this get sovereignty structures 200 ok
func (m *GetSovereigntyStructures200Ok) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllianceID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSolarSystemID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStructureID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStructureTypeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetSovereigntyStructures200Ok) validateAllianceID(formats strfmt.Registry) error {

	if err := validate.Required("alliance_id", "body", m.AllianceID); err != nil {
		return err
	}

	return nil
}

func (m *GetSovereigntyStructures200Ok) validateSolarSystemID(formats strfmt.Registry) error {

	if err := validate.Required("solar_system_id", "body", m.SolarSystemID); err != nil {
		return err
	}

	return nil
}

func (m *GetSovereigntyStructures200Ok) validateStructureID(formats strfmt.Registry) error {

	if err := validate.Required("structure_id", "body", m.StructureID); err != nil {
		return err
	}

	return nil
}

func (m *GetSovereigntyStructures200Ok) validateStructureTypeID(formats strfmt.Registry) error {

	if err := validate.Required("structure_type_id", "body", m.StructureTypeID); err != nil {
		return err
	}

	return nil
}
