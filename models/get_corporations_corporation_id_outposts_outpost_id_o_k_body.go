// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCorporationsCorporationIDOutpostsOutpostIDOKBody get_corporations_corporation_id_outposts_outpost_id_ok
//
// 200 ok object
// swagger:model getCorporationsCorporationIdOutpostsOutpostIdOKBody
type GetCorporationsCorporationIDOutpostsOutpostIDOKBody struct {

	// coordinates
	// Required: true
	Coordinates *GetCorporationsCorporationIDOutpostsOutpostIDOKBodyCoordinates `json:"coordinates"`

	// get_corporations_corporation_id_outposts_outpost_id_docking_cost_per_ship_volume
	//
	// docking_cost_per_ship_volume number
	// Required: true
	DockingCostPerShipVolume *float32 `json:"docking_cost_per_ship_volume"`

	// get_corporations_corporation_id_outposts_outpost_id_office_rental_cost
	//
	// office_rental_cost integer
	// Required: true
	OfficeRentalCost *int64 `json:"office_rental_cost"`

	// get_corporations_corporation_id_outposts_outpost_id_owner_id
	//
	// The entity that owns the station (e.g. the entity whose logo is on the station services bar)
	// Required: true
	OwnerID *int32 `json:"owner_id"`

	// get_corporations_corporation_id_outposts_outpost_id_reprocessing_efficiency
	//
	// reprocessing_efficiency number
	// Required: true
	ReprocessingEfficiency *float32 `json:"reprocessing_efficiency"`

	// get_corporations_corporation_id_outposts_outpost_id_reprocessing_station_take
	//
	// reprocessing_station_take number
	// Required: true
	ReprocessingStationTake *float32 `json:"reprocessing_station_take"`

	// get_corporations_corporation_id_outposts_outpost_id_services
	//
	// A list of services the given outpost provides
	// Required: true
	// Max Items: 27
	Services []*GetCorporationsCorporationIDOutpostsOutpostIDOKBodyServicesItems `json:"services"`

	// get_corporations_corporation_id_outposts_outpost_id_standing_owner_id
	//
	// The owner ID that sets the ability for someone to dock based on standings.
	// Required: true
	StandingOwnerID *int32 `json:"standing_owner_id"`

	// get_corporations_corporation_id_outposts_outpost_id_system_id
	//
	// The ID of the solar system the outpost rests in
	// Required: true
	SystemID *int32 `json:"system_id"`

	// get_corporations_corporation_id_outposts_outpost_id_type_id
	//
	// The type ID of the given outpost
	// Required: true
	TypeID *int32 `json:"type_id"`
}

// Validate validates this get corporations corporation Id outposts outpost Id o k body
func (m *GetCorporationsCorporationIDOutpostsOutpostIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCoordinates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDockingCostPerShipVolume(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfficeRentalCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReprocessingEfficiency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReprocessingStationTake(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandingOwnerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCorporationsCorporationIDOutpostsOutpostIDOKBody) validateCoordinates(formats strfmt.Registry) error {

	if err := validate.Required("coordinates", "body", m.Coordinates); err != nil {
		return err
	}

	if m.Coordinates != nil {
		if err := m.Coordinates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coordinates")
			}
			return err
		}
	}

	return nil
}

func (m *GetCorporationsCorporationIDOutpostsOutpostIDOKBody) validateDockingCostPerShipVolume(formats strfmt.Registry) error {

	if err := validate.Required("docking_cost_per_ship_volume", "body", m.DockingCostPerShipVolume); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDOutpostsOutpostIDOKBody) validateOfficeRentalCost(formats strfmt.Registry) error {

	if err := validate.Required("office_rental_cost", "body", m.OfficeRentalCost); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDOutpostsOutpostIDOKBody) validateOwnerID(formats strfmt.Registry) error {

	if err := validate.Required("owner_id", "body", m.OwnerID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDOutpostsOutpostIDOKBody) validateReprocessingEfficiency(formats strfmt.Registry) error {

	if err := validate.Required("reprocessing_efficiency", "body", m.ReprocessingEfficiency); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDOutpostsOutpostIDOKBody) validateReprocessingStationTake(formats strfmt.Registry) error {

	if err := validate.Required("reprocessing_station_take", "body", m.ReprocessingStationTake); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDOutpostsOutpostIDOKBody) validateServices(formats strfmt.Registry) error {

	if err := validate.Required("services", "body", m.Services); err != nil {
		return err
	}

	iServicesSize := int64(len(m.Services))

	if err := validate.MaxItems("services", "body", iServicesSize, 27); err != nil {
		return err
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetCorporationsCorporationIDOutpostsOutpostIDOKBody) validateStandingOwnerID(formats strfmt.Registry) error {

	if err := validate.Required("standing_owner_id", "body", m.StandingOwnerID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDOutpostsOutpostIDOKBody) validateSystemID(formats strfmt.Registry) error {

	if err := validate.Required("system_id", "body", m.SystemID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDOutpostsOutpostIDOKBody) validateTypeID(formats strfmt.Registry) error {

	if err := validate.Required("type_id", "body", m.TypeID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCorporationsCorporationIDOutpostsOutpostIDOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCorporationsCorporationIDOutpostsOutpostIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetCorporationsCorporationIDOutpostsOutpostIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
