package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// PostUniverseNames200Ok 200 ok object
// swagger:model post_universe_names_200_ok
type PostUniverseNames200Ok struct {

	// post_universe_names_category
	//
	// category string
	// Required: true
	Category *string `json:"category"`

	// post_universe_names_id
	//
	// id integer
	// Required: true
	ID *int32 `json:"id"`

	// post_universe_names_name
	//
	// name string
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this post universe names 200 ok
func (m *PostUniverseNames200Ok) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postUniverseNames200OkTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["alliance","character","constellation","corporation","inventory_type","region","solar_system","station"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postUniverseNames200OkTypeCategoryPropEnum = append(postUniverseNames200OkTypeCategoryPropEnum, v)
	}
}

const (
	PostUniverseNames200OkCategoryAlliance      string = "alliance"
	PostUniverseNames200OkCategoryCharacter     string = "character"
	PostUniverseNames200OkCategoryConstellation string = "constellation"
	PostUniverseNames200OkCategoryCorporation   string = "corporation"
	PostUniverseNames200OkCategoryInventoryType string = "inventory_type"
	PostUniverseNames200OkCategoryRegion        string = "region"
	PostUniverseNames200OkCategorySolarSystem   string = "solar_system"
	PostUniverseNames200OkCategoryStation       string = "station"
)

// prop value enum
func (m *PostUniverseNames200Ok) validateCategoryEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postUniverseNames200OkTypeCategoryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostUniverseNames200Ok) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", *m.Category); err != nil {
		return err
	}

	return nil
}

func (m *PostUniverseNames200Ok) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PostUniverseNames200Ok) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}
