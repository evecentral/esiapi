package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// GetCharactersCharacterIDMail200Ok 200 ok object
// swagger:model get_characters_character_id_mail_200_ok
type GetCharactersCharacterIDMail200Ok struct {

	// get_characters_character_id_mail_from
	//
	// From whom the mail was sent
	From int32 `json:"from,omitempty"`

	// get_characters_character_id_mail_is_read
	//
	// is_read boolean
	IsRead bool `json:"is_read,omitempty"`

	// get_characters_character_id_mail_labels
	//
	// labels array
	Labels []int64 `json:"labels"`

	// get_characters_character_id_mail_mail_id
	//
	// mail_id integer
	MailID int64 `json:"mail_id,omitempty"`

	// get_characters_character_id_mail_recipients
	//
	// Recipients of the mail
	Recipients []*GetCharactersCharacterIDMailRecipient `json:"recipients"`

	// get_characters_character_id_mail_subject
	//
	// Mail subject
	Subject string `json:"subject,omitempty"`

	// get_characters_character_id_mail_timestamp
	//
	// When the mail was sent
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this get characters character id mail 200 ok
func (m *GetCharactersCharacterIDMail200Ok) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabels(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRecipients(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCharactersCharacterIDMail200Ok) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	return nil
}

func (m *GetCharactersCharacterIDMail200Ok) validateRecipients(formats strfmt.Registry) error {

	if swag.IsZero(m.Recipients) { // not required
		return nil
	}

	for i := 0; i < len(m.Recipients); i++ {

		if swag.IsZero(m.Recipients[i]) { // not required
			continue
		}

		if m.Recipients[i] != nil {

			if err := m.Recipients[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
