// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCorporationsCorporationIDContractsContractIDItemsOKBodyItems get_corporations_corporation_id_contracts_contract_id_items_200_ok
//
// 200 ok object
// swagger:model getCorporationsCorporationIdContractsContractIdItemsOKBodyItems
type GetCorporationsCorporationIDContractsContractIDItemsOKBodyItems struct {

	// get_corporations_corporation_id_contracts_contract_id_items_is_included
	//
	// true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract.
	// Required: true
	IsIncluded *bool `json:"is_included"`

	// get_corporations_corporation_id_contracts_contract_id_items_is_singleton
	//
	// is_singleton boolean
	// Required: true
	IsSingleton *bool `json:"is_singleton"`

	// get_corporations_corporation_id_contracts_contract_id_items_quantity
	//
	// Number of items in the stack
	// Required: true
	Quantity *int32 `json:"quantity"`

	// get_corporations_corporation_id_contracts_contract_id_items_raw_quantity
	//
	// -1 indicates that the item is a singleton (non-stackable). If the item happens to be a Blueprint, -1 is an Original and -2 is a Blueprint Copy
	RawQuantity int32 `json:"raw_quantity,omitempty"`

	// get_corporations_corporation_id_contracts_contract_id_items_record_id
	//
	// Unique ID for the item
	// Required: true
	RecordID *int64 `json:"record_id"`

	// get_corporations_corporation_id_contracts_contract_id_items_type_id
	//
	// Type ID for item
	// Required: true
	TypeID *int32 `json:"type_id"`
}

// Validate validates this get corporations corporation Id contracts contract Id items o k body items
func (m *GetCorporationsCorporationIDContractsContractIDItemsOKBodyItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsIncluded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsSingleton(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecordID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCorporationsCorporationIDContractsContractIDItemsOKBodyItems) validateIsIncluded(formats strfmt.Registry) error {

	if err := validate.Required("is_included", "body", m.IsIncluded); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDContractsContractIDItemsOKBodyItems) validateIsSingleton(formats strfmt.Registry) error {

	if err := validate.Required("is_singleton", "body", m.IsSingleton); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDContractsContractIDItemsOKBodyItems) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDContractsContractIDItemsOKBodyItems) validateRecordID(formats strfmt.Registry) error {

	if err := validate.Required("record_id", "body", m.RecordID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDContractsContractIDItemsOKBodyItems) validateTypeID(formats strfmt.Registry) error {

	if err := validate.Required("type_id", "body", m.TypeID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCorporationsCorporationIDContractsContractIDItemsOKBodyItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCorporationsCorporationIDContractsContractIDItemsOKBodyItems) UnmarshalBinary(b []byte) error {
	var res GetCorporationsCorporationIDContractsContractIDItemsOKBodyItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
