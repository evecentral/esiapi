// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCorporationsCorporationIDCustomsOfficesOKBodyItems get_corporations_corporation_id_customs_offices_200_ok
//
// 200 ok object
// swagger:model getCorporationsCorporationIdCustomsOfficesOKBodyItems
type GetCorporationsCorporationIDCustomsOfficesOKBodyItems struct {

	// get_corporations_corporation_id_customs_offices_alliance_tax_rate
	//
	// Only present if alliance access is allowed
	AllianceTaxRate float32 `json:"alliance_tax_rate,omitempty"`

	// get_corporations_corporation_id_customs_offices_allow_access_with_standings
	//
	// standing_level and any standing related tax rate only present when this is true
	// Required: true
	AllowAccessWithStandings *bool `json:"allow_access_with_standings"`

	// get_corporations_corporation_id_customs_offices_allow_alliance_access
	//
	// allow_alliance_access boolean
	// Required: true
	AllowAllianceAccess *bool `json:"allow_alliance_access"`

	// get_corporations_corporation_id_customs_offices_bad_standing_tax_rate
	//
	// bad_standing_tax_rate number
	BadStandingTaxRate float32 `json:"bad_standing_tax_rate,omitempty"`

	// get_corporations_corporation_id_customs_offices_corporation_tax_rate
	//
	// corporation_tax_rate number
	CorporationTaxRate float32 `json:"corporation_tax_rate,omitempty"`

	// get_corporations_corporation_id_customs_offices_excellent_standing_tax_rate
	//
	// Tax rate for entities with excellent level of standing, only present if this level is allowed, same for all other standing related tax rates
	ExcellentStandingTaxRate float32 `json:"excellent_standing_tax_rate,omitempty"`

	// get_corporations_corporation_id_customs_offices_good_standing_tax_rate
	//
	// good_standing_tax_rate number
	GoodStandingTaxRate float32 `json:"good_standing_tax_rate,omitempty"`

	// get_corporations_corporation_id_customs_offices_neutral_standing_tax_rate
	//
	// neutral_standing_tax_rate number
	NeutralStandingTaxRate float32 `json:"neutral_standing_tax_rate,omitempty"`

	// get_corporations_corporation_id_customs_offices_office_id
	//
	// unique ID of this customs office
	// Required: true
	OfficeID *int64 `json:"office_id"`

	// get_corporations_corporation_id_customs_offices_reinforce_exit_end
	//
	// reinforce_exit_end integer
	// Required: true
	// Maximum: 23
	// Minimum: 0
	ReinforceExitEnd *int32 `json:"reinforce_exit_end"`

	// get_corporations_corporation_id_customs_offices_reinforce_exit_start
	//
	// Together with reinforce_exit_end, marks a 2-hour period where this customs office could exit reinforcement mode during the day after initial attack
	// Required: true
	// Maximum: 23
	// Minimum: 0
	ReinforceExitStart *int32 `json:"reinforce_exit_start"`

	// get_corporations_corporation_id_customs_offices_standing_level
	//
	// Access is allowed only for entities with this level of standing or better
	// Enum: [bad excellent good neutral terrible]
	StandingLevel string `json:"standing_level,omitempty"`

	// get_corporations_corporation_id_customs_offices_system_id
	//
	// ID of the solar system this customs office is located in
	// Required: true
	SystemID *int32 `json:"system_id"`

	// get_corporations_corporation_id_customs_offices_terrible_standing_tax_rate
	//
	// terrible_standing_tax_rate number
	TerribleStandingTaxRate float32 `json:"terrible_standing_tax_rate,omitempty"`
}

// Validate validates this get corporations corporation Id customs offices o k body items
func (m *GetCorporationsCorporationIDCustomsOfficesOKBodyItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowAccessWithStandings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllowAllianceAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfficeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReinforceExitEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReinforceExitStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandingLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCorporationsCorporationIDCustomsOfficesOKBodyItems) validateAllowAccessWithStandings(formats strfmt.Registry) error {

	if err := validate.Required("allow_access_with_standings", "body", m.AllowAccessWithStandings); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDCustomsOfficesOKBodyItems) validateAllowAllianceAccess(formats strfmt.Registry) error {

	if err := validate.Required("allow_alliance_access", "body", m.AllowAllianceAccess); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDCustomsOfficesOKBodyItems) validateOfficeID(formats strfmt.Registry) error {

	if err := validate.Required("office_id", "body", m.OfficeID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDCustomsOfficesOKBodyItems) validateReinforceExitEnd(formats strfmt.Registry) error {

	if err := validate.Required("reinforce_exit_end", "body", m.ReinforceExitEnd); err != nil {
		return err
	}

	if err := validate.MinimumInt("reinforce_exit_end", "body", int64(*m.ReinforceExitEnd), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("reinforce_exit_end", "body", int64(*m.ReinforceExitEnd), 23, false); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDCustomsOfficesOKBodyItems) validateReinforceExitStart(formats strfmt.Registry) error {

	if err := validate.Required("reinforce_exit_start", "body", m.ReinforceExitStart); err != nil {
		return err
	}

	if err := validate.MinimumInt("reinforce_exit_start", "body", int64(*m.ReinforceExitStart), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("reinforce_exit_start", "body", int64(*m.ReinforceExitStart), 23, false); err != nil {
		return err
	}

	return nil
}

var getCorporationsCorporationIdCustomsOfficesOKBodyItemsTypeStandingLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bad","excellent","good","neutral","terrible"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCorporationsCorporationIdCustomsOfficesOKBodyItemsTypeStandingLevelPropEnum = append(getCorporationsCorporationIdCustomsOfficesOKBodyItemsTypeStandingLevelPropEnum, v)
	}
}

const (

	// GetCorporationsCorporationIDCustomsOfficesOKBodyItemsStandingLevelBad captures enum value "bad"
	GetCorporationsCorporationIDCustomsOfficesOKBodyItemsStandingLevelBad string = "bad"

	// GetCorporationsCorporationIDCustomsOfficesOKBodyItemsStandingLevelExcellent captures enum value "excellent"
	GetCorporationsCorporationIDCustomsOfficesOKBodyItemsStandingLevelExcellent string = "excellent"

	// GetCorporationsCorporationIDCustomsOfficesOKBodyItemsStandingLevelGood captures enum value "good"
	GetCorporationsCorporationIDCustomsOfficesOKBodyItemsStandingLevelGood string = "good"

	// GetCorporationsCorporationIDCustomsOfficesOKBodyItemsStandingLevelNeutral captures enum value "neutral"
	GetCorporationsCorporationIDCustomsOfficesOKBodyItemsStandingLevelNeutral string = "neutral"

	// GetCorporationsCorporationIDCustomsOfficesOKBodyItemsStandingLevelTerrible captures enum value "terrible"
	GetCorporationsCorporationIDCustomsOfficesOKBodyItemsStandingLevelTerrible string = "terrible"
)

// prop value enum
func (m *GetCorporationsCorporationIDCustomsOfficesOKBodyItems) validateStandingLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getCorporationsCorporationIdCustomsOfficesOKBodyItemsTypeStandingLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetCorporationsCorporationIDCustomsOfficesOKBodyItems) validateStandingLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.StandingLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateStandingLevelEnum("standing_level", "body", m.StandingLevel); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDCustomsOfficesOKBodyItems) validateSystemID(formats strfmt.Registry) error {

	if err := validate.Required("system_id", "body", m.SystemID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCorporationsCorporationIDCustomsOfficesOKBodyItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCorporationsCorporationIDCustomsOfficesOKBodyItems) UnmarshalBinary(b []byte) error {
	var res GetCorporationsCorporationIDCustomsOfficesOKBodyItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
