// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCharactersCharacterIDFleetOKBody get_characters_character_id_fleet_ok
//
// 200 ok object
// swagger:model getCharactersCharacterIdFleetOKBody
type GetCharactersCharacterIDFleetOKBody struct {

	// get_characters_character_id_fleet_fleet_id
	//
	// The character's current fleet ID
	// Required: true
	FleetID *int64 `json:"fleet_id"`

	// get_characters_character_id_fleet_role
	//
	// Memberâ€™s role in fleet
	// Required: true
	// Enum: [fleet_commander squad_commander squad_member wing_commander]
	Role *string `json:"role"`

	// get_characters_character_id_fleet_squad_id
	//
	// ID of the squad the member is in. If not applicable, will be set to -1
	// Required: true
	SquadID *int64 `json:"squad_id"`

	// get_characters_character_id_fleet_wing_id
	//
	// ID of the wing the member is in. If not applicable, will be set to -1
	// Required: true
	WingID *int64 `json:"wing_id"`
}

// Validate validates this get characters character Id fleet o k body
func (m *GetCharactersCharacterIDFleetOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFleetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSquadID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWingID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCharactersCharacterIDFleetOKBody) validateFleetID(formats strfmt.Registry) error {

	if err := validate.Required("fleet_id", "body", m.FleetID); err != nil {
		return err
	}

	return nil
}

var getCharactersCharacterIdFleetOKBodyTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fleet_commander","squad_commander","squad_member","wing_commander"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCharactersCharacterIdFleetOKBodyTypeRolePropEnum = append(getCharactersCharacterIdFleetOKBodyTypeRolePropEnum, v)
	}
}

const (

	// GetCharactersCharacterIDFleetOKBodyRoleFleetCommander captures enum value "fleet_commander"
	GetCharactersCharacterIDFleetOKBodyRoleFleetCommander string = "fleet_commander"

	// GetCharactersCharacterIDFleetOKBodyRoleSquadCommander captures enum value "squad_commander"
	GetCharactersCharacterIDFleetOKBodyRoleSquadCommander string = "squad_commander"

	// GetCharactersCharacterIDFleetOKBodyRoleSquadMember captures enum value "squad_member"
	GetCharactersCharacterIDFleetOKBodyRoleSquadMember string = "squad_member"

	// GetCharactersCharacterIDFleetOKBodyRoleWingCommander captures enum value "wing_commander"
	GetCharactersCharacterIDFleetOKBodyRoleWingCommander string = "wing_commander"
)

// prop value enum
func (m *GetCharactersCharacterIDFleetOKBody) validateRoleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getCharactersCharacterIdFleetOKBodyTypeRolePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetCharactersCharacterIDFleetOKBody) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", *m.Role); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDFleetOKBody) validateSquadID(formats strfmt.Registry) error {

	if err := validate.Required("squad_id", "body", m.SquadID); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDFleetOKBody) validateWingID(formats strfmt.Registry) error {

	if err := validate.Required("wing_id", "body", m.WingID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCharactersCharacterIDFleetOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCharactersCharacterIDFleetOKBody) UnmarshalBinary(b []byte) error {
	var res GetCharactersCharacterIDFleetOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
