package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// GetKillmailsKillmailIDKillmailHashVictim victim object
// swagger:model get_killmails_killmail_id_killmail_hash_victim
type GetKillmailsKillmailIDKillmailHashVictim struct {

	// get_killmails_killmail_id_killmail_hash_alliance_id
	//
	// alliance_id integer
	AllianceID int32 `json:"alliance_id,omitempty"`

	// get_killmails_killmail_id_killmail_hash_character_id
	//
	// character_id integer
	CharacterID int32 `json:"character_id,omitempty"`

	// get_killmails_killmail_id_killmail_hash_corporation_id
	//
	// corporation_id integer
	CorporationID int32 `json:"corporation_id,omitempty"`

	// get_killmails_killmail_id_killmail_hash_damage_taken
	//
	// How much total damage was taken by the victim
	//
	// Required: true
	DamageTaken *int32 `json:"damage_taken"`

	// get_killmails_killmail_id_killmail_hash_faction_id
	//
	// faction_id integer
	FactionID int32 `json:"faction_id,omitempty"`

	// get_killmails_killmail_id_killmail_hash_items
	//
	// items array
	Items []*GetKillmailsKillmailIDKillmailHashItem1 `json:"items"`

	// position
	Position *GetKillmailsKillmailIDKillmailHashPosition `json:"position,omitempty"`

	// get_killmails_killmail_id_killmail_hash_ship_type_id
	//
	// The ship that the victim was piloting and was destroyed
	//
	// Required: true
	ShipTypeID *int32 `json:"ship_type_id"`
}

// Validate validates this get killmails killmail id killmail hash victim
func (m *GetKillmailsKillmailIDKillmailHashVictim) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDamageTaken(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateShipTypeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetKillmailsKillmailIDKillmailHashVictim) validateDamageTaken(formats strfmt.Registry) error {

	if err := validate.Required("damage_taken", "body", m.DamageTaken); err != nil {
		return err
	}

	return nil
}

func (m *GetKillmailsKillmailIDKillmailHashVictim) validateItems(formats strfmt.Registry) error {

	if swag.IsZero(m.Items) { // not required
		return nil
	}

	for i := 0; i < len(m.Items); i++ {

		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {

			if err := m.Items[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *GetKillmailsKillmailIDKillmailHashVictim) validatePosition(formats strfmt.Registry) error {

	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if m.Position != nil {

		if err := m.Position.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *GetKillmailsKillmailIDKillmailHashVictim) validateShipTypeID(formats strfmt.Registry) error {

	if err := validate.Required("ship_type_id", "body", m.ShipTypeID); err != nil {
		return err
	}

	return nil
}
