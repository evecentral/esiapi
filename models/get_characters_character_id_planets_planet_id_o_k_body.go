// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCharactersCharacterIDPlanetsPlanetIDOKBody get_characters_character_id_planets_planet_id_ok
//
// 200 ok object
// swagger:model getCharactersCharacterIdPlanetsPlanetIdOKBody
type GetCharactersCharacterIDPlanetsPlanetIDOKBody struct {

	// get_characters_character_id_planets_planet_id_links
	//
	// links array
	// Required: true
	// Max Items: 500
	Links []*GetCharactersCharacterIDPlanetsPlanetIDOKBodyLinksItems `json:"links"`

	// get_characters_character_id_planets_planet_id_pins
	//
	// pins array
	// Required: true
	// Max Items: 100
	Pins []*GetCharactersCharacterIDPlanetsPlanetIDOKBodyPinsItems `json:"pins"`

	// get_characters_character_id_planets_planet_id_routes
	//
	// routes array
	// Required: true
	// Max Items: 1000
	Routes []*GetCharactersCharacterIDPlanetsPlanetIDOKBodyRoutesItems `json:"routes"`
}

// Validate validates this get characters character Id planets planet Id o k body
func (m *GetCharactersCharacterIDPlanetsPlanetIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCharactersCharacterIDPlanetsPlanetIDOKBody) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("links", "body", m.Links); err != nil {
		return err
	}

	iLinksSize := int64(len(m.Links))

	if err := validate.MaxItems("links", "body", iLinksSize, 500); err != nil {
		return err
	}

	for i := 0; i < len(m.Links); i++ {
		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {
			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetCharactersCharacterIDPlanetsPlanetIDOKBody) validatePins(formats strfmt.Registry) error {

	if err := validate.Required("pins", "body", m.Pins); err != nil {
		return err
	}

	iPinsSize := int64(len(m.Pins))

	if err := validate.MaxItems("pins", "body", iPinsSize, 100); err != nil {
		return err
	}

	for i := 0; i < len(m.Pins); i++ {
		if swag.IsZero(m.Pins[i]) { // not required
			continue
		}

		if m.Pins[i] != nil {
			if err := m.Pins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetCharactersCharacterIDPlanetsPlanetIDOKBody) validateRoutes(formats strfmt.Registry) error {

	if err := validate.Required("routes", "body", m.Routes); err != nil {
		return err
	}

	iRoutesSize := int64(len(m.Routes))

	if err := validate.MaxItems("routes", "body", iRoutesSize, 1000); err != nil {
		return err
	}

	for i := 0; i < len(m.Routes); i++ {
		if swag.IsZero(m.Routes[i]) { // not required
			continue
		}

		if m.Routes[i] != nil {
			if err := m.Routes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCharactersCharacterIDPlanetsPlanetIDOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCharactersCharacterIDPlanetsPlanetIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetCharactersCharacterIDPlanetsPlanetIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
