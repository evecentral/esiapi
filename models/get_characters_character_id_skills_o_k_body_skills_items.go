// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCharactersCharacterIDSkillsOKBodySkillsItems get_characters_character_id_skills_skill
//
// skill object
// swagger:model getCharactersCharacterIdSkillsOKBodySkillsItems
type GetCharactersCharacterIDSkillsOKBodySkillsItems struct {

	// get_characters_character_id_skills_active_skill_level
	//
	// active_skill_level integer
	// Required: true
	ActiveSkillLevel *int32 `json:"active_skill_level"`

	// get_characters_character_id_skills_skill_id
	//
	// skill_id integer
	// Required: true
	SkillID *int32 `json:"skill_id"`

	// get_characters_character_id_skills_skillpoints_in_skill
	//
	// skillpoints_in_skill integer
	// Required: true
	SkillpointsInSkill *int64 `json:"skillpoints_in_skill"`

	// get_characters_character_id_skills_trained_skill_level
	//
	// trained_skill_level integer
	// Required: true
	TrainedSkillLevel *int32 `json:"trained_skill_level"`
}

// Validate validates this get characters character Id skills o k body skills items
func (m *GetCharactersCharacterIDSkillsOKBodySkillsItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveSkillLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkillID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkillpointsInSkill(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainedSkillLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCharactersCharacterIDSkillsOKBodySkillsItems) validateActiveSkillLevel(formats strfmt.Registry) error {

	if err := validate.Required("active_skill_level", "body", m.ActiveSkillLevel); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDSkillsOKBodySkillsItems) validateSkillID(formats strfmt.Registry) error {

	if err := validate.Required("skill_id", "body", m.SkillID); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDSkillsOKBodySkillsItems) validateSkillpointsInSkill(formats strfmt.Registry) error {

	if err := validate.Required("skillpoints_in_skill", "body", m.SkillpointsInSkill); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDSkillsOKBodySkillsItems) validateTrainedSkillLevel(formats strfmt.Registry) error {

	if err := validate.Required("trained_skill_level", "body", m.TrainedSkillLevel); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCharactersCharacterIDSkillsOKBodySkillsItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCharactersCharacterIDSkillsOKBodySkillsItems) UnmarshalBinary(b []byte) error {
	var res GetCharactersCharacterIDSkillsOKBodySkillsItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
