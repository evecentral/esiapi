// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetDogmaDynamicItemsTypeIDItemIDOKBody get_dogma_dynamic_items_type_id_item_id_ok
//
// 200 ok object
// swagger:model getDogmaDynamicItemsTypeIdItemIdOKBody
type GetDogmaDynamicItemsTypeIDItemIDOKBody struct {

	// get_dogma_dynamic_items_type_id_item_id_created_by
	//
	// The ID of the character who created the item
	// Required: true
	CreatedBy *int32 `json:"created_by"`

	// get_dogma_dynamic_items_type_id_item_id_dogma_attributes
	//
	// dogma_attributes array
	// Required: true
	// Max Items: 1000
	DogmaAttributes []*GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaAttributesItems `json:"dogma_attributes"`

	// get_dogma_dynamic_items_type_id_item_id_dogma_effects
	//
	// dogma_effects array
	// Required: true
	// Max Items: 1000
	DogmaEffects []*GetDogmaDynamicItemsTypeIDItemIDOKBodyDogmaEffectsItems `json:"dogma_effects"`

	// get_dogma_dynamic_items_type_id_item_id_mutator_type_id
	//
	// The type ID of the mutator used to generate the dynamic item.
	// Required: true
	MutatorTypeID *int32 `json:"mutator_type_id"`

	// get_dogma_dynamic_items_type_id_item_id_source_type_id
	//
	// The type ID of the source item the mutator was applied to create the dynamic item.
	// Required: true
	SourceTypeID *int32 `json:"source_type_id"`
}

// Validate validates this get dogma dynamic items type Id item Id o k body
func (m *GetDogmaDynamicItemsTypeIDItemIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDogmaAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDogmaEffects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMutatorTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceTypeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetDogmaDynamicItemsTypeIDItemIDOKBody) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("created_by", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *GetDogmaDynamicItemsTypeIDItemIDOKBody) validateDogmaAttributes(formats strfmt.Registry) error {

	if err := validate.Required("dogma_attributes", "body", m.DogmaAttributes); err != nil {
		return err
	}

	iDogmaAttributesSize := int64(len(m.DogmaAttributes))

	if err := validate.MaxItems("dogma_attributes", "body", iDogmaAttributesSize, 1000); err != nil {
		return err
	}

	for i := 0; i < len(m.DogmaAttributes); i++ {
		if swag.IsZero(m.DogmaAttributes[i]) { // not required
			continue
		}

		if m.DogmaAttributes[i] != nil {
			if err := m.DogmaAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dogma_attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetDogmaDynamicItemsTypeIDItemIDOKBody) validateDogmaEffects(formats strfmt.Registry) error {

	if err := validate.Required("dogma_effects", "body", m.DogmaEffects); err != nil {
		return err
	}

	iDogmaEffectsSize := int64(len(m.DogmaEffects))

	if err := validate.MaxItems("dogma_effects", "body", iDogmaEffectsSize, 1000); err != nil {
		return err
	}

	for i := 0; i < len(m.DogmaEffects); i++ {
		if swag.IsZero(m.DogmaEffects[i]) { // not required
			continue
		}

		if m.DogmaEffects[i] != nil {
			if err := m.DogmaEffects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dogma_effects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetDogmaDynamicItemsTypeIDItemIDOKBody) validateMutatorTypeID(formats strfmt.Registry) error {

	if err := validate.Required("mutator_type_id", "body", m.MutatorTypeID); err != nil {
		return err
	}

	return nil
}

func (m *GetDogmaDynamicItemsTypeIDItemIDOKBody) validateSourceTypeID(formats strfmt.Registry) error {

	if err := validate.Required("source_type_id", "body", m.SourceTypeID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetDogmaDynamicItemsTypeIDItemIDOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetDogmaDynamicItemsTypeIDItemIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetDogmaDynamicItemsTypeIDItemIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
