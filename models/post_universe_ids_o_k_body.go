// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostUniverseIdsOKBody post_universe_ids_ok
//
// 200 ok object
// swagger:model postUniverseIdsOKBody
type PostUniverseIdsOKBody struct {

	// post_universe_ids_agents
	//
	// agents array
	// Max Items: 1000
	Agents []*PostUniverseIdsOKBodyAgentsItems `json:"agents"`

	// post_universe_ids_alliances
	//
	// alliances array
	// Max Items: 1000
	Alliances []*PostUniverseIdsOKBodyAlliancesItems `json:"alliances"`

	// post_universe_ids_characters
	//
	// characters array
	// Max Items: 1000
	Characters []*PostUniverseIdsOKBodyCharactersItems `json:"characters"`

	// post_universe_ids_constellations
	//
	// constellations array
	// Max Items: 1000
	Constellations []*PostUniverseIdsOKBodyConstellationsItems `json:"constellations"`

	// post_universe_ids_corporations
	//
	// corporations array
	// Max Items: 1000
	Corporations []*PostUniverseIdsOKBodyCorporationsItems `json:"corporations"`

	// post_universe_ids_factions
	//
	// factions array
	// Max Items: 1000
	Factions []*PostUniverseIdsOKBodyFactionsItems `json:"factions"`

	// post_universe_ids_inventory_types
	//
	// inventory_types array
	// Max Items: 1000
	InventoryTypes []*PostUniverseIdsOKBodyInventoryTypesItems `json:"inventory_types"`

	// post_universe_ids_regions
	//
	// regions array
	// Max Items: 1000
	Regions []*PostUniverseIdsOKBodyRegionsItems `json:"regions"`

	// post_universe_ids_stations
	//
	// stations array
	// Max Items: 1000
	Stations []*PostUniverseIdsOKBodyStationsItems `json:"stations"`

	// post_universe_ids_systems
	//
	// systems array
	// Max Items: 1000
	Systems []*PostUniverseIdsOKBodySystemsItems `json:"systems"`
}

// Validate validates this post universe ids o k body
func (m *PostUniverseIdsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlliances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCharacters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstellations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCorporations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFactions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventoryTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostUniverseIdsOKBody) validateAgents(formats strfmt.Registry) error {

	if swag.IsZero(m.Agents) { // not required
		return nil
	}

	iAgentsSize := int64(len(m.Agents))

	if err := validate.MaxItems("agents", "body", iAgentsSize, 1000); err != nil {
		return err
	}

	for i := 0; i < len(m.Agents); i++ {
		if swag.IsZero(m.Agents[i]) { // not required
			continue
		}

		if m.Agents[i] != nil {
			if err := m.Agents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PostUniverseIdsOKBody) validateAlliances(formats strfmt.Registry) error {

	if swag.IsZero(m.Alliances) { // not required
		return nil
	}

	iAlliancesSize := int64(len(m.Alliances))

	if err := validate.MaxItems("alliances", "body", iAlliancesSize, 1000); err != nil {
		return err
	}

	for i := 0; i < len(m.Alliances); i++ {
		if swag.IsZero(m.Alliances[i]) { // not required
			continue
		}

		if m.Alliances[i] != nil {
			if err := m.Alliances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alliances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PostUniverseIdsOKBody) validateCharacters(formats strfmt.Registry) error {

	if swag.IsZero(m.Characters) { // not required
		return nil
	}

	iCharactersSize := int64(len(m.Characters))

	if err := validate.MaxItems("characters", "body", iCharactersSize, 1000); err != nil {
		return err
	}

	for i := 0; i < len(m.Characters); i++ {
		if swag.IsZero(m.Characters[i]) { // not required
			continue
		}

		if m.Characters[i] != nil {
			if err := m.Characters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("characters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PostUniverseIdsOKBody) validateConstellations(formats strfmt.Registry) error {

	if swag.IsZero(m.Constellations) { // not required
		return nil
	}

	iConstellationsSize := int64(len(m.Constellations))

	if err := validate.MaxItems("constellations", "body", iConstellationsSize, 1000); err != nil {
		return err
	}

	for i := 0; i < len(m.Constellations); i++ {
		if swag.IsZero(m.Constellations[i]) { // not required
			continue
		}

		if m.Constellations[i] != nil {
			if err := m.Constellations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("constellations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PostUniverseIdsOKBody) validateCorporations(formats strfmt.Registry) error {

	if swag.IsZero(m.Corporations) { // not required
		return nil
	}

	iCorporationsSize := int64(len(m.Corporations))

	if err := validate.MaxItems("corporations", "body", iCorporationsSize, 1000); err != nil {
		return err
	}

	for i := 0; i < len(m.Corporations); i++ {
		if swag.IsZero(m.Corporations[i]) { // not required
			continue
		}

		if m.Corporations[i] != nil {
			if err := m.Corporations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("corporations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PostUniverseIdsOKBody) validateFactions(formats strfmt.Registry) error {

	if swag.IsZero(m.Factions) { // not required
		return nil
	}

	iFactionsSize := int64(len(m.Factions))

	if err := validate.MaxItems("factions", "body", iFactionsSize, 1000); err != nil {
		return err
	}

	for i := 0; i < len(m.Factions); i++ {
		if swag.IsZero(m.Factions[i]) { // not required
			continue
		}

		if m.Factions[i] != nil {
			if err := m.Factions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("factions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PostUniverseIdsOKBody) validateInventoryTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.InventoryTypes) { // not required
		return nil
	}

	iInventoryTypesSize := int64(len(m.InventoryTypes))

	if err := validate.MaxItems("inventory_types", "body", iInventoryTypesSize, 1000); err != nil {
		return err
	}

	for i := 0; i < len(m.InventoryTypes); i++ {
		if swag.IsZero(m.InventoryTypes[i]) { // not required
			continue
		}

		if m.InventoryTypes[i] != nil {
			if err := m.InventoryTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inventory_types" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PostUniverseIdsOKBody) validateRegions(formats strfmt.Registry) error {

	if swag.IsZero(m.Regions) { // not required
		return nil
	}

	iRegionsSize := int64(len(m.Regions))

	if err := validate.MaxItems("regions", "body", iRegionsSize, 1000); err != nil {
		return err
	}

	for i := 0; i < len(m.Regions); i++ {
		if swag.IsZero(m.Regions[i]) { // not required
			continue
		}

		if m.Regions[i] != nil {
			if err := m.Regions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PostUniverseIdsOKBody) validateStations(formats strfmt.Registry) error {

	if swag.IsZero(m.Stations) { // not required
		return nil
	}

	iStationsSize := int64(len(m.Stations))

	if err := validate.MaxItems("stations", "body", iStationsSize, 1000); err != nil {
		return err
	}

	for i := 0; i < len(m.Stations); i++ {
		if swag.IsZero(m.Stations[i]) { // not required
			continue
		}

		if m.Stations[i] != nil {
			if err := m.Stations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PostUniverseIdsOKBody) validateSystems(formats strfmt.Registry) error {

	if swag.IsZero(m.Systems) { // not required
		return nil
	}

	iSystemsSize := int64(len(m.Systems))

	if err := validate.MaxItems("systems", "body", iSystemsSize, 1000); err != nil {
		return err
	}

	for i := 0; i < len(m.Systems); i++ {
		if swag.IsZero(m.Systems[i]) { // not required
			continue
		}

		if m.Systems[i] != nil {
			if err := m.Systems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("systems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostUniverseIdsOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostUniverseIdsOKBody) UnmarshalBinary(b []byte) error {
	var res PostUniverseIdsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
