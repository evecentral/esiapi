// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAlliancesAllianceIDContactsOKBodyItems get_alliances_alliance_id_contacts_200_ok
//
// 200 ok object
// swagger:model getAlliancesAllianceIdContactsOKBodyItems
type GetAlliancesAllianceIDContactsOKBodyItems struct {

	// get_alliances_alliance_id_contacts_contact_id
	//
	// contact_id integer
	// Required: true
	ContactID *int32 `json:"contact_id"`

	// get_alliances_alliance_id_contacts_contact_type
	//
	// contact_type string
	// Required: true
	// Enum: [character corporation alliance faction]
	ContactType *string `json:"contact_type"`

	// get_alliances_alliance_id_contacts_label_ids
	//
	// label_ids array
	// Max Items: 63
	LabelIds []int64 `json:"label_ids"`

	// get_alliances_alliance_id_contacts_standing
	//
	// Standing of the contact
	// Required: true
	Standing *float32 `json:"standing"`
}

// Validate validates this get alliances alliance Id contacts o k body items
func (m *GetAlliancesAllianceIDContactsOKBodyItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStanding(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetAlliancesAllianceIDContactsOKBodyItems) validateContactID(formats strfmt.Registry) error {

	if err := validate.Required("contact_id", "body", m.ContactID); err != nil {
		return err
	}

	return nil
}

var getAlliancesAllianceIdContactsOKBodyItemsTypeContactTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["character","corporation","alliance","faction"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getAlliancesAllianceIdContactsOKBodyItemsTypeContactTypePropEnum = append(getAlliancesAllianceIdContactsOKBodyItemsTypeContactTypePropEnum, v)
	}
}

const (

	// GetAlliancesAllianceIDContactsOKBodyItemsContactTypeCharacter captures enum value "character"
	GetAlliancesAllianceIDContactsOKBodyItemsContactTypeCharacter string = "character"

	// GetAlliancesAllianceIDContactsOKBodyItemsContactTypeCorporation captures enum value "corporation"
	GetAlliancesAllianceIDContactsOKBodyItemsContactTypeCorporation string = "corporation"

	// GetAlliancesAllianceIDContactsOKBodyItemsContactTypeAlliance captures enum value "alliance"
	GetAlliancesAllianceIDContactsOKBodyItemsContactTypeAlliance string = "alliance"

	// GetAlliancesAllianceIDContactsOKBodyItemsContactTypeFaction captures enum value "faction"
	GetAlliancesAllianceIDContactsOKBodyItemsContactTypeFaction string = "faction"
)

// prop value enum
func (m *GetAlliancesAllianceIDContactsOKBodyItems) validateContactTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getAlliancesAllianceIdContactsOKBodyItemsTypeContactTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetAlliancesAllianceIDContactsOKBodyItems) validateContactType(formats strfmt.Registry) error {

	if err := validate.Required("contact_type", "body", m.ContactType); err != nil {
		return err
	}

	// value enum
	if err := m.validateContactTypeEnum("contact_type", "body", *m.ContactType); err != nil {
		return err
	}

	return nil
}

func (m *GetAlliancesAllianceIDContactsOKBodyItems) validateLabelIds(formats strfmt.Registry) error {

	if swag.IsZero(m.LabelIds) { // not required
		return nil
	}

	iLabelIdsSize := int64(len(m.LabelIds))

	if err := validate.MaxItems("label_ids", "body", iLabelIdsSize, 63); err != nil {
		return err
	}

	return nil
}

func (m *GetAlliancesAllianceIDContactsOKBodyItems) validateStanding(formats strfmt.Registry) error {

	if err := validate.Required("standing", "body", m.Standing); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetAlliancesAllianceIDContactsOKBodyItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetAlliancesAllianceIDContactsOKBodyItems) UnmarshalBinary(b []byte) error {
	var res GetAlliancesAllianceIDContactsOKBodyItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
