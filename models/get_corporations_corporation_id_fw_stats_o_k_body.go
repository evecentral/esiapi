// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCorporationsCorporationIDFwStatsOKBody get_corporations_corporation_id_fw_stats_ok
//
// 200 ok object
// swagger:model getCorporationsCorporationIdFwStatsOKBody
type GetCorporationsCorporationIDFwStatsOKBody struct {

	// get_corporations_corporation_id_fw_stats_enlisted_on
	//
	// The enlistment date of the given corporation into faction warfare. Will not be included if corporation is not enlisted in faction warfare
	// Format: date-time
	EnlistedOn strfmt.DateTime `json:"enlisted_on,omitempty"`

	// get_corporations_corporation_id_fw_stats_faction_id
	//
	// The faction the given corporation is enlisted to fight for. Will not be included if corporation is not enlisted in faction warfare
	FactionID int32 `json:"faction_id,omitempty"`

	// kills
	// Required: true
	Kills *GetCorporationsCorporationIDFwStatsOKBodyKills `json:"kills"`

	// get_corporations_corporation_id_fw_stats_pilots
	//
	// How many pilots the enlisted corporation has. Will not be included if corporation is not enlisted in faction warfare
	Pilots int32 `json:"pilots,omitempty"`

	// victory points
	// Required: true
	VictoryPoints *GetCorporationsCorporationIDFwStatsOKBodyVictoryPoints `json:"victory_points"`
}

// Validate validates this get corporations corporation Id fw stats o k body
func (m *GetCorporationsCorporationIDFwStatsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnlistedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKills(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVictoryPoints(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCorporationsCorporationIDFwStatsOKBody) validateEnlistedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.EnlistedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("enlisted_on", "body", "date-time", m.EnlistedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDFwStatsOKBody) validateKills(formats strfmt.Registry) error {

	if err := validate.Required("kills", "body", m.Kills); err != nil {
		return err
	}

	if m.Kills != nil {
		if err := m.Kills.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kills")
			}
			return err
		}
	}

	return nil
}

func (m *GetCorporationsCorporationIDFwStatsOKBody) validateVictoryPoints(formats strfmt.Registry) error {

	if err := validate.Required("victory_points", "body", m.VictoryPoints); err != nil {
		return err
	}

	if m.VictoryPoints != nil {
		if err := m.VictoryPoints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("victory_points")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCorporationsCorporationIDFwStatsOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCorporationsCorporationIDFwStatsOKBody) UnmarshalBinary(b []byte) error {
	var res GetCorporationsCorporationIDFwStatsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
