package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// GetCharactersCharacterIDBookmarks200Ok 200 ok object
// swagger:model get_characters_character_id_bookmarks_200_ok
type GetCharactersCharacterIDBookmarks200Ok struct {

	// get_characters_character_id_bookmarks_bookmark_id
	//
	// bookmark_id integer
	// Required: true
	BookmarkID *int64 `json:"bookmark_id"`

	// get_characters_character_id_bookmarks_create_date
	//
	// create_date string
	// Required: true
	CreateDate *strfmt.DateTime `json:"create_date"`

	// get_characters_character_id_bookmarks_creator_id
	//
	// creator_id integer
	// Required: true
	CreatorID *int32 `json:"creator_id"`

	// get_characters_character_id_bookmarks_folder_id
	//
	// folder_id integer
	FolderID int32 `json:"folder_id,omitempty"`

	// get_characters_character_id_bookmarks_memo
	//
	// memo string
	// Required: true
	Memo *string `json:"memo"`

	// get_characters_character_id_bookmarks_note
	//
	// note string
	// Required: true
	Note *string `json:"note"`

	// get_characters_character_id_bookmarks_owner_id
	//
	// owner_id integer
	// Required: true
	OwnerID *int32 `json:"owner_id"`

	// target
	Target *GetCharactersCharacterIDBookmarksTarget `json:"target,omitempty"`
}

// Validate validates this get characters character id bookmarks 200 ok
func (m *GetCharactersCharacterIDBookmarks200Ok) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBookmarkID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreateDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreatorID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMemo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNote(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOwnerID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCharactersCharacterIDBookmarks200Ok) validateBookmarkID(formats strfmt.Registry) error {

	if err := validate.Required("bookmark_id", "body", m.BookmarkID); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDBookmarks200Ok) validateCreateDate(formats strfmt.Registry) error {

	if err := validate.Required("create_date", "body", m.CreateDate); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDBookmarks200Ok) validateCreatorID(formats strfmt.Registry) error {

	if err := validate.Required("creator_id", "body", m.CreatorID); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDBookmarks200Ok) validateMemo(formats strfmt.Registry) error {

	if err := validate.Required("memo", "body", m.Memo); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDBookmarks200Ok) validateNote(formats strfmt.Registry) error {

	if err := validate.Required("note", "body", m.Note); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDBookmarks200Ok) validateOwnerID(formats strfmt.Registry) error {

	if err := validate.Required("owner_id", "body", m.OwnerID); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDBookmarks200Ok) validateTarget(formats strfmt.Registry) error {

	if swag.IsZero(m.Target) { // not required
		return nil
	}

	if m.Target != nil {

		if err := m.Target.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
