package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// GetCharactersCharacterIDCalendarEventIDOk Full details of a specific event
// swagger:model get_characters_character_id_calendar_event_id_ok
type GetCharactersCharacterIDCalendarEventIDOk struct {

	// get_characters_character_id_calendar_event_id_date
	//
	// date string
	// Required: true
	Date *strfmt.DateTime `json:"date"`

	// get_characters_character_id_calendar_event_id_duration
	//
	// Length in minutes
	// Required: true
	Duration *int64 `json:"duration"`

	// get_characters_character_id_calendar_event_id_event_id
	//
	// event_id integer
	// Required: true
	EventID *int32 `json:"event_id"`

	// get_characters_character_id_calendar_event_id_importance
	//
	// importance integer
	// Required: true
	Importance *int32 `json:"importance"`

	// get_characters_character_id_calendar_event_id_owner_id
	//
	// owner_id integer
	// Required: true
	OwnerID *int64 `json:"owner_id"`

	// get_characters_character_id_calendar_event_id_owner_name
	//
	// owner_name string
	// Required: true
	OwnerName *string `json:"owner_name"`

	// get_characters_character_id_calendar_event_id_owner_type
	//
	// owner_type string
	// Required: true
	OwnerType *string `json:"owner_type"`

	// get_characters_character_id_calendar_event_id_response
	//
	// response string
	// Required: true
	Response *string `json:"response"`

	// get_characters_character_id_calendar_event_id_text
	//
	// text string
	// Required: true
	Text *string `json:"text"`

	// get_characters_character_id_calendar_event_id_title
	//
	// title string
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this get characters character id calendar event id ok
func (m *GetCharactersCharacterIDCalendarEventIDOk) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEventID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateImportance(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOwnerID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOwnerName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOwnerType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResponse(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCharactersCharacterIDCalendarEventIDOk) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDCalendarEventIDOk) validateDuration(formats strfmt.Registry) error {

	if err := validate.Required("duration", "body", m.Duration); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDCalendarEventIDOk) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("event_id", "body", m.EventID); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDCalendarEventIDOk) validateImportance(formats strfmt.Registry) error {

	if err := validate.Required("importance", "body", m.Importance); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDCalendarEventIDOk) validateOwnerID(formats strfmt.Registry) error {

	if err := validate.Required("owner_id", "body", m.OwnerID); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDCalendarEventIDOk) validateOwnerName(formats strfmt.Registry) error {

	if err := validate.Required("owner_name", "body", m.OwnerName); err != nil {
		return err
	}

	return nil
}

var getCharactersCharacterIdCalendarEventIdOkTypeOwnerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["eve_server","corporation","faction","character","alliance"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCharactersCharacterIdCalendarEventIdOkTypeOwnerTypePropEnum = append(getCharactersCharacterIdCalendarEventIdOkTypeOwnerTypePropEnum, v)
	}
}

const (
	GetCharactersCharacterIDCalendarEventIDOkOwnerTypeEveServer   string = "eve_server"
	GetCharactersCharacterIDCalendarEventIDOkOwnerTypeCorporation string = "corporation"
	GetCharactersCharacterIDCalendarEventIDOkOwnerTypeFaction     string = "faction"
	GetCharactersCharacterIDCalendarEventIDOkOwnerTypeCharacter   string = "character"
	GetCharactersCharacterIDCalendarEventIDOkOwnerTypeAlliance    string = "alliance"
)

// prop value enum
func (m *GetCharactersCharacterIDCalendarEventIDOk) validateOwnerTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getCharactersCharacterIdCalendarEventIdOkTypeOwnerTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetCharactersCharacterIDCalendarEventIDOk) validateOwnerType(formats strfmt.Registry) error {

	if err := validate.Required("owner_type", "body", m.OwnerType); err != nil {
		return err
	}

	// value enum
	if err := m.validateOwnerTypeEnum("owner_type", "body", *m.OwnerType); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDCalendarEventIDOk) validateResponse(formats strfmt.Registry) error {

	if err := validate.Required("response", "body", m.Response); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDCalendarEventIDOk) validateText(formats strfmt.Registry) error {

	if err := validate.Required("text", "body", m.Text); err != nil {
		return err
	}

	return nil
}

func (m *GetCharactersCharacterIDCalendarEventIDOk) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}
