// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCorporationsCorporationIDContractsOKBodyItems get_corporations_corporation_id_contracts_200_ok
//
// 200 ok object
// swagger:model getCorporationsCorporationIdContractsOKBodyItems
type GetCorporationsCorporationIDContractsOKBodyItems struct {

	// get_corporations_corporation_id_contracts_acceptor_id
	//
	// Who will accept the contract
	// Required: true
	AcceptorID *int32 `json:"acceptor_id"`

	// get_corporations_corporation_id_contracts_assignee_id
	//
	// ID to whom the contract is assigned, can be corporation or character ID
	// Required: true
	AssigneeID *int32 `json:"assignee_id"`

	// get_corporations_corporation_id_contracts_availability
	//
	// To whom the contract is available
	// Required: true
	// Enum: [public personal corporation alliance]
	Availability *string `json:"availability"`

	// get_corporations_corporation_id_contracts_buyout
	//
	// Buyout price (for Auctions only)
	Buyout float64 `json:"buyout,omitempty"`

	// get_corporations_corporation_id_contracts_collateral
	//
	// Collateral price (for Couriers only)
	Collateral float64 `json:"collateral,omitempty"`

	// get_corporations_corporation_id_contracts_contract_id
	//
	// contract_id integer
	// Required: true
	ContractID *int32 `json:"contract_id"`

	// get_corporations_corporation_id_contracts_date_accepted
	//
	// Date of confirmation of contract
	// Format: date-time
	DateAccepted strfmt.DateTime `json:"date_accepted,omitempty"`

	// get_corporations_corporation_id_contracts_date_completed
	//
	// Date of completed of contract
	// Format: date-time
	DateCompleted strfmt.DateTime `json:"date_completed,omitempty"`

	// get_corporations_corporation_id_contracts_date_expired
	//
	// Expiration date of the contract
	// Required: true
	// Format: date-time
	DateExpired *strfmt.DateTime `json:"date_expired"`

	// get_corporations_corporation_id_contracts_date_issued
	//
	// Ð¡reation date of the contract
	// Required: true
	// Format: date-time
	DateIssued *strfmt.DateTime `json:"date_issued"`

	// get_corporations_corporation_id_contracts_days_to_complete
	//
	// Number of days to perform the contract
	DaysToComplete int32 `json:"days_to_complete,omitempty"`

	// get_corporations_corporation_id_contracts_end_location_id
	//
	// End location ID (for Couriers contract)
	EndLocationID int64 `json:"end_location_id,omitempty"`

	// get_corporations_corporation_id_contracts_for_corporation
	//
	// true if the contract was issued on behalf of the issuer's corporation
	// Required: true
	ForCorporation *bool `json:"for_corporation"`

	// get_corporations_corporation_id_contracts_issuer_corporation_id
	//
	// Character's corporation ID for the issuer
	// Required: true
	IssuerCorporationID *int32 `json:"issuer_corporation_id"`

	// get_corporations_corporation_id_contracts_issuer_id
	//
	// Character ID for the issuer
	// Required: true
	IssuerID *int32 `json:"issuer_id"`

	// get_corporations_corporation_id_contracts_price
	//
	// Price of contract (for ItemsExchange and Auctions)
	Price float64 `json:"price,omitempty"`

	// get_corporations_corporation_id_contracts_reward
	//
	// Remuneration for contract (for Couriers only)
	Reward float64 `json:"reward,omitempty"`

	// get_corporations_corporation_id_contracts_start_location_id
	//
	// Start location ID (for Couriers contract)
	StartLocationID int64 `json:"start_location_id,omitempty"`

	// get_corporations_corporation_id_contracts_status
	//
	// Status of the the contract
	// Required: true
	// Enum: [outstanding in_progress finished_issuer finished_contractor finished cancelled rejected failed deleted reversed]
	Status *string `json:"status"`

	// get_corporations_corporation_id_contracts_title
	//
	// Title of the contract
	Title string `json:"title,omitempty"`

	// get_corporations_corporation_id_contracts_type
	//
	// Type of the contract
	// Required: true
	// Enum: [unknown item_exchange auction courier loan]
	Type *string `json:"type"`

	// get_corporations_corporation_id_contracts_volume
	//
	// Volume of items in the contract
	Volume float64 `json:"volume,omitempty"`
}

// Validate validates this get corporations corporation Id contracts o k body items
func (m *GetCorporationsCorporationIDContractsOKBodyItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcceptorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssigneeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateAccepted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateExpired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateIssued(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForCorporation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuerCorporationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCorporationsCorporationIDContractsOKBodyItems) validateAcceptorID(formats strfmt.Registry) error {

	if err := validate.Required("acceptor_id", "body", m.AcceptorID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDContractsOKBodyItems) validateAssigneeID(formats strfmt.Registry) error {

	if err := validate.Required("assignee_id", "body", m.AssigneeID); err != nil {
		return err
	}

	return nil
}

var getCorporationsCorporationIdContractsOKBodyItemsTypeAvailabilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["public","personal","corporation","alliance"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCorporationsCorporationIdContractsOKBodyItemsTypeAvailabilityPropEnum = append(getCorporationsCorporationIdContractsOKBodyItemsTypeAvailabilityPropEnum, v)
	}
}

const (

	// GetCorporationsCorporationIDContractsOKBodyItemsAvailabilityPublic captures enum value "public"
	GetCorporationsCorporationIDContractsOKBodyItemsAvailabilityPublic string = "public"

	// GetCorporationsCorporationIDContractsOKBodyItemsAvailabilityPersonal captures enum value "personal"
	GetCorporationsCorporationIDContractsOKBodyItemsAvailabilityPersonal string = "personal"

	// GetCorporationsCorporationIDContractsOKBodyItemsAvailabilityCorporation captures enum value "corporation"
	GetCorporationsCorporationIDContractsOKBodyItemsAvailabilityCorporation string = "corporation"

	// GetCorporationsCorporationIDContractsOKBodyItemsAvailabilityAlliance captures enum value "alliance"
	GetCorporationsCorporationIDContractsOKBodyItemsAvailabilityAlliance string = "alliance"
)

// prop value enum
func (m *GetCorporationsCorporationIDContractsOKBodyItems) validateAvailabilityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getCorporationsCorporationIdContractsOKBodyItemsTypeAvailabilityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetCorporationsCorporationIDContractsOKBodyItems) validateAvailability(formats strfmt.Registry) error {

	if err := validate.Required("availability", "body", m.Availability); err != nil {
		return err
	}

	// value enum
	if err := m.validateAvailabilityEnum("availability", "body", *m.Availability); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDContractsOKBodyItems) validateContractID(formats strfmt.Registry) error {

	if err := validate.Required("contract_id", "body", m.ContractID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDContractsOKBodyItems) validateDateAccepted(formats strfmt.Registry) error {

	if swag.IsZero(m.DateAccepted) { // not required
		return nil
	}

	if err := validate.FormatOf("date_accepted", "body", "date-time", m.DateAccepted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDContractsOKBodyItems) validateDateCompleted(formats strfmt.Registry) error {

	if swag.IsZero(m.DateCompleted) { // not required
		return nil
	}

	if err := validate.FormatOf("date_completed", "body", "date-time", m.DateCompleted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDContractsOKBodyItems) validateDateExpired(formats strfmt.Registry) error {

	if err := validate.Required("date_expired", "body", m.DateExpired); err != nil {
		return err
	}

	if err := validate.FormatOf("date_expired", "body", "date-time", m.DateExpired.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDContractsOKBodyItems) validateDateIssued(formats strfmt.Registry) error {

	if err := validate.Required("date_issued", "body", m.DateIssued); err != nil {
		return err
	}

	if err := validate.FormatOf("date_issued", "body", "date-time", m.DateIssued.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDContractsOKBodyItems) validateForCorporation(formats strfmt.Registry) error {

	if err := validate.Required("for_corporation", "body", m.ForCorporation); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDContractsOKBodyItems) validateIssuerCorporationID(formats strfmt.Registry) error {

	if err := validate.Required("issuer_corporation_id", "body", m.IssuerCorporationID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDContractsOKBodyItems) validateIssuerID(formats strfmt.Registry) error {

	if err := validate.Required("issuer_id", "body", m.IssuerID); err != nil {
		return err
	}

	return nil
}

var getCorporationsCorporationIdContractsOKBodyItemsTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["outstanding","in_progress","finished_issuer","finished_contractor","finished","cancelled","rejected","failed","deleted","reversed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCorporationsCorporationIdContractsOKBodyItemsTypeStatusPropEnum = append(getCorporationsCorporationIdContractsOKBodyItemsTypeStatusPropEnum, v)
	}
}

const (

	// GetCorporationsCorporationIDContractsOKBodyItemsStatusOutstanding captures enum value "outstanding"
	GetCorporationsCorporationIDContractsOKBodyItemsStatusOutstanding string = "outstanding"

	// GetCorporationsCorporationIDContractsOKBodyItemsStatusInProgress captures enum value "in_progress"
	GetCorporationsCorporationIDContractsOKBodyItemsStatusInProgress string = "in_progress"

	// GetCorporationsCorporationIDContractsOKBodyItemsStatusFinishedIssuer captures enum value "finished_issuer"
	GetCorporationsCorporationIDContractsOKBodyItemsStatusFinishedIssuer string = "finished_issuer"

	// GetCorporationsCorporationIDContractsOKBodyItemsStatusFinishedContractor captures enum value "finished_contractor"
	GetCorporationsCorporationIDContractsOKBodyItemsStatusFinishedContractor string = "finished_contractor"

	// GetCorporationsCorporationIDContractsOKBodyItemsStatusFinished captures enum value "finished"
	GetCorporationsCorporationIDContractsOKBodyItemsStatusFinished string = "finished"

	// GetCorporationsCorporationIDContractsOKBodyItemsStatusCancelled captures enum value "cancelled"
	GetCorporationsCorporationIDContractsOKBodyItemsStatusCancelled string = "cancelled"

	// GetCorporationsCorporationIDContractsOKBodyItemsStatusRejected captures enum value "rejected"
	GetCorporationsCorporationIDContractsOKBodyItemsStatusRejected string = "rejected"

	// GetCorporationsCorporationIDContractsOKBodyItemsStatusFailed captures enum value "failed"
	GetCorporationsCorporationIDContractsOKBodyItemsStatusFailed string = "failed"

	// GetCorporationsCorporationIDContractsOKBodyItemsStatusDeleted captures enum value "deleted"
	GetCorporationsCorporationIDContractsOKBodyItemsStatusDeleted string = "deleted"

	// GetCorporationsCorporationIDContractsOKBodyItemsStatusReversed captures enum value "reversed"
	GetCorporationsCorporationIDContractsOKBodyItemsStatusReversed string = "reversed"
)

// prop value enum
func (m *GetCorporationsCorporationIDContractsOKBodyItems) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getCorporationsCorporationIdContractsOKBodyItemsTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetCorporationsCorporationIDContractsOKBodyItems) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var getCorporationsCorporationIdContractsOKBodyItemsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","item_exchange","auction","courier","loan"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCorporationsCorporationIdContractsOKBodyItemsTypeTypePropEnum = append(getCorporationsCorporationIdContractsOKBodyItemsTypeTypePropEnum, v)
	}
}

const (

	// GetCorporationsCorporationIDContractsOKBodyItemsTypeUnknown captures enum value "unknown"
	GetCorporationsCorporationIDContractsOKBodyItemsTypeUnknown string = "unknown"

	// GetCorporationsCorporationIDContractsOKBodyItemsTypeItemExchange captures enum value "item_exchange"
	GetCorporationsCorporationIDContractsOKBodyItemsTypeItemExchange string = "item_exchange"

	// GetCorporationsCorporationIDContractsOKBodyItemsTypeAuction captures enum value "auction"
	GetCorporationsCorporationIDContractsOKBodyItemsTypeAuction string = "auction"

	// GetCorporationsCorporationIDContractsOKBodyItemsTypeCourier captures enum value "courier"
	GetCorporationsCorporationIDContractsOKBodyItemsTypeCourier string = "courier"

	// GetCorporationsCorporationIDContractsOKBodyItemsTypeLoan captures enum value "loan"
	GetCorporationsCorporationIDContractsOKBodyItemsTypeLoan string = "loan"
)

// prop value enum
func (m *GetCorporationsCorporationIDContractsOKBodyItems) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getCorporationsCorporationIdContractsOKBodyItemsTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetCorporationsCorporationIDContractsOKBodyItems) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCorporationsCorporationIDContractsOKBodyItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCorporationsCorporationIDContractsOKBodyItems) UnmarshalBinary(b []byte) error {
	var res GetCorporationsCorporationIDContractsOKBodyItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
