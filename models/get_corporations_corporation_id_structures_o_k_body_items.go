// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCorporationsCorporationIDStructuresOKBodyItems get_corporations_corporation_id_structures_200_ok
//
// 200 ok object
// swagger:model getCorporationsCorporationIdStructuresOKBodyItems
type GetCorporationsCorporationIDStructuresOKBodyItems struct {

	// get_corporations_corporation_id_structures_corporation_id
	//
	// ID of the corporation that owns the structure
	// Required: true
	CorporationID *int32 `json:"corporation_id"`

	// get_corporations_corporation_id_structures_fuel_expires
	//
	// Date on which the structure will run out of fuel
	// Format: date-time
	FuelExpires strfmt.DateTime `json:"fuel_expires,omitempty"`

	// get_corporations_corporation_id_structures_next_reinforce_apply
	//
	// The date and time when the structure's newly requested reinforcement times (e.g. next_reinforce_hour and next_reinforce_day) will take effect.
	// Format: date-time
	NextReinforceApply strfmt.DateTime `json:"next_reinforce_apply,omitempty"`

	// get_corporations_corporation_id_structures_next_reinforce_hour
	//
	// The requested change to reinforce_hour that will take effect at the time shown by next_reinforce_apply.
	// Maximum: 23
	// Minimum: 0
	NextReinforceHour *int32 `json:"next_reinforce_hour,omitempty"`

	// get_corporations_corporation_id_structures_next_reinforce_weekday
	//
	// The requested change to reinforce_weekday that will take effect at the time shown by next_reinforce_apply.
	// Maximum: 6
	// Minimum: 0
	NextReinforceWeekday *int32 `json:"next_reinforce_weekday,omitempty"`

	// get_corporations_corporation_id_structures_profile_id
	//
	// The id of the ACL profile for this citadel
	// Required: true
	ProfileID *int32 `json:"profile_id"`

	// get_corporations_corporation_id_structures_reinforce_hour
	//
	// The hour of day that determines the four hour window when the structure will randomly exit its reinforcement periods and become vulnerable to attack against its armor and/or hull. The structure will become vulnerable at a random time that is +/- 2 hours centered on the value of this property.
	// Required: true
	// Maximum: 23
	// Minimum: 0
	ReinforceHour *int32 `json:"reinforce_hour"`

	// get_corporations_corporation_id_structures_reinforce_weekday
	//
	// The day of the week when the structure exits its final reinforcement period and becomes vulnerable to attack against its hull. Monday is 0 and Sunday is 6.
	// Required: true
	// Maximum: 6
	// Minimum: 0
	ReinforceWeekday *int32 `json:"reinforce_weekday"`

	// get_corporations_corporation_id_structures_services
	//
	// Contains a list of service upgrades, and their state
	// Max Items: 10
	Services []*GetCorporationsCorporationIDStructuresOKBodyItemsServicesItems `json:"services"`

	// get_corporations_corporation_id_structures_state
	//
	// state string
	// Required: true
	// Enum: [anchor_vulnerable anchoring armor_reinforce armor_vulnerable fitting_invulnerable hull_reinforce hull_vulnerable online_deprecated onlining_vulnerable shield_vulnerable unanchored unknown]
	State *string `json:"state"`

	// get_corporations_corporation_id_structures_state_timer_end
	//
	// Date at which the structure will move to it's next state
	// Format: date-time
	StateTimerEnd strfmt.DateTime `json:"state_timer_end,omitempty"`

	// get_corporations_corporation_id_structures_state_timer_start
	//
	// Date at which the structure entered it's current state
	// Format: date-time
	StateTimerStart strfmt.DateTime `json:"state_timer_start,omitempty"`

	// get_corporations_corporation_id_structures_structure_id
	//
	// The Item ID of the structure
	// Required: true
	StructureID *int64 `json:"structure_id"`

	// get_corporations_corporation_id_structures_system_id
	//
	// The solar system the structure is in
	// Required: true
	SystemID *int32 `json:"system_id"`

	// get_corporations_corporation_id_structures_type_id
	//
	// The type id of the structure
	// Required: true
	TypeID *int32 `json:"type_id"`

	// get_corporations_corporation_id_structures_unanchors_at
	//
	// Date at which the structure will unanchor
	// Format: date-time
	UnanchorsAt strfmt.DateTime `json:"unanchors_at,omitempty"`
}

// Validate validates this get corporations corporation Id structures o k body items
func (m *GetCorporationsCorporationIDStructuresOKBodyItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCorporationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFuelExpires(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextReinforceApply(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextReinforceHour(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextReinforceWeekday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfileID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReinforceHour(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReinforceWeekday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateTimerEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateTimerStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStructureID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnanchorsAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCorporationsCorporationIDStructuresOKBodyItems) validateCorporationID(formats strfmt.Registry) error {

	if err := validate.Required("corporation_id", "body", m.CorporationID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDStructuresOKBodyItems) validateFuelExpires(formats strfmt.Registry) error {

	if swag.IsZero(m.FuelExpires) { // not required
		return nil
	}

	if err := validate.FormatOf("fuel_expires", "body", "date-time", m.FuelExpires.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDStructuresOKBodyItems) validateNextReinforceApply(formats strfmt.Registry) error {

	if swag.IsZero(m.NextReinforceApply) { // not required
		return nil
	}

	if err := validate.FormatOf("next_reinforce_apply", "body", "date-time", m.NextReinforceApply.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDStructuresOKBodyItems) validateNextReinforceHour(formats strfmt.Registry) error {

	if swag.IsZero(m.NextReinforceHour) { // not required
		return nil
	}

	if err := validate.MinimumInt("next_reinforce_hour", "body", int64(*m.NextReinforceHour), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("next_reinforce_hour", "body", int64(*m.NextReinforceHour), 23, false); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDStructuresOKBodyItems) validateNextReinforceWeekday(formats strfmt.Registry) error {

	if swag.IsZero(m.NextReinforceWeekday) { // not required
		return nil
	}

	if err := validate.MinimumInt("next_reinforce_weekday", "body", int64(*m.NextReinforceWeekday), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("next_reinforce_weekday", "body", int64(*m.NextReinforceWeekday), 6, false); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDStructuresOKBodyItems) validateProfileID(formats strfmt.Registry) error {

	if err := validate.Required("profile_id", "body", m.ProfileID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDStructuresOKBodyItems) validateReinforceHour(formats strfmt.Registry) error {

	if err := validate.Required("reinforce_hour", "body", m.ReinforceHour); err != nil {
		return err
	}

	if err := validate.MinimumInt("reinforce_hour", "body", int64(*m.ReinforceHour), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("reinforce_hour", "body", int64(*m.ReinforceHour), 23, false); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDStructuresOKBodyItems) validateReinforceWeekday(formats strfmt.Registry) error {

	if err := validate.Required("reinforce_weekday", "body", m.ReinforceWeekday); err != nil {
		return err
	}

	if err := validate.MinimumInt("reinforce_weekday", "body", int64(*m.ReinforceWeekday), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("reinforce_weekday", "body", int64(*m.ReinforceWeekday), 6, false); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDStructuresOKBodyItems) validateServices(formats strfmt.Registry) error {

	if swag.IsZero(m.Services) { // not required
		return nil
	}

	iServicesSize := int64(len(m.Services))

	if err := validate.MaxItems("services", "body", iServicesSize, 10); err != nil {
		return err
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var getCorporationsCorporationIdStructuresOKBodyItemsTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["anchor_vulnerable","anchoring","armor_reinforce","armor_vulnerable","fitting_invulnerable","hull_reinforce","hull_vulnerable","online_deprecated","onlining_vulnerable","shield_vulnerable","unanchored","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCorporationsCorporationIdStructuresOKBodyItemsTypeStatePropEnum = append(getCorporationsCorporationIdStructuresOKBodyItemsTypeStatePropEnum, v)
	}
}

const (

	// GetCorporationsCorporationIDStructuresOKBodyItemsStateAnchorVulnerable captures enum value "anchor_vulnerable"
	GetCorporationsCorporationIDStructuresOKBodyItemsStateAnchorVulnerable string = "anchor_vulnerable"

	// GetCorporationsCorporationIDStructuresOKBodyItemsStateAnchoring captures enum value "anchoring"
	GetCorporationsCorporationIDStructuresOKBodyItemsStateAnchoring string = "anchoring"

	// GetCorporationsCorporationIDStructuresOKBodyItemsStateArmorReinforce captures enum value "armor_reinforce"
	GetCorporationsCorporationIDStructuresOKBodyItemsStateArmorReinforce string = "armor_reinforce"

	// GetCorporationsCorporationIDStructuresOKBodyItemsStateArmorVulnerable captures enum value "armor_vulnerable"
	GetCorporationsCorporationIDStructuresOKBodyItemsStateArmorVulnerable string = "armor_vulnerable"

	// GetCorporationsCorporationIDStructuresOKBodyItemsStateFittingInvulnerable captures enum value "fitting_invulnerable"
	GetCorporationsCorporationIDStructuresOKBodyItemsStateFittingInvulnerable string = "fitting_invulnerable"

	// GetCorporationsCorporationIDStructuresOKBodyItemsStateHullReinforce captures enum value "hull_reinforce"
	GetCorporationsCorporationIDStructuresOKBodyItemsStateHullReinforce string = "hull_reinforce"

	// GetCorporationsCorporationIDStructuresOKBodyItemsStateHullVulnerable captures enum value "hull_vulnerable"
	GetCorporationsCorporationIDStructuresOKBodyItemsStateHullVulnerable string = "hull_vulnerable"

	// GetCorporationsCorporationIDStructuresOKBodyItemsStateOnlineDeprecated captures enum value "online_deprecated"
	GetCorporationsCorporationIDStructuresOKBodyItemsStateOnlineDeprecated string = "online_deprecated"

	// GetCorporationsCorporationIDStructuresOKBodyItemsStateOnliningVulnerable captures enum value "onlining_vulnerable"
	GetCorporationsCorporationIDStructuresOKBodyItemsStateOnliningVulnerable string = "onlining_vulnerable"

	// GetCorporationsCorporationIDStructuresOKBodyItemsStateShieldVulnerable captures enum value "shield_vulnerable"
	GetCorporationsCorporationIDStructuresOKBodyItemsStateShieldVulnerable string = "shield_vulnerable"

	// GetCorporationsCorporationIDStructuresOKBodyItemsStateUnanchored captures enum value "unanchored"
	GetCorporationsCorporationIDStructuresOKBodyItemsStateUnanchored string = "unanchored"

	// GetCorporationsCorporationIDStructuresOKBodyItemsStateUnknown captures enum value "unknown"
	GetCorporationsCorporationIDStructuresOKBodyItemsStateUnknown string = "unknown"
)

// prop value enum
func (m *GetCorporationsCorporationIDStructuresOKBodyItems) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getCorporationsCorporationIdStructuresOKBodyItemsTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetCorporationsCorporationIDStructuresOKBodyItems) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDStructuresOKBodyItems) validateStateTimerEnd(formats strfmt.Registry) error {

	if swag.IsZero(m.StateTimerEnd) { // not required
		return nil
	}

	if err := validate.FormatOf("state_timer_end", "body", "date-time", m.StateTimerEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDStructuresOKBodyItems) validateStateTimerStart(formats strfmt.Registry) error {

	if swag.IsZero(m.StateTimerStart) { // not required
		return nil
	}

	if err := validate.FormatOf("state_timer_start", "body", "date-time", m.StateTimerStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDStructuresOKBodyItems) validateStructureID(formats strfmt.Registry) error {

	if err := validate.Required("structure_id", "body", m.StructureID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDStructuresOKBodyItems) validateSystemID(formats strfmt.Registry) error {

	if err := validate.Required("system_id", "body", m.SystemID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDStructuresOKBodyItems) validateTypeID(formats strfmt.Registry) error {

	if err := validate.Required("type_id", "body", m.TypeID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDStructuresOKBodyItems) validateUnanchorsAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UnanchorsAt) { // not required
		return nil
	}

	if err := validate.FormatOf("unanchors_at", "body", "date-time", m.UnanchorsAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCorporationsCorporationIDStructuresOKBodyItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCorporationsCorporationIDStructuresOKBodyItems) UnmarshalBinary(b []byte) error {
	var res GetCorporationsCorporationIDStructuresOKBodyItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
