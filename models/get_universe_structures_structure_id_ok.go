package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// GetUniverseStructuresStructureIDOk 200 ok object
// swagger:model get_universe_structures_structure_id_ok
type GetUniverseStructuresStructureIDOk struct {

	// get_universe_structures_structure_id_name
	//
	// The full name of the structure
	// Required: true
	Name *string `json:"name"`

	// position
	Position *GetUniverseStructuresStructureIDPosition `json:"position,omitempty"`

	// get_universe_structures_structure_id_solar_system_id
	//
	// solar_system_id integer
	// Required: true
	SolarSystemID *int32 `json:"solar_system_id"`

	// get_universe_structures_structure_id_type_id
	//
	// type_id integer
	TypeID int32 `json:"type_id,omitempty"`
}

// Validate validates this get universe structures structure id ok
func (m *GetUniverseStructuresStructureIDOk) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSolarSystemID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetUniverseStructuresStructureIDOk) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *GetUniverseStructuresStructureIDOk) validatePosition(formats strfmt.Registry) error {

	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if m.Position != nil {

		if err := m.Position.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *GetUniverseStructuresStructureIDOk) validateSolarSystemID(formats strfmt.Registry) error {

	if err := validate.Required("solar_system_id", "body", m.SolarSystemID); err != nil {
		return err
	}

	return nil
}
