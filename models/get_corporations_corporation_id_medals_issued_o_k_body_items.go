// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCorporationsCorporationIDMedalsIssuedOKBodyItems get_corporations_corporation_id_medals_issued_200_ok
//
// 200 ok object
// swagger:model getCorporationsCorporationIdMedalsIssuedOKBodyItems
type GetCorporationsCorporationIDMedalsIssuedOKBodyItems struct {

	// get_corporations_corporation_id_medals_issued_character_id
	//
	// ID of the character who was rewarded this medal
	// Required: true
	CharacterID *int32 `json:"character_id"`

	// get_corporations_corporation_id_medals_issued_issued_at
	//
	// issued_at string
	// Required: true
	// Format: date-time
	IssuedAt *strfmt.DateTime `json:"issued_at"`

	// get_corporations_corporation_id_medals_issued_issuer_id
	//
	// ID of the character who issued the medal
	// Required: true
	IssuerID *int32 `json:"issuer_id"`

	// get_corporations_corporation_id_medals_issued_medal_id
	//
	// medal_id integer
	// Required: true
	MedalID *int32 `json:"medal_id"`

	// get_corporations_corporation_id_medals_issued_reason
	//
	// reason string
	// Required: true
	// Max Length: 1000
	Reason *string `json:"reason"`

	// get_corporations_corporation_id_medals_issued_status
	//
	// status string
	// Required: true
	// Enum: [private public]
	Status *string `json:"status"`
}

// Validate validates this get corporations corporation Id medals issued o k body items
func (m *GetCorporationsCorporationIDMedalsIssuedOKBodyItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCharacterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMedalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCorporationsCorporationIDMedalsIssuedOKBodyItems) validateCharacterID(formats strfmt.Registry) error {

	if err := validate.Required("character_id", "body", m.CharacterID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDMedalsIssuedOKBodyItems) validateIssuedAt(formats strfmt.Registry) error {

	if err := validate.Required("issued_at", "body", m.IssuedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("issued_at", "body", "date-time", m.IssuedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDMedalsIssuedOKBodyItems) validateIssuerID(formats strfmt.Registry) error {

	if err := validate.Required("issuer_id", "body", m.IssuerID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDMedalsIssuedOKBodyItems) validateMedalID(formats strfmt.Registry) error {

	if err := validate.Required("medal_id", "body", m.MedalID); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationsCorporationIDMedalsIssuedOKBodyItems) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("reason", "body", m.Reason); err != nil {
		return err
	}

	if err := validate.MaxLength("reason", "body", string(*m.Reason), 1000); err != nil {
		return err
	}

	return nil
}

var getCorporationsCorporationIdMedalsIssuedOKBodyItemsTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["private","public"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCorporationsCorporationIdMedalsIssuedOKBodyItemsTypeStatusPropEnum = append(getCorporationsCorporationIdMedalsIssuedOKBodyItemsTypeStatusPropEnum, v)
	}
}

const (

	// GetCorporationsCorporationIDMedalsIssuedOKBodyItemsStatusPrivate captures enum value "private"
	GetCorporationsCorporationIDMedalsIssuedOKBodyItemsStatusPrivate string = "private"

	// GetCorporationsCorporationIDMedalsIssuedOKBodyItemsStatusPublic captures enum value "public"
	GetCorporationsCorporationIDMedalsIssuedOKBodyItemsStatusPublic string = "public"
)

// prop value enum
func (m *GetCorporationsCorporationIDMedalsIssuedOKBodyItems) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getCorporationsCorporationIdMedalsIssuedOKBodyItemsTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetCorporationsCorporationIDMedalsIssuedOKBodyItems) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCorporationsCorporationIDMedalsIssuedOKBodyItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCorporationsCorporationIDMedalsIssuedOKBodyItems) UnmarshalBinary(b []byte) error {
	var res GetCorporationsCorporationIDMedalsIssuedOKBodyItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
