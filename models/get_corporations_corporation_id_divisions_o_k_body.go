// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCorporationsCorporationIDDivisionsOKBody get_corporations_corporation_id_divisions_ok
//
// 200 ok object
// swagger:model getCorporationsCorporationIdDivisionsOKBody
type GetCorporationsCorporationIDDivisionsOKBody struct {

	// get_corporations_corporation_id_divisions_hangar
	//
	// hangar array
	// Max Items: 7
	Hangar []*GetCorporationsCorporationIDDivisionsOKBodyHangarItems `json:"hangar"`

	// get_corporations_corporation_id_divisions_wallet
	//
	// wallet array
	// Max Items: 7
	Wallet []*GetCorporationsCorporationIDDivisionsOKBodyWalletItems `json:"wallet"`
}

// Validate validates this get corporations corporation Id divisions o k body
func (m *GetCorporationsCorporationIDDivisionsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHangar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWallet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCorporationsCorporationIDDivisionsOKBody) validateHangar(formats strfmt.Registry) error {

	if swag.IsZero(m.Hangar) { // not required
		return nil
	}

	iHangarSize := int64(len(m.Hangar))

	if err := validate.MaxItems("hangar", "body", iHangarSize, 7); err != nil {
		return err
	}

	for i := 0; i < len(m.Hangar); i++ {
		if swag.IsZero(m.Hangar[i]) { // not required
			continue
		}

		if m.Hangar[i] != nil {
			if err := m.Hangar[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hangar" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetCorporationsCorporationIDDivisionsOKBody) validateWallet(formats strfmt.Registry) error {

	if swag.IsZero(m.Wallet) { // not required
		return nil
	}

	iWalletSize := int64(len(m.Wallet))

	if err := validate.MaxItems("wallet", "body", iWalletSize, 7); err != nil {
		return err
	}

	for i := 0; i < len(m.Wallet); i++ {
		if swag.IsZero(m.Wallet[i]) { // not required
			continue
		}

		if m.Wallet[i] != nil {
			if err := m.Wallet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("wallet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCorporationsCorporationIDDivisionsOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCorporationsCorporationIDDivisionsOKBody) UnmarshalBinary(b []byte) error {
	var res GetCorporationsCorporationIDDivisionsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
