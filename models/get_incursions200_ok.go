package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// GetIncursions200Ok 200 ok object
// swagger:model get_incursions_200_ok
type GetIncursions200Ok struct {

	// get_incursions_constellation_id
	//
	// The constellation id in which this incursion takes place
	// Required: true
	ConstellationID *int64 `json:"constellation_id"`

	// get_incursions_faction_id
	//
	// The attacking faction's id
	// Required: true
	FactionID *int64 `json:"faction_id"`

	// get_incursions_has_boss
	//
	// Whether the final encounter has boss or not
	// Required: true
	HasBoss *bool `json:"has_boss"`

	// get_incursions_infested_solar_systems
	//
	// A list of infested solar system ids that are a part of this incursion
	// Required: true
	InfestedSolarSystems []int64 `json:"infested_solar_systems"`

	// get_incursions_influence
	//
	// Influence of this incursion as a float from 0 to 1
	// Required: true
	Influence *float32 `json:"influence"`

	// get_incursions_staging_solar_system_id
	//
	// Staging solar system for this incursion
	// Required: true
	StagingSolarSystemID *int64 `json:"staging_solar_system_id"`

	// get_incursions_state
	//
	// The state of this incursion
	// Required: true
	State *string `json:"state"`

	// get_incursions_type
	//
	// The type of this incursion
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this get incursions 200 ok
func (m *GetIncursions200Ok) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConstellationID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFactionID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHasBoss(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInfestedSolarSystems(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInfluence(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStagingSolarSystemID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetIncursions200Ok) validateConstellationID(formats strfmt.Registry) error {

	if err := validate.Required("constellation_id", "body", m.ConstellationID); err != nil {
		return err
	}

	return nil
}

func (m *GetIncursions200Ok) validateFactionID(formats strfmt.Registry) error {

	if err := validate.Required("faction_id", "body", m.FactionID); err != nil {
		return err
	}

	return nil
}

func (m *GetIncursions200Ok) validateHasBoss(formats strfmt.Registry) error {

	if err := validate.Required("has_boss", "body", m.HasBoss); err != nil {
		return err
	}

	return nil
}

func (m *GetIncursions200Ok) validateInfestedSolarSystems(formats strfmt.Registry) error {

	if err := validate.Required("infested_solar_systems", "body", m.InfestedSolarSystems); err != nil {
		return err
	}

	return nil
}

func (m *GetIncursions200Ok) validateInfluence(formats strfmt.Registry) error {

	if err := validate.Required("influence", "body", m.Influence); err != nil {
		return err
	}

	return nil
}

func (m *GetIncursions200Ok) validateStagingSolarSystemID(formats strfmt.Registry) error {

	if err := validate.Required("staging_solar_system_id", "body", m.StagingSolarSystemID); err != nil {
		return err
	}

	return nil
}

var getIncursions200OkTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["withdrawing","mobilizing","established"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getIncursions200OkTypeStatePropEnum = append(getIncursions200OkTypeStatePropEnum, v)
	}
}

const (
	getIncursions200OkStateWithdrawing string = "withdrawing"
	getIncursions200OkStateMobilizing  string = "mobilizing"
	getIncursions200OkStateEstablished string = "established"
)

// prop value enum
func (m *GetIncursions200Ok) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getIncursions200OkTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetIncursions200Ok) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *GetIncursions200Ok) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
