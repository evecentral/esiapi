// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetCorporationCorporationIDMiningObserversOKBodyItems get_corporation_corporation_id_mining_observers_200_ok
//
// 200 ok object
// swagger:model getCorporationCorporationIdMiningObserversOKBodyItems
type GetCorporationCorporationIDMiningObserversOKBodyItems struct {

	// get_corporation_corporation_id_mining_observers_last_updated
	//
	// last_updated string
	// Required: true
	// Format: date
	LastUpdated *strfmt.Date `json:"last_updated"`

	// get_corporation_corporation_id_mining_observers_observer_id
	//
	// The entity that was observing the asteroid field when it was mined.
	//
	// Required: true
	ObserverID *int64 `json:"observer_id"`

	// get_corporation_corporation_id_mining_observers_observer_type
	//
	// The category of the observing entity
	// Required: true
	// Enum: [structure]
	ObserverType *string `json:"observer_type"`
}

// Validate validates this get corporation corporation Id mining observers o k body items
func (m *GetCorporationCorporationIDMiningObserversOKBodyItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObserverID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObserverType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetCorporationCorporationIDMiningObserversOKBodyItems) validateLastUpdated(formats strfmt.Registry) error {

	if err := validate.Required("last_updated", "body", m.LastUpdated); err != nil {
		return err
	}

	if err := validate.FormatOf("last_updated", "body", "date", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetCorporationCorporationIDMiningObserversOKBodyItems) validateObserverID(formats strfmt.Registry) error {

	if err := validate.Required("observer_id", "body", m.ObserverID); err != nil {
		return err
	}

	return nil
}

var getCorporationCorporationIdMiningObserversOKBodyItemsTypeObserverTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["structure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCorporationCorporationIdMiningObserversOKBodyItemsTypeObserverTypePropEnum = append(getCorporationCorporationIdMiningObserversOKBodyItemsTypeObserverTypePropEnum, v)
	}
}

const (

	// GetCorporationCorporationIDMiningObserversOKBodyItemsObserverTypeStructure captures enum value "structure"
	GetCorporationCorporationIDMiningObserversOKBodyItemsObserverTypeStructure string = "structure"
)

// prop value enum
func (m *GetCorporationCorporationIDMiningObserversOKBodyItems) validateObserverTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getCorporationCorporationIdMiningObserversOKBodyItemsTypeObserverTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetCorporationCorporationIDMiningObserversOKBodyItems) validateObserverType(formats strfmt.Registry) error {

	if err := validate.Required("observer_type", "body", m.ObserverType); err != nil {
		return err
	}

	// value enum
	if err := m.validateObserverTypeEnum("observer_type", "body", *m.ObserverType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetCorporationCorporationIDMiningObserversOKBodyItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetCorporationCorporationIDMiningObserversOKBodyItems) UnmarshalBinary(b []byte) error {
	var res GetCorporationCorporationIDMiningObserversOKBodyItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
