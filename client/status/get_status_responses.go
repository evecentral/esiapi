// Code generated by go-swagger; DO NOT EDIT.

package status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/evecentral/esiapi/models"
)

// GetStatusReader is a Reader for the GetStatus structure.
type GetStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 500:
		result := NewGetStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetStatusOK creates a GetStatusOK with default headers values
func NewGetStatusOK() *GetStatusOK {
	return &GetStatusOK{}
}

/*GetStatusOK handles this case with default header values.

Server status
*/
type GetStatusOK struct {
	/*The caching mechanism used
	 */
	CacheControl string
	/*RFC7231 formatted datetime string
	 */
	Expires string
	/*RFC7231 formatted datetime string
	 */
	LastModified string

	Payload GetStatusOKBody
}

func (o *GetStatusOK) Error() string {
	return fmt.Sprintf("[GET /status/][%d] getStatusOK  %+v", 200, o.Payload)
}

func (o *GetStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Cache-Control
	o.CacheControl = response.GetHeader("Cache-Control")

	// response header Expires
	o.Expires = response.GetHeader("Expires")

	// response header Last-Modified
	o.LastModified = response.GetHeader("Last-Modified")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStatusInternalServerError creates a GetStatusInternalServerError with default headers values
func NewGetStatusInternalServerError() *GetStatusInternalServerError {
	return &GetStatusInternalServerError{}
}

/*GetStatusInternalServerError handles this case with default header values.

Internal server error
*/
type GetStatusInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *GetStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /status/][%d] getStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *GetStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetStatusOKBody get_status_ok
//
// 200 ok object
swagger:model GetStatusOKBody
*/

type GetStatusOKBody struct {

	// get_status_players
	//
	// Current online player count
	// Required: true
	Players *int64 `json:"players"`

	// get_status_server_version
	//
	// Running version as string
	// Required: true
	ServerVersion *string `json:"server_version"`

	// get_status_start_time
	//
	// Server start timestamp
	// Required: true
	StartTime *strfmt.DateTime `json:"start_time"`

	// get_status_vip
	//
	// If the server is in VIP mode
	// Required: true
	Vip *bool `json:"vip"`
}

/* polymorph GetStatusOKBody players false */

/* polymorph GetStatusOKBody server_version false */

/* polymorph GetStatusOKBody start_time false */

/* polymorph GetStatusOKBody vip false */

// Validate validates this get status o k body
func (o *GetStatusOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePlayers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateServerVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateStartTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateVip(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetStatusOKBody) validatePlayers(formats strfmt.Registry) error {

	if err := validate.Required("getStatusOK"+"."+"players", "body", o.Players); err != nil {
		return err
	}

	return nil
}

func (o *GetStatusOKBody) validateServerVersion(formats strfmt.Registry) error {

	if err := validate.Required("getStatusOK"+"."+"server_version", "body", o.ServerVersion); err != nil {
		return err
	}

	return nil
}

func (o *GetStatusOKBody) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("getStatusOK"+"."+"start_time", "body", o.StartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("getStatusOK"+"."+"start_time", "body", "date-time", o.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetStatusOKBody) validateVip(formats strfmt.Registry) error {

	if err := validate.Required("getStatusOK"+"."+"vip", "body", o.Vip); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetStatusOKBody) UnmarshalBinary(b []byte) error {
	var res GetStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
