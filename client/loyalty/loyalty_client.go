// Code generated by go-swagger; DO NOT EDIT.

package loyalty

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new loyalty API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for loyalty API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetCharactersCharacterIDLoyaltyPoints gets loyalty points

Return a list of loyalty points for all corporations the character has worked for

---
Alternate route: `/dev/characters/{character_id}/loyalty/points/`

Alternate route: `/legacy/characters/{character_id}/loyalty/points/`

Alternate route: `/v1/characters/{character_id}/loyalty/points/`

---
This route is cached for up to 3600 seconds
*/
func (a *Client) GetCharactersCharacterIDLoyaltyPoints(params *GetCharactersCharacterIDLoyaltyPointsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDLoyaltyPointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDLoyaltyPointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_loyalty_points",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/loyalty/points/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDLoyaltyPointsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDLoyaltyPointsOK), nil

}

/*
GetLoyaltyStoresCorporationIDOffers lists loyalty store offers

Return a list of offers from a specific corporation's loyalty store

---
Alternate route: `/dev/loyalty/stores/{corporation_id}/offers/`

Alternate route: `/legacy/loyalty/stores/{corporation_id}/offers/`

Alternate route: `/v1/loyalty/stores/{corporation_id}/offers/`

---
This route expires daily at 11:05
*/
func (a *Client) GetLoyaltyStoresCorporationIDOffers(params *GetLoyaltyStoresCorporationIDOffersParams) (*GetLoyaltyStoresCorporationIDOffersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLoyaltyStoresCorporationIDOffersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_loyalty_stores_corporation_id_offers",
		Method:             "GET",
		PathPattern:        "/loyalty/stores/{corporation_id}/offers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLoyaltyStoresCorporationIDOffersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLoyaltyStoresCorporationIDOffersOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
