// Code generated by go-swagger; DO NOT EDIT.

package user_interface

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user interface API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user interface API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostUIAutopilotWaypoint sets autopilot waypoint

Set a solar system as autopilot waypoint

---
Alternate route: `/dev/ui/autopilot/waypoint/`

Alternate route: `/v2/ui/autopilot/waypoint/`

*/
func (a *Client) PostUIAutopilotWaypoint(params *PostUIAutopilotWaypointParams, authInfo runtime.ClientAuthInfoWriter) (*PostUIAutopilotWaypointNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUIAutopilotWaypointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post_ui_autopilot_waypoint",
		Method:             "POST",
		PathPattern:        "/ui/autopilot/waypoint/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUIAutopilotWaypointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUIAutopilotWaypointNoContent), nil

}

/*
PostUIOpenwindowContract opens contract window

Open the contract window inside the client

---
Alternate route: `/dev/ui/openwindow/contract/`

Alternate route: `/legacy/ui/openwindow/contract/`

Alternate route: `/v1/ui/openwindow/contract/`

*/
func (a *Client) PostUIOpenwindowContract(params *PostUIOpenwindowContractParams, authInfo runtime.ClientAuthInfoWriter) (*PostUIOpenwindowContractNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUIOpenwindowContractParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post_ui_openwindow_contract",
		Method:             "POST",
		PathPattern:        "/ui/openwindow/contract/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUIOpenwindowContractReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUIOpenwindowContractNoContent), nil

}

/*
PostUIOpenwindowInformation opens information window

Open the information window for a character, corporation or alliance inside the client

---
Alternate route: `/dev/ui/openwindow/information/`

Alternate route: `/legacy/ui/openwindow/information/`

Alternate route: `/v1/ui/openwindow/information/`

*/
func (a *Client) PostUIOpenwindowInformation(params *PostUIOpenwindowInformationParams, authInfo runtime.ClientAuthInfoWriter) (*PostUIOpenwindowInformationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUIOpenwindowInformationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post_ui_openwindow_information",
		Method:             "POST",
		PathPattern:        "/ui/openwindow/information/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUIOpenwindowInformationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUIOpenwindowInformationNoContent), nil

}

/*
PostUIOpenwindowMarketdetails opens market details

Open the market details window for a specific typeID inside the client

---
Alternate route: `/dev/ui/openwindow/marketdetails/`

Alternate route: `/legacy/ui/openwindow/marketdetails/`

Alternate route: `/v1/ui/openwindow/marketdetails/`

*/
func (a *Client) PostUIOpenwindowMarketdetails(params *PostUIOpenwindowMarketdetailsParams, authInfo runtime.ClientAuthInfoWriter) (*PostUIOpenwindowMarketdetailsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUIOpenwindowMarketdetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post_ui_openwindow_marketdetails",
		Method:             "POST",
		PathPattern:        "/ui/openwindow/marketdetails/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUIOpenwindowMarketdetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUIOpenwindowMarketdetailsNoContent), nil

}

/*
PostUIOpenwindowNewmail opens new mail window

Open the New Mail window, according to settings from the request if applicable

---
Alternate route: `/dev/ui/openwindow/newmail/`

Alternate route: `/legacy/ui/openwindow/newmail/`

Alternate route: `/v1/ui/openwindow/newmail/`

*/
func (a *Client) PostUIOpenwindowNewmail(params *PostUIOpenwindowNewmailParams, authInfo runtime.ClientAuthInfoWriter) (*PostUIOpenwindowNewmailNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUIOpenwindowNewmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post_ui_openwindow_newmail",
		Method:             "POST",
		PathPattern:        "/ui/openwindow/newmail/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUIOpenwindowNewmailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUIOpenwindowNewmailNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
