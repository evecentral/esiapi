// Code generated by go-swagger; DO NOT EDIT.

package fleets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostFleetsFleetIDWingsParams creates a new PostFleetsFleetIDWingsParams object
// with the default values initialized.
func NewPostFleetsFleetIDWingsParams() *PostFleetsFleetIDWingsParams {
	var (
		datasourceDefault = string("tranquility")
	)
	return &PostFleetsFleetIDWingsParams{
		Datasource: &datasourceDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPostFleetsFleetIDWingsParamsWithTimeout creates a new PostFleetsFleetIDWingsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostFleetsFleetIDWingsParamsWithTimeout(timeout time.Duration) *PostFleetsFleetIDWingsParams {
	var (
		datasourceDefault = string("tranquility")
	)
	return &PostFleetsFleetIDWingsParams{
		Datasource: &datasourceDefault,

		timeout: timeout,
	}
}

// NewPostFleetsFleetIDWingsParamsWithContext creates a new PostFleetsFleetIDWingsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostFleetsFleetIDWingsParamsWithContext(ctx context.Context) *PostFleetsFleetIDWingsParams {
	var (
		datasourceDefault = string("tranquility")
	)
	return &PostFleetsFleetIDWingsParams{
		Datasource: &datasourceDefault,

		Context: ctx,
	}
}

// NewPostFleetsFleetIDWingsParamsWithHTTPClient creates a new PostFleetsFleetIDWingsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostFleetsFleetIDWingsParamsWithHTTPClient(client *http.Client) *PostFleetsFleetIDWingsParams {
	var (
		datasourceDefault = string("tranquility")
	)
	return &PostFleetsFleetIDWingsParams{
		Datasource: &datasourceDefault,
		HTTPClient: client,
	}
}

/*PostFleetsFleetIDWingsParams contains all the parameters to send to the API endpoint
for the post fleets fleet id wings operation typically these are written to a http.Request
*/
type PostFleetsFleetIDWingsParams struct {

	/*Datasource
	  The server name you would like data from

	*/
	Datasource *string
	/*FleetID
	  ID for a fleet

	*/
	FleetID int64
	/*Token
	  Access token to use if unable to set a header

	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post fleets fleet id wings params
func (o *PostFleetsFleetIDWingsParams) WithTimeout(timeout time.Duration) *PostFleetsFleetIDWingsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post fleets fleet id wings params
func (o *PostFleetsFleetIDWingsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post fleets fleet id wings params
func (o *PostFleetsFleetIDWingsParams) WithContext(ctx context.Context) *PostFleetsFleetIDWingsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post fleets fleet id wings params
func (o *PostFleetsFleetIDWingsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post fleets fleet id wings params
func (o *PostFleetsFleetIDWingsParams) WithHTTPClient(client *http.Client) *PostFleetsFleetIDWingsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post fleets fleet id wings params
func (o *PostFleetsFleetIDWingsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDatasource adds the datasource to the post fleets fleet id wings params
func (o *PostFleetsFleetIDWingsParams) WithDatasource(datasource *string) *PostFleetsFleetIDWingsParams {
	o.SetDatasource(datasource)
	return o
}

// SetDatasource adds the datasource to the post fleets fleet id wings params
func (o *PostFleetsFleetIDWingsParams) SetDatasource(datasource *string) {
	o.Datasource = datasource
}

// WithFleetID adds the fleetID to the post fleets fleet id wings params
func (o *PostFleetsFleetIDWingsParams) WithFleetID(fleetID int64) *PostFleetsFleetIDWingsParams {
	o.SetFleetID(fleetID)
	return o
}

// SetFleetID adds the fleetId to the post fleets fleet id wings params
func (o *PostFleetsFleetIDWingsParams) SetFleetID(fleetID int64) {
	o.FleetID = fleetID
}

// WithToken adds the token to the post fleets fleet id wings params
func (o *PostFleetsFleetIDWingsParams) WithToken(token *string) *PostFleetsFleetIDWingsParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the post fleets fleet id wings params
func (o *PostFleetsFleetIDWingsParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *PostFleetsFleetIDWingsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Datasource != nil {

		// query param datasource
		var qrDatasource string
		if o.Datasource != nil {
			qrDatasource = *o.Datasource
		}
		qDatasource := qrDatasource
		if qDatasource != "" {
			if err := r.SetQueryParam("datasource", qDatasource); err != nil {
				return err
			}
		}

	}

	// path param fleet_id
	if err := r.SetPathParam("fleet_id", swag.FormatInt64(o.FleetID)); err != nil {
		return err
	}

	if o.Token != nil {

		// query param token
		var qrToken string
		if o.Token != nil {
			qrToken = *o.Token
		}
		qToken := qrToken
		if qToken != "" {
			if err := r.SetQueryParam("token", qToken); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
