// Code generated by go-swagger; DO NOT EDIT.

package faction_warfare

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/evecentral/esiapi/models"
)

// GetFwLeaderboardsCorporationsReader is a Reader for the GetFwLeaderboardsCorporations structure.
type GetFwLeaderboardsCorporationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFwLeaderboardsCorporationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetFwLeaderboardsCorporationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 304:
		result := NewGetFwLeaderboardsCorporationsNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 400:
		result := NewGetFwLeaderboardsCorporationsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 420:
		result := NewGetFwLeaderboardsCorporationsEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetFwLeaderboardsCorporationsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewGetFwLeaderboardsCorporationsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewGetFwLeaderboardsCorporationsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetFwLeaderboardsCorporationsOK creates a GetFwLeaderboardsCorporationsOK with default headers values
func NewGetFwLeaderboardsCorporationsOK() *GetFwLeaderboardsCorporationsOK {
	return &GetFwLeaderboardsCorporationsOK{}
}

/*GetFwLeaderboardsCorporationsOK handles this case with default header values.

Corporation leaderboard of kills and victory points within faction warfare.
*/
type GetFwLeaderboardsCorporationsOK struct {
	/*The caching mechanism used
	 */
	CacheControl string
	/*RFC7232 compliant entity tag
	 */
	ETag string
	/*RFC7231 formatted datetime string
	 */
	Expires string
	/*RFC7231 formatted datetime string
	 */
	LastModified string

	Payload *models.GetFwLeaderboardsCorporationsOKBody
}

func (o *GetFwLeaderboardsCorporationsOK) Error() string {
	return fmt.Sprintf("[GET /fw/leaderboards/corporations/][%d] getFwLeaderboardsCorporationsOK  %+v", 200, o.Payload)
}

func (o *GetFwLeaderboardsCorporationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Cache-Control
	o.CacheControl = response.GetHeader("Cache-Control")

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	// response header Expires
	o.Expires = response.GetHeader("Expires")

	// response header Last-Modified
	o.LastModified = response.GetHeader("Last-Modified")

	o.Payload = new(models.GetFwLeaderboardsCorporationsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFwLeaderboardsCorporationsNotModified creates a GetFwLeaderboardsCorporationsNotModified with default headers values
func NewGetFwLeaderboardsCorporationsNotModified() *GetFwLeaderboardsCorporationsNotModified {
	return &GetFwLeaderboardsCorporationsNotModified{}
}

/*GetFwLeaderboardsCorporationsNotModified handles this case with default header values.

Not modified
*/
type GetFwLeaderboardsCorporationsNotModified struct {
	/*The caching mechanism used
	 */
	CacheControl string
	/*RFC7232 compliant entity tag
	 */
	ETag string
	/*RFC7231 formatted datetime string
	 */
	Expires string
	/*RFC7231 formatted datetime string
	 */
	LastModified string
}

func (o *GetFwLeaderboardsCorporationsNotModified) Error() string {
	return fmt.Sprintf("[GET /fw/leaderboards/corporations/][%d] getFwLeaderboardsCorporationsNotModified ", 304)
}

func (o *GetFwLeaderboardsCorporationsNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Cache-Control
	o.CacheControl = response.GetHeader("Cache-Control")

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	// response header Expires
	o.Expires = response.GetHeader("Expires")

	// response header Last-Modified
	o.LastModified = response.GetHeader("Last-Modified")

	return nil
}

// NewGetFwLeaderboardsCorporationsBadRequest creates a GetFwLeaderboardsCorporationsBadRequest with default headers values
func NewGetFwLeaderboardsCorporationsBadRequest() *GetFwLeaderboardsCorporationsBadRequest {
	return &GetFwLeaderboardsCorporationsBadRequest{}
}

/*GetFwLeaderboardsCorporationsBadRequest handles this case with default header values.

Bad request
*/
type GetFwLeaderboardsCorporationsBadRequest struct {
	Payload *models.BadRequest
}

func (o *GetFwLeaderboardsCorporationsBadRequest) Error() string {
	return fmt.Sprintf("[GET /fw/leaderboards/corporations/][%d] getFwLeaderboardsCorporationsBadRequest  %+v", 400, o.Payload)
}

func (o *GetFwLeaderboardsCorporationsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFwLeaderboardsCorporationsEnhanceYourCalm creates a GetFwLeaderboardsCorporationsEnhanceYourCalm with default headers values
func NewGetFwLeaderboardsCorporationsEnhanceYourCalm() *GetFwLeaderboardsCorporationsEnhanceYourCalm {
	return &GetFwLeaderboardsCorporationsEnhanceYourCalm{}
}

/*GetFwLeaderboardsCorporationsEnhanceYourCalm handles this case with default header values.

Error limited
*/
type GetFwLeaderboardsCorporationsEnhanceYourCalm struct {
	Payload *models.ErrorLimited
}

func (o *GetFwLeaderboardsCorporationsEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[GET /fw/leaderboards/corporations/][%d] getFwLeaderboardsCorporationsEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *GetFwLeaderboardsCorporationsEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorLimited)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFwLeaderboardsCorporationsInternalServerError creates a GetFwLeaderboardsCorporationsInternalServerError with default headers values
func NewGetFwLeaderboardsCorporationsInternalServerError() *GetFwLeaderboardsCorporationsInternalServerError {
	return &GetFwLeaderboardsCorporationsInternalServerError{}
}

/*GetFwLeaderboardsCorporationsInternalServerError handles this case with default header values.

Internal server error
*/
type GetFwLeaderboardsCorporationsInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *GetFwLeaderboardsCorporationsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /fw/leaderboards/corporations/][%d] getFwLeaderboardsCorporationsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetFwLeaderboardsCorporationsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFwLeaderboardsCorporationsServiceUnavailable creates a GetFwLeaderboardsCorporationsServiceUnavailable with default headers values
func NewGetFwLeaderboardsCorporationsServiceUnavailable() *GetFwLeaderboardsCorporationsServiceUnavailable {
	return &GetFwLeaderboardsCorporationsServiceUnavailable{}
}

/*GetFwLeaderboardsCorporationsServiceUnavailable handles this case with default header values.

Service unavailable
*/
type GetFwLeaderboardsCorporationsServiceUnavailable struct {
	Payload *models.ServiceUnavailable
}

func (o *GetFwLeaderboardsCorporationsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /fw/leaderboards/corporations/][%d] getFwLeaderboardsCorporationsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetFwLeaderboardsCorporationsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceUnavailable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFwLeaderboardsCorporationsGatewayTimeout creates a GetFwLeaderboardsCorporationsGatewayTimeout with default headers values
func NewGetFwLeaderboardsCorporationsGatewayTimeout() *GetFwLeaderboardsCorporationsGatewayTimeout {
	return &GetFwLeaderboardsCorporationsGatewayTimeout{}
}

/*GetFwLeaderboardsCorporationsGatewayTimeout handles this case with default header values.

Gateway timeout
*/
type GetFwLeaderboardsCorporationsGatewayTimeout struct {
	Payload *models.GatewayTimeout
}

func (o *GetFwLeaderboardsCorporationsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /fw/leaderboards/corporations/][%d] getFwLeaderboardsCorporationsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetFwLeaderboardsCorporationsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayTimeout)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
