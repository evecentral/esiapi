// Code generated by go-swagger; DO NOT EDIT.

package faction_warfare

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/evecentral/esiapi/models"
)

// GetFwLeaderboardsReader is a Reader for the GetFwLeaderboards structure.
type GetFwLeaderboardsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFwLeaderboardsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetFwLeaderboardsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 500:
		result := NewGetFwLeaderboardsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetFwLeaderboardsOK creates a GetFwLeaderboardsOK with default headers values
func NewGetFwLeaderboardsOK() *GetFwLeaderboardsOK {
	return &GetFwLeaderboardsOK{}
}

/*GetFwLeaderboardsOK handles this case with default header values.

Corporation leaderboard of kills and victory points within faction warfare.
*/
type GetFwLeaderboardsOK struct {
	/*The caching mechanism used
	 */
	CacheControl string
	/*RFC7231 formatted datetime string
	 */
	Expires string
	/*RFC7231 formatted datetime string
	 */
	LastModified string

	Payload GetFwLeaderboardsOKBody
}

func (o *GetFwLeaderboardsOK) Error() string {
	return fmt.Sprintf("[GET /fw/leaderboards/][%d] getFwLeaderboardsOK  %+v", 200, o.Payload)
}

func (o *GetFwLeaderboardsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Cache-Control
	o.CacheControl = response.GetHeader("Cache-Control")

	// response header Expires
	o.Expires = response.GetHeader("Expires")

	// response header Last-Modified
	o.LastModified = response.GetHeader("Last-Modified")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFwLeaderboardsInternalServerError creates a GetFwLeaderboardsInternalServerError with default headers values
func NewGetFwLeaderboardsInternalServerError() *GetFwLeaderboardsInternalServerError {
	return &GetFwLeaderboardsInternalServerError{}
}

/*GetFwLeaderboardsInternalServerError handles this case with default header values.

Internal server error
*/
type GetFwLeaderboardsInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *GetFwLeaderboardsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /fw/leaderboards/][%d] getFwLeaderboardsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetFwLeaderboardsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetFwLeaderboardsOKBody get_fw_leaderboards_ok
//
// 200 ok object
swagger:model GetFwLeaderboardsOKBody
*/

type GetFwLeaderboardsOKBody struct {

	// kills
	// Required: true
	Kills *GetFwLeaderboardsOKBodyKills `json:"kills"`

	// victory points
	// Required: true
	VictoryPoints *GetFwLeaderboardsOKBodyVictoryPoints `json:"victory_points"`
}

/* polymorph GetFwLeaderboardsOKBody kills false */

/* polymorph GetFwLeaderboardsOKBody victory_points false */

// Validate validates this get fw leaderboards o k body
func (o *GetFwLeaderboardsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKills(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateVictoryPoints(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFwLeaderboardsOKBody) validateKills(formats strfmt.Registry) error {

	if err := validate.Required("getFwLeaderboardsOK"+"."+"kills", "body", o.Kills); err != nil {
		return err
	}

	if o.Kills != nil {

		if err := o.Kills.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFwLeaderboardsOK" + "." + "kills")
			}
			return err
		}
	}

	return nil
}

func (o *GetFwLeaderboardsOKBody) validateVictoryPoints(formats strfmt.Registry) error {

	if err := validate.Required("getFwLeaderboardsOK"+"."+"victory_points", "body", o.VictoryPoints); err != nil {
		return err
	}

	if o.VictoryPoints != nil {

		if err := o.VictoryPoints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFwLeaderboardsOK" + "." + "victory_points")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBody) UnmarshalBinary(b []byte) error {
	var res GetFwLeaderboardsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFwLeaderboardsOKBodyKills get_fw_leaderboards_kills
//
// Top 4 rankings of factions by number of kills from yesterday, last week and in total.
swagger:model GetFwLeaderboardsOKBodyKills
*/

type GetFwLeaderboardsOKBodyKills struct {

	// get_fw_leaderboards_active_total
	//
	// Top 4 ranking of factions active in faction warfare by total kills. A faction is considered "active" if they have participated in faction warfare in the past 14 days.
	// Required: true
	// Max Items: 4
	ActiveTotal []*GetFwLeaderboardsOKBodyKillsActiveTotalItems0 `json:"active_total"`

	// get_fw_leaderboards_last_week
	//
	// Top 4 ranking of factions by kills in the past week
	// Required: true
	// Max Items: 4
	LastWeek []*GetFwLeaderboardsOKBodyKillsLastWeekItems0 `json:"last_week"`

	// get_fw_leaderboards_yesterday
	//
	// Top 4 ranking of factions by kills in the past day
	// Required: true
	// Max Items: 4
	Yesterday []*GetFwLeaderboardsOKBodyKillsYesterdayItems0 `json:"yesterday"`
}

/* polymorph GetFwLeaderboardsOKBodyKills active_total false */

/* polymorph GetFwLeaderboardsOKBodyKills last_week false */

/* polymorph GetFwLeaderboardsOKBodyKills yesterday false */

// Validate validates this get fw leaderboards o k body kills
func (o *GetFwLeaderboardsOKBodyKills) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActiveTotal(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateLastWeek(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateYesterday(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFwLeaderboardsOKBodyKills) validateActiveTotal(formats strfmt.Registry) error {

	if err := validate.Required("getFwLeaderboardsOK"+"."+"kills"+"."+"active_total", "body", o.ActiveTotal); err != nil {
		return err
	}

	iActiveTotalSize := int64(len(o.ActiveTotal))

	if err := validate.MaxItems("getFwLeaderboardsOK"+"."+"kills"+"."+"active_total", "body", iActiveTotalSize, 4); err != nil {
		return err
	}

	for i := 0; i < len(o.ActiveTotal); i++ {

		if swag.IsZero(o.ActiveTotal[i]) { // not required
			continue
		}

		if o.ActiveTotal[i] != nil {

			if err := o.ActiveTotal[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFwLeaderboardsOK" + "." + "kills" + "." + "active_total" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetFwLeaderboardsOKBodyKills) validateLastWeek(formats strfmt.Registry) error {

	if err := validate.Required("getFwLeaderboardsOK"+"."+"kills"+"."+"last_week", "body", o.LastWeek); err != nil {
		return err
	}

	iLastWeekSize := int64(len(o.LastWeek))

	if err := validate.MaxItems("getFwLeaderboardsOK"+"."+"kills"+"."+"last_week", "body", iLastWeekSize, 4); err != nil {
		return err
	}

	for i := 0; i < len(o.LastWeek); i++ {

		if swag.IsZero(o.LastWeek[i]) { // not required
			continue
		}

		if o.LastWeek[i] != nil {

			if err := o.LastWeek[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFwLeaderboardsOK" + "." + "kills" + "." + "last_week" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetFwLeaderboardsOKBodyKills) validateYesterday(formats strfmt.Registry) error {

	if err := validate.Required("getFwLeaderboardsOK"+"."+"kills"+"."+"yesterday", "body", o.Yesterday); err != nil {
		return err
	}

	iYesterdaySize := int64(len(o.Yesterday))

	if err := validate.MaxItems("getFwLeaderboardsOK"+"."+"kills"+"."+"yesterday", "body", iYesterdaySize, 4); err != nil {
		return err
	}

	for i := 0; i < len(o.Yesterday); i++ {

		if swag.IsZero(o.Yesterday[i]) { // not required
			continue
		}

		if o.Yesterday[i] != nil {

			if err := o.Yesterday[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFwLeaderboardsOK" + "." + "kills" + "." + "yesterday" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyKills) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyKills) UnmarshalBinary(b []byte) error {
	var res GetFwLeaderboardsOKBodyKills
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFwLeaderboardsOKBodyKillsActiveTotalItems0 get_fw_leaderboards_active_total
//
// active_total object
swagger:model GetFwLeaderboardsOKBodyKillsActiveTotalItems0
*/

type GetFwLeaderboardsOKBodyKillsActiveTotalItems0 struct {

	// get_fw_leaderboards_amount
	//
	// Amount of kills
	Amount int32 `json:"amount,omitempty"`

	// get_fw_leaderboards_faction_id
	//
	// faction_id integer
	FactionID int32 `json:"faction_id,omitempty"`
}

/* polymorph GetFwLeaderboardsOKBodyKillsActiveTotalItems0 amount false */

/* polymorph GetFwLeaderboardsOKBodyKillsActiveTotalItems0 faction_id false */

// Validate validates this get fw leaderboards o k body kills active total items0
func (o *GetFwLeaderboardsOKBodyKillsActiveTotalItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyKillsActiveTotalItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyKillsActiveTotalItems0) UnmarshalBinary(b []byte) error {
	var res GetFwLeaderboardsOKBodyKillsActiveTotalItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFwLeaderboardsOKBodyKillsLastWeekItems0 get_fw_leaderboards_last_week
//
// last_week object
swagger:model GetFwLeaderboardsOKBodyKillsLastWeekItems0
*/

type GetFwLeaderboardsOKBodyKillsLastWeekItems0 struct {

	// get_fw_leaderboards_amount
	//
	// Amount of kills
	Amount int32 `json:"amount,omitempty"`

	// get_fw_leaderboards_faction_id
	//
	// faction_id integer
	FactionID int32 `json:"faction_id,omitempty"`
}

/* polymorph GetFwLeaderboardsOKBodyKillsLastWeekItems0 amount false */

/* polymorph GetFwLeaderboardsOKBodyKillsLastWeekItems0 faction_id false */

// Validate validates this get fw leaderboards o k body kills last week items0
func (o *GetFwLeaderboardsOKBodyKillsLastWeekItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyKillsLastWeekItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyKillsLastWeekItems0) UnmarshalBinary(b []byte) error {
	var res GetFwLeaderboardsOKBodyKillsLastWeekItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFwLeaderboardsOKBodyKillsYesterdayItems0 get_fw_leaderboards_yesterday
//
// yesterday object
swagger:model GetFwLeaderboardsOKBodyKillsYesterdayItems0
*/

type GetFwLeaderboardsOKBodyKillsYesterdayItems0 struct {

	// get_fw_leaderboards_amount
	//
	// Amount of kills
	Amount int32 `json:"amount,omitempty"`

	// get_fw_leaderboards_faction_id
	//
	// faction_id integer
	FactionID int32 `json:"faction_id,omitempty"`
}

/* polymorph GetFwLeaderboardsOKBodyKillsYesterdayItems0 amount false */

/* polymorph GetFwLeaderboardsOKBodyKillsYesterdayItems0 faction_id false */

// Validate validates this get fw leaderboards o k body kills yesterday items0
func (o *GetFwLeaderboardsOKBodyKillsYesterdayItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyKillsYesterdayItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyKillsYesterdayItems0) UnmarshalBinary(b []byte) error {
	var res GetFwLeaderboardsOKBodyKillsYesterdayItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFwLeaderboardsOKBodyVictoryPoints get_fw_leaderboards_victory_points
//
// Top 4 rankings of factions by victory points from yesterday, last week and in total
swagger:model GetFwLeaderboardsOKBodyVictoryPoints
*/

type GetFwLeaderboardsOKBodyVictoryPoints struct {

	// get_fw_leaderboards_active_total
	//
	// Top 4 ranking of factions active in faction warfare by total victory points. A faction is considered "active" if they have participated in faction warfare in the past 14 days.
	// Required: true
	// Max Items: 4
	ActiveTotal []*GetFwLeaderboardsOKBodyVictoryPointsActiveTotalItems0 `json:"active_total"`

	// get_fw_leaderboards_last_week
	//
	// Top 4 ranking of factions by victory points in the past week
	// Required: true
	// Max Items: 4
	LastWeek []*GetFwLeaderboardsOKBodyVictoryPointsLastWeekItems0 `json:"last_week"`

	// get_fw_leaderboards_yesterday
	//
	// Top 4 ranking of factions by victory points in the past day
	// Required: true
	// Max Items: 4
	Yesterday []*GetFwLeaderboardsOKBodyVictoryPointsYesterdayItems0 `json:"yesterday"`
}

/* polymorph GetFwLeaderboardsOKBodyVictoryPoints active_total false */

/* polymorph GetFwLeaderboardsOKBodyVictoryPoints last_week false */

/* polymorph GetFwLeaderboardsOKBodyVictoryPoints yesterday false */

// Validate validates this get fw leaderboards o k body victory points
func (o *GetFwLeaderboardsOKBodyVictoryPoints) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActiveTotal(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateLastWeek(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateYesterday(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFwLeaderboardsOKBodyVictoryPoints) validateActiveTotal(formats strfmt.Registry) error {

	if err := validate.Required("getFwLeaderboardsOK"+"."+"victory_points"+"."+"active_total", "body", o.ActiveTotal); err != nil {
		return err
	}

	iActiveTotalSize := int64(len(o.ActiveTotal))

	if err := validate.MaxItems("getFwLeaderboardsOK"+"."+"victory_points"+"."+"active_total", "body", iActiveTotalSize, 4); err != nil {
		return err
	}

	for i := 0; i < len(o.ActiveTotal); i++ {

		if swag.IsZero(o.ActiveTotal[i]) { // not required
			continue
		}

		if o.ActiveTotal[i] != nil {

			if err := o.ActiveTotal[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFwLeaderboardsOK" + "." + "victory_points" + "." + "active_total" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetFwLeaderboardsOKBodyVictoryPoints) validateLastWeek(formats strfmt.Registry) error {

	if err := validate.Required("getFwLeaderboardsOK"+"."+"victory_points"+"."+"last_week", "body", o.LastWeek); err != nil {
		return err
	}

	iLastWeekSize := int64(len(o.LastWeek))

	if err := validate.MaxItems("getFwLeaderboardsOK"+"."+"victory_points"+"."+"last_week", "body", iLastWeekSize, 4); err != nil {
		return err
	}

	for i := 0; i < len(o.LastWeek); i++ {

		if swag.IsZero(o.LastWeek[i]) { // not required
			continue
		}

		if o.LastWeek[i] != nil {

			if err := o.LastWeek[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFwLeaderboardsOK" + "." + "victory_points" + "." + "last_week" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetFwLeaderboardsOKBodyVictoryPoints) validateYesterday(formats strfmt.Registry) error {

	if err := validate.Required("getFwLeaderboardsOK"+"."+"victory_points"+"."+"yesterday", "body", o.Yesterday); err != nil {
		return err
	}

	iYesterdaySize := int64(len(o.Yesterday))

	if err := validate.MaxItems("getFwLeaderboardsOK"+"."+"victory_points"+"."+"yesterday", "body", iYesterdaySize, 4); err != nil {
		return err
	}

	for i := 0; i < len(o.Yesterday); i++ {

		if swag.IsZero(o.Yesterday[i]) { // not required
			continue
		}

		if o.Yesterday[i] != nil {

			if err := o.Yesterday[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFwLeaderboardsOK" + "." + "victory_points" + "." + "yesterday" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyVictoryPoints) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyVictoryPoints) UnmarshalBinary(b []byte) error {
	var res GetFwLeaderboardsOKBodyVictoryPoints
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFwLeaderboardsOKBodyVictoryPointsActiveTotalItems0 get_fw_leaderboards_active_total
//
// active_total object
swagger:model GetFwLeaderboardsOKBodyVictoryPointsActiveTotalItems0
*/

type GetFwLeaderboardsOKBodyVictoryPointsActiveTotalItems0 struct {

	// get_fw_leaderboards_amount
	//
	// Amount of victory points
	Amount int32 `json:"amount,omitempty"`

	// get_fw_leaderboards_faction_id
	//
	// faction_id integer
	FactionID int32 `json:"faction_id,omitempty"`
}

/* polymorph GetFwLeaderboardsOKBodyVictoryPointsActiveTotalItems0 amount false */

/* polymorph GetFwLeaderboardsOKBodyVictoryPointsActiveTotalItems0 faction_id false */

// Validate validates this get fw leaderboards o k body victory points active total items0
func (o *GetFwLeaderboardsOKBodyVictoryPointsActiveTotalItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyVictoryPointsActiveTotalItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyVictoryPointsActiveTotalItems0) UnmarshalBinary(b []byte) error {
	var res GetFwLeaderboardsOKBodyVictoryPointsActiveTotalItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFwLeaderboardsOKBodyVictoryPointsLastWeekItems0 get_fw_leaderboards_last_week
//
// last_week object
swagger:model GetFwLeaderboardsOKBodyVictoryPointsLastWeekItems0
*/

type GetFwLeaderboardsOKBodyVictoryPointsLastWeekItems0 struct {

	// get_fw_leaderboards_amount
	//
	// Amount of victory points
	Amount int32 `json:"amount,omitempty"`

	// get_fw_leaderboards_faction_id
	//
	// faction_id integer
	FactionID int32 `json:"faction_id,omitempty"`
}

/* polymorph GetFwLeaderboardsOKBodyVictoryPointsLastWeekItems0 amount false */

/* polymorph GetFwLeaderboardsOKBodyVictoryPointsLastWeekItems0 faction_id false */

// Validate validates this get fw leaderboards o k body victory points last week items0
func (o *GetFwLeaderboardsOKBodyVictoryPointsLastWeekItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyVictoryPointsLastWeekItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyVictoryPointsLastWeekItems0) UnmarshalBinary(b []byte) error {
	var res GetFwLeaderboardsOKBodyVictoryPointsLastWeekItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFwLeaderboardsOKBodyVictoryPointsYesterdayItems0 get_fw_leaderboards_yesterday
//
// yesterday object
swagger:model GetFwLeaderboardsOKBodyVictoryPointsYesterdayItems0
*/

type GetFwLeaderboardsOKBodyVictoryPointsYesterdayItems0 struct {

	// get_fw_leaderboards_amount
	//
	// Amount of victory points
	Amount int32 `json:"amount,omitempty"`

	// get_fw_leaderboards_faction_id
	//
	// faction_id integer
	FactionID int32 `json:"faction_id,omitempty"`
}

/* polymorph GetFwLeaderboardsOKBodyVictoryPointsYesterdayItems0 amount false */

/* polymorph GetFwLeaderboardsOKBodyVictoryPointsYesterdayItems0 faction_id false */

// Validate validates this get fw leaderboards o k body victory points yesterday items0
func (o *GetFwLeaderboardsOKBodyVictoryPointsYesterdayItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyVictoryPointsYesterdayItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFwLeaderboardsOKBodyVictoryPointsYesterdayItems0) UnmarshalBinary(b []byte) error {
	var res GetFwLeaderboardsOKBodyVictoryPointsYesterdayItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
