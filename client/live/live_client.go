package live

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new live API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for live API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteCharactersCharacterIDMailMailID deletes a mail

Delete a mail

---

Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/`

Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`

Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/`

*/
func (a *Client) DeleteCharactersCharacterIDMailMailID(params *DeleteCharactersCharacterIDMailMailIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCharactersCharacterIDMailMailIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCharactersCharacterIDMailMailIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete_characters_character_id_mail_mail_id",
		Method:             "DELETE",
		PathPattern:        "/characters/{character_id}/mail/{mail_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCharactersCharacterIDMailMailIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCharactersCharacterIDMailMailIDNoContent), nil

}

/*
GetAlliances lists all alliances

List all active player alliances

---

Alternate route: `/v1/alliances/`

Alternate route: `/legacy/alliances/`

Alternate route: `/dev/alliances/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetAlliances(params *GetAlliancesParams) (*GetAlliancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlliancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_alliances",
		Method:             "GET",
		PathPattern:        "/alliances/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlliancesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlliancesOK), nil

}

/*
GetAlliancesAllianceID gets alliance information

Public information about an alliance

---

Alternate route: `/v2/alliances/{alliance_id}/`

Alternate route: `/dev/alliances/{alliance_id}/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetAlliancesAllianceID(params *GetAlliancesAllianceIDParams) (*GetAlliancesAllianceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlliancesAllianceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_alliances_alliance_id",
		Method:             "GET",
		PathPattern:        "/alliances/{alliance_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlliancesAllianceIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlliancesAllianceIDOK), nil

}

/*
GetAlliancesAllianceIDCorporations lists alliance s corporations

List all current member corporations of an alliance

---

Alternate route: `/v1/alliances/{alliance_id}/corporations/`

Alternate route: `/legacy/alliances/{alliance_id}/corporations/`

Alternate route: `/dev/alliances/{alliance_id}/corporations/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetAlliancesAllianceIDCorporations(params *GetAlliancesAllianceIDCorporationsParams) (*GetAlliancesAllianceIDCorporationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlliancesAllianceIDCorporationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_alliances_alliance_id_corporations",
		Method:             "GET",
		PathPattern:        "/alliances/{alliance_id}/corporations/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlliancesAllianceIDCorporationsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlliancesAllianceIDCorporationsOK), nil

}

/*
GetAlliancesAllianceIDIcons gets alliance icon

Get the icon urls for a alliance

---

Alternate route: `/v1/alliances/{alliance_id}/icons/`

Alternate route: `/legacy/alliances/{alliance_id}/icons/`

Alternate route: `/dev/alliances/{alliance_id}/icons/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetAlliancesAllianceIDIcons(params *GetAlliancesAllianceIDIconsParams) (*GetAlliancesAllianceIDIconsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlliancesAllianceIDIconsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_alliances_alliance_id_icons",
		Method:             "GET",
		PathPattern:        "/alliances/{alliance_id}/icons/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlliancesAllianceIDIconsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlliancesAllianceIDIconsOK), nil

}

/*
GetAlliancesNames gets alliance names

Resolve a set of alliance IDs to alliance names

---

Alternate route: `/v1/alliances/names/`

Alternate route: `/legacy/alliances/names/`

Alternate route: `/dev/alliances/names/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetAlliancesNames(params *GetAlliancesNamesParams) (*GetAlliancesNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlliancesNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_alliances_names",
		Method:             "GET",
		PathPattern:        "/alliances/names/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlliancesNamesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlliancesNamesOK), nil

}

/*
GetCharactersCharacterID gets character s public information

Public information about a character

---

Alternate route: `/v3/characters/{character_id}/`

Alternate route: `/legacy/characters/{character_id}/`

Alternate route: `/dev/characters/{character_id}/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetCharactersCharacterID(params *GetCharactersCharacterIDParams) (*GetCharactersCharacterIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDOK), nil

}

/*
GetCharactersCharacterIDBookmarks lists bookmarks

List your character's personal bookmarks

---

Alternate route: `/v1/characters/{character_id}/bookmarks/`

Alternate route: `/legacy/characters/{character_id}/bookmarks/`

Alternate route: `/dev/characters/{character_id}/bookmarks/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetCharactersCharacterIDBookmarks(params *GetCharactersCharacterIDBookmarksParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDBookmarksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDBookmarksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_bookmarks",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/bookmarks/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDBookmarksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDBookmarksOK), nil

}

/*
GetCharactersCharacterIDBookmarksFolders lists bookmark folders

List your character's personal bookmark folders

---

Alternate route: `/v1/characters/{character_id}/bookmarks/folders/`

Alternate route: `/legacy/characters/{character_id}/bookmarks/folders/`

Alternate route: `/dev/characters/{character_id}/bookmarks/folders/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetCharactersCharacterIDBookmarksFolders(params *GetCharactersCharacterIDBookmarksFoldersParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDBookmarksFoldersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDBookmarksFoldersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_bookmarks_folders",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/bookmarks/folders/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDBookmarksFoldersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDBookmarksFoldersOK), nil

}

/*
GetCharactersCharacterIDCalendar lists calendar event summaries

Get 50 event summaries from the calendar. If no event ID is given,
the resource will return the next 50 chronological event summaries
from now. If an event ID is specified, it will return the next 50
chronological event summaries from after that event.


---

Alternate route: `/v1/characters/{character_id}/calendar/`

Alternate route: `/legacy/characters/{character_id}/calendar/`

Alternate route: `/dev/characters/{character_id}/calendar/`


---

This route is cached for up to 5 seconds
*/
func (a *Client) GetCharactersCharacterIDCalendar(params *GetCharactersCharacterIDCalendarParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDCalendarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDCalendarParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_calendar",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/calendar/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDCalendarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDCalendarOK), nil

}

/*
GetCharactersCharacterIDCalendarEventID gets an event

Get all the information for a specific event

---

Alternate route: `/v3/characters/{character_id}/calendar/{event_id}/`

Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/`


---

This route is cached for up to 5 seconds
*/
func (a *Client) GetCharactersCharacterIDCalendarEventID(params *GetCharactersCharacterIDCalendarEventIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDCalendarEventIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDCalendarEventIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_calendar_event_id",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/calendar/{event_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDCalendarEventIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDCalendarEventIDOK), nil

}

/*
GetCharactersCharacterIDClones gets clones

A list of the character's clones

---

Alternate route: `/v2/characters/{character_id}/clones/`

Alternate route: `/dev/characters/{character_id}/clones/`


---

This route is cached for up to 120 seconds
*/
func (a *Client) GetCharactersCharacterIDClones(params *GetCharactersCharacterIDClonesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDClonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDClonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_clones",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/clones/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDClonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDClonesOK), nil

}

/*
GetCharactersCharacterIDCorporationhistory gets corporation history

Get a list of all the corporations a character has been a member of

---

Alternate route: `/v1/characters/{character_id}/corporationhistory/`

Alternate route: `/legacy/characters/{character_id}/corporationhistory/`

Alternate route: `/dev/characters/{character_id}/corporationhistory/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetCharactersCharacterIDCorporationhistory(params *GetCharactersCharacterIDCorporationhistoryParams) (*GetCharactersCharacterIDCorporationhistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDCorporationhistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_corporationhistory",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/corporationhistory/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDCorporationhistoryReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDCorporationhistoryOK), nil

}

/*
GetCharactersCharacterIDKillmailsRecent lists kills and losses

Return a list of character's recent kills and losses

---

Alternate route: `/v1/characters/{character_id}/killmails/recent/`

Alternate route: `/legacy/characters/{character_id}/killmails/recent/`

Alternate route: `/dev/characters/{character_id}/killmails/recent/`


---

This route is cached for up to 120 seconds
*/
func (a *Client) GetCharactersCharacterIDKillmailsRecent(params *GetCharactersCharacterIDKillmailsRecentParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDKillmailsRecentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDKillmailsRecentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_killmails_recent",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/killmails/recent/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDKillmailsRecentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDKillmailsRecentOK), nil

}

/*
GetCharactersCharacterIDLocation gets character location

Information about the characters current location. Returns the current solar system id, and also the current station or structure ID if applicable.

---

Alternate route: `/v1/characters/{character_id}/location/`

Alternate route: `/legacy/characters/{character_id}/location/`

Alternate route: `/dev/characters/{character_id}/location/`


---

This route is cached for up to 5 seconds
*/
func (a *Client) GetCharactersCharacterIDLocation(params *GetCharactersCharacterIDLocationParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDLocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_location",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/location/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDLocationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDLocationOK), nil

}

/*
GetCharactersCharacterIDMail returns mail headers

Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards.

---

Alternate route: `/v1/characters/{character_id}/mail/`

Alternate route: `/legacy/characters/{character_id}/mail/`

Alternate route: `/dev/characters/{character_id}/mail/`


---

This route is cached for up to 30 seconds
*/
func (a *Client) GetCharactersCharacterIDMail(params *GetCharactersCharacterIDMailParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDMailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDMailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_mail",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/mail/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDMailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDMailOK), nil

}

/*
GetCharactersCharacterIDMailLabels gets mail labels and unread counts

Return a list of the users mail labels, unread counts for each label and a total unread count.

---

Alternate route: `/v3/characters/{character_id}/mail/labels/`

Alternate route: `/dev/characters/{character_id}/mail/labels/`


---

This route is cached for up to 30 seconds
*/
func (a *Client) GetCharactersCharacterIDMailLabels(params *GetCharactersCharacterIDMailLabelsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDMailLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDMailLabelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_mail_labels",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/mail/labels/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDMailLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDMailLabelsOK), nil

}

/*
GetCharactersCharacterIDMailLists returns mailing list subscriptions

Return all mailing lists that the character is subscribed to


---

Alternate route: `/v1/characters/{character_id}/mail/lists/`

Alternate route: `/legacy/characters/{character_id}/mail/lists/`

Alternate route: `/dev/characters/{character_id}/mail/lists/`


---

This route is cached for up to 120 seconds
*/
func (a *Client) GetCharactersCharacterIDMailLists(params *GetCharactersCharacterIDMailListsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDMailListsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDMailListsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_mail_lists",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/mail/lists/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDMailListsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDMailListsOK), nil

}

/*
GetCharactersCharacterIDMailMailID returns a mail

Return the contents of an EVE mail

---

Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/`

Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`

Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/`


---

This route is cached for up to 30 seconds
*/
func (a *Client) GetCharactersCharacterIDMailMailID(params *GetCharactersCharacterIDMailMailIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDMailMailIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDMailMailIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_mail_mail_id",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/mail/{mail_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDMailMailIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDMailMailIDOK), nil

}

/*
GetCharactersCharacterIDPortrait gets character portraits

Get portrait urls for a character

---

Alternate route: `/v2/characters/{character_id}/portrait/`

Alternate route: `/dev/characters/{character_id}/portrait/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetCharactersCharacterIDPortrait(params *GetCharactersCharacterIDPortraitParams) (*GetCharactersCharacterIDPortraitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDPortraitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_portrait",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/portrait/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDPortraitReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDPortraitOK), nil

}

/*
GetCharactersCharacterIDSearch searches on a string

Search for entities that match a given sub-string.

---

Alternate route: `/v2/characters/{character_id}/search/`

Alternate route: `/dev/characters/{character_id}/search/`

*/
func (a *Client) GetCharactersCharacterIDSearch(params *GetCharactersCharacterIDSearchParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_search",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/search/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDSearchOK), nil

}

/*
GetCharactersCharacterIDShip gets current ship

Get the current ship type, name and id

---

Alternate route: `/v1/characters/{character_id}/ship/`

Alternate route: `/legacy/characters/{character_id}/ship/`

Alternate route: `/dev/characters/{character_id}/ship/`


---

This route is cached for up to 5 seconds
*/
func (a *Client) GetCharactersCharacterIDShip(params *GetCharactersCharacterIDShipParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDShipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDShipParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_ship",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/ship/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDShipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDShipOK), nil

}

/*
GetCharactersCharacterIDSkillqueue gets character s skill queue

List the configured skill queue for the given character

---

Alternate route: `/v2/characters/{character_id}/skillqueue/`

Alternate route: `/legacy/characters/{character_id}/skillqueue/`

Alternate route: `/dev/characters/{character_id}/skillqueue/`


---

This route is cached for up to 120 seconds
*/
func (a *Client) GetCharactersCharacterIDSkillqueue(params *GetCharactersCharacterIDSkillqueueParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDSkillqueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDSkillqueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_skillqueue",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/skillqueue/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDSkillqueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDSkillqueueOK), nil

}

/*
GetCharactersCharacterIDSkills gets character skills

List all trained skills for the given character

---

Alternate route: `/v3/characters/{character_id}/skills/`

Alternate route: `/dev/characters/{character_id}/skills/`


---

This route is cached for up to 120 seconds
*/
func (a *Client) GetCharactersCharacterIDSkills(params *GetCharactersCharacterIDSkillsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDSkillsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDSkillsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_skills",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/skills/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDSkillsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDSkillsOK), nil

}

/*
GetCharactersCharacterIDWallets lists wallets and balances

List your wallets and their balances. Characters typically have only one wallet, with wallet_id 1000 being the master wallet.

---

Alternate route: `/v1/characters/{character_id}/wallets/`

Alternate route: `/legacy/characters/{character_id}/wallets/`

Alternate route: `/dev/characters/{character_id}/wallets/`


---

This route is cached for up to 120 seconds
*/
func (a *Client) GetCharactersCharacterIDWallets(params *GetCharactersCharacterIDWalletsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDWalletsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDWalletsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_wallets",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/wallets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDWalletsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDWalletsOK), nil

}

/*
GetCharactersNames gets character names

Resolve a set of character IDs to character names

---

Alternate route: `/v1/characters/names/`

Alternate route: `/legacy/characters/names/`

Alternate route: `/dev/characters/names/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetCharactersNames(params *GetCharactersNamesParams) (*GetCharactersNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_names",
		Method:             "GET",
		PathPattern:        "/characters/names/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersNamesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersNamesOK), nil

}

/*
GetCorporationsCorporationID gets corporation information

Public information about a corporation

---

Alternate route: `/v2/corporations/{corporation_id}/`

Alternate route: `/dev/corporations/{corporation_id}/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsCorporationID(params *GetCorporationsCorporationIDParams) (*GetCorporationsCorporationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDOK), nil

}

/*
GetCorporationsCorporationIDAlliancehistory gets alliance history

Get a list of all the alliances a corporation has been a member of

---

Alternate route: `/v1/corporations/{corporation_id}/alliancehistory/`

Alternate route: `/legacy/corporations/{corporation_id}/alliancehistory/`

Alternate route: `/dev/corporations/{corporation_id}/alliancehistory/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsCorporationIDAlliancehistory(params *GetCorporationsCorporationIDAlliancehistoryParams) (*GetCorporationsCorporationIDAlliancehistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDAlliancehistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_alliancehistory",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/alliancehistory/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDAlliancehistoryReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDAlliancehistoryOK), nil

}

/*
GetCorporationsCorporationIDIcons gets corporation icon

Get the icon urls for a corporation

---

Alternate route: `/v1/corporations/{corporation_id}/icons/`

Alternate route: `/legacy/corporations/{corporation_id}/icons/`

Alternate route: `/dev/corporations/{corporation_id}/icons/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsCorporationIDIcons(params *GetCorporationsCorporationIDIconsParams) (*GetCorporationsCorporationIDIconsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDIconsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_icons",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/icons/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDIconsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDIconsOK), nil

}

/*
GetCorporationsCorporationIDMembers gets corporation members

Read the current list of members if the calling character is a member.

---

Alternate route: `/v2/corporations/{corporation_id}/members/`

Alternate route: `/legacy/corporations/{corporation_id}/members/`

Alternate route: `/dev/corporations/{corporation_id}/members/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsCorporationIDMembers(params *GetCorporationsCorporationIDMembersParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_members",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/members/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDMembersOK), nil

}

/*
GetCorporationsCorporationIDRoles gets corporation members

Return the roles of all members if the character has the personnel manager role or any grantable role.

---

Alternate route: `/v1/corporations/{corporation_id}/roles/`

Alternate route: `/legacy/corporations/{corporation_id}/roles/`

Alternate route: `/dev/corporations/{corporation_id}/roles/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsCorporationIDRoles(params *GetCorporationsCorporationIDRolesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_roles",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/roles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDRolesOK), nil

}

/*
GetCorporationsNames gets corporation names

Resolve a set of corporation IDs to corporation names

---

Alternate route: `/v1/corporations/names/`

Alternate route: `/legacy/corporations/names/`

Alternate route: `/dev/corporations/names/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsNames(params *GetCorporationsNamesParams) (*GetCorporationsNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_names",
		Method:             "GET",
		PathPattern:        "/corporations/names/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsNamesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsNamesOK), nil

}

/*
GetIncursions lists incursions

Return a list of current incursions

---

Alternate route: `/v1/incursions/`

Alternate route: `/legacy/incursions/`

Alternate route: `/dev/incursions/`


---

This route is cached for up to 300 seconds
*/
func (a *Client) GetIncursions(params *GetIncursionsParams) (*GetIncursionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIncursionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_incursions",
		Method:             "GET",
		PathPattern:        "/incursions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIncursionsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIncursionsOK), nil

}

/*
GetKillmailsKillmailIDKillmailHash gets a single killmail

Return a single killmail from its ID and hash

---

Alternate route: `/v1/killmails/{killmail_id}/{killmail_hash}/`

Alternate route: `/legacy/killmails/{killmail_id}/{killmail_hash}/`

Alternate route: `/dev/killmails/{killmail_id}/{killmail_hash}/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetKillmailsKillmailIDKillmailHash(params *GetKillmailsKillmailIDKillmailHashParams) (*GetKillmailsKillmailIDKillmailHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKillmailsKillmailIDKillmailHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_killmails_killmail_id_killmail_hash",
		Method:             "GET",
		PathPattern:        "/killmails/{killmail_id}/{killmail_hash}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKillmailsKillmailIDKillmailHashReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKillmailsKillmailIDKillmailHashOK), nil

}

/*
GetMarketsPrices lists market prices

Return a list of prices

---

Alternate route: `/v1/markets/prices/`

Alternate route: `/legacy/markets/prices/`

Alternate route: `/dev/markets/prices/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetMarketsPrices(params *GetMarketsPricesParams) (*GetMarketsPricesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMarketsPricesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_markets_prices",
		Method:             "GET",
		PathPattern:        "/markets/prices/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMarketsPricesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMarketsPricesOK), nil

}

/*
GetMarketsRegionIDHistory lists historical market statistics in a region

Return a list of historical market statistics for the specified type in a region

---

Alternate route: `/v1/markets/{region_id}/history/`

Alternate route: `/legacy/markets/{region_id}/history/`

Alternate route: `/dev/markets/{region_id}/history/`


---

This route is cached for up to 300 seconds
*/
func (a *Client) GetMarketsRegionIDHistory(params *GetMarketsRegionIDHistoryParams) (*GetMarketsRegionIDHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMarketsRegionIDHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_markets_region_id_history",
		Method:             "GET",
		PathPattern:        "/markets/{region_id}/history/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMarketsRegionIDHistoryReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMarketsRegionIDHistoryOK), nil

}

/*
GetMarketsRegionIDOrders lists orders in a region

Return a list of orders in a region

---

Alternate route: `/v1/markets/{region_id}/orders/`

Alternate route: `/legacy/markets/{region_id}/orders/`

Alternate route: `/dev/markets/{region_id}/orders/`


---

This route is cached for up to 300 seconds
*/
func (a *Client) GetMarketsRegionIDOrders(params *GetMarketsRegionIDOrdersParams) (*GetMarketsRegionIDOrdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMarketsRegionIDOrdersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_markets_region_id_orders",
		Method:             "GET",
		PathPattern:        "/markets/{region_id}/orders/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMarketsRegionIDOrdersReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMarketsRegionIDOrdersOK), nil

}

/*
GetSearch searches on a string

Search for entities that match a given sub-string.

---

Alternate route: `/v1/search/`

Alternate route: `/legacy/search/`

Alternate route: `/dev/search/`

*/
func (a *Client) GetSearch(params *GetSearchParams) (*GetSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_search",
		Method:             "GET",
		PathPattern:        "/search/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSearchReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSearchOK), nil

}

/*
GetSovereigntyCampaigns lists sovereignty campaigns

Shows sovereignty data for campaigns.

---

Alternate route: `/v1/sovereignty/campaigns/`

Alternate route: `/legacy/sovereignty/campaigns/`

Alternate route: `/dev/sovereignty/campaigns/`


---

This route is cached for up to 5 seconds
*/
func (a *Client) GetSovereigntyCampaigns(params *GetSovereigntyCampaignsParams) (*GetSovereigntyCampaignsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSovereigntyCampaignsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_sovereignty_campaigns",
		Method:             "GET",
		PathPattern:        "/sovereignty/campaigns/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSovereigntyCampaignsReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSovereigntyCampaignsOK), nil

}

/*
GetSovereigntyStructures lists sovereignty structures

Shows sovereignty data for structures.

---

Alternate route: `/v1/sovereignty/structures/`

Alternate route: `/legacy/sovereignty/structures/`

Alternate route: `/dev/sovereignty/structures/`


---

This route is cached for up to 120 seconds
*/
func (a *Client) GetSovereigntyStructures(params *GetSovereigntyStructuresParams) (*GetSovereigntyStructuresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSovereigntyStructuresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_sovereignty_structures",
		Method:             "GET",
		PathPattern:        "/sovereignty/structures/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSovereigntyStructuresReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSovereigntyStructuresOK), nil

}

/*
GetUniverseStationsStationID gets station information

Public information on stations

---

Alternate route: `/v1/universe/stations/{station_id}/`

Alternate route: `/legacy/universe/stations/{station_id}/`

Alternate route: `/dev/universe/stations/{station_id}/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetUniverseStationsStationID(params *GetUniverseStationsStationIDParams) (*GetUniverseStationsStationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseStationsStationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_stations_station_id",
		Method:             "GET",
		PathPattern:        "/universe/stations/{station_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseStationsStationIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseStationsStationIDOK), nil

}

/*
GetUniverseStructures lists all public structures

List all public structures

---

Alternate route: `/v1/universe/structures/`

Alternate route: `/legacy/universe/structures/`

Alternate route: `/dev/universe/structures/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetUniverseStructures(params *GetUniverseStructuresParams) (*GetUniverseStructuresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseStructuresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_structures",
		Method:             "GET",
		PathPattern:        "/universe/structures/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseStructuresReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseStructuresOK), nil

}

/*
GetUniverseStructuresStructureID gets structure information

Returns information on requested structure, if you are on the ACL. Otherwise, returns "Forbidden" for all inputs.

---

Alternate route: `/v1/universe/structures/{structure_id}/`

Alternate route: `/legacy/universe/structures/{structure_id}/`

Alternate route: `/dev/universe/structures/{structure_id}/`

*/
func (a *Client) GetUniverseStructuresStructureID(params *GetUniverseStructuresStructureIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetUniverseStructuresStructureIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseStructuresStructureIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_structures_structure_id",
		Method:             "GET",
		PathPattern:        "/universe/structures/{structure_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseStructuresStructureIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseStructuresStructureIDOK), nil

}

/*
GetUniverseSystemsSystemID gets solar system information

Information on solar systems

---

Alternate route: `/v1/universe/systems/{system_id}/`

Alternate route: `/legacy/universe/systems/{system_id}/`

Alternate route: `/dev/universe/systems/{system_id}/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetUniverseSystemsSystemID(params *GetUniverseSystemsSystemIDParams) (*GetUniverseSystemsSystemIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseSystemsSystemIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_systems_system_id",
		Method:             "GET",
		PathPattern:        "/universe/systems/{system_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseSystemsSystemIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseSystemsSystemIDOK), nil

}

/*
GetUniverseTypesTypeID gets type information

Get information on a type

---

Alternate route: `/v1/universe/types/{type_id}/`

Alternate route: `/legacy/universe/types/{type_id}/`

Alternate route: `/dev/universe/types/{type_id}/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetUniverseTypesTypeID(params *GetUniverseTypesTypeIDParams) (*GetUniverseTypesTypeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseTypesTypeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_types_type_id",
		Method:             "GET",
		PathPattern:        "/universe/types/{type_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseTypesTypeIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseTypesTypeIDOK), nil

}

/*
PostCharactersCharacterIDCspa calculates a c s p a charge cost

Takes a source character ID in the url and a set of target character ID's in the body, returns a CSPA charge cost

---

Alternate route: `/v3/characters/{character_id}/cspa/`

Alternate route: `/legacy/characters/{character_id}/cspa/`

Alternate route: `/dev/characters/{character_id}/cspa/`

*/
func (a *Client) PostCharactersCharacterIDCspa(params *PostCharactersCharacterIDCspaParams, authInfo runtime.ClientAuthInfoWriter) (*PostCharactersCharacterIDCspaCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCharactersCharacterIDCspaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post_characters_character_id_cspa",
		Method:             "POST",
		PathPattern:        "/characters/{character_id}/cspa/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCharactersCharacterIDCspaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCharactersCharacterIDCspaCreated), nil

}

/*
PostCharactersCharacterIDMail sends a new mail

Create and send a new mail

---

Alternate route: `/v1/characters/{character_id}/mail/`

Alternate route: `/legacy/characters/{character_id}/mail/`

Alternate route: `/dev/characters/{character_id}/mail/`

*/
func (a *Client) PostCharactersCharacterIDMail(params *PostCharactersCharacterIDMailParams, authInfo runtime.ClientAuthInfoWriter) (*PostCharactersCharacterIDMailCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCharactersCharacterIDMailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post_characters_character_id_mail",
		Method:             "POST",
		PathPattern:        "/characters/{character_id}/mail/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCharactersCharacterIDMailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCharactersCharacterIDMailCreated), nil

}

/*
PostCharactersCharacterIDMailLabels creates a mail label

Create a mail label

---

Alternate route: `/v2/characters/{character_id}/mail/labels/`

Alternate route: `/legacy/characters/{character_id}/mail/labels/`

Alternate route: `/dev/characters/{character_id}/mail/labels/`

*/
func (a *Client) PostCharactersCharacterIDMailLabels(params *PostCharactersCharacterIDMailLabelsParams, authInfo runtime.ClientAuthInfoWriter) (*PostCharactersCharacterIDMailLabelsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCharactersCharacterIDMailLabelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post_characters_character_id_mail_labels",
		Method:             "POST",
		PathPattern:        "/characters/{character_id}/mail/labels/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCharactersCharacterIDMailLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCharactersCharacterIDMailLabelsCreated), nil

}

/*
PostUniverseNames gets names and categories for a set of ID s

Resolve a set of IDs to names and categories. Supported ID's for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.

---

Alternate route: `/v1/universe/names/`

Alternate route: `/legacy/universe/names/`

*/
func (a *Client) PostUniverseNames(params *PostUniverseNamesParams) (*PostUniverseNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUniverseNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post_universe_names",
		Method:             "POST",
		PathPattern:        "/universe/names/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUniverseNamesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUniverseNamesOK), nil

}

/*
PutCharactersCharacterIDCalendarEventID responds to an event

Set your response status to an event

---

Alternate route: `/v3/characters/{character_id}/calendar/{event_id}/`

Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/`

*/
func (a *Client) PutCharactersCharacterIDCalendarEventID(params *PutCharactersCharacterIDCalendarEventIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutCharactersCharacterIDCalendarEventIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCharactersCharacterIDCalendarEventIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "put_characters_character_id_calendar_event_id",
		Method:             "PUT",
		PathPattern:        "/characters/{character_id}/calendar/{event_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCharactersCharacterIDCalendarEventIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCharactersCharacterIDCalendarEventIDNoContent), nil

}

/*
PutCharactersCharacterIDMailMailID updates metadata about a mail

Update metadata about a mail

---

Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/`

Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`

Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/`

*/
func (a *Client) PutCharactersCharacterIDMailMailID(params *PutCharactersCharacterIDMailMailIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutCharactersCharacterIDMailMailIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCharactersCharacterIDMailMailIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "put_characters_character_id_mail_mail_id",
		Method:             "PUT",
		PathPattern:        "/characters/{character_id}/mail/{mail_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCharactersCharacterIDMailMailIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCharactersCharacterIDMailMailIDNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
