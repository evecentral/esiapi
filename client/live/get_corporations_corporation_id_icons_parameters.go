package live

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCorporationsCorporationIDIconsParams creates a new GetCorporationsCorporationIDIconsParams object
// with the default values initialized.
func NewGetCorporationsCorporationIDIconsParams() *GetCorporationsCorporationIDIconsParams {
	var (
		datasourceDefault = string("tranquility")
	)
	return &GetCorporationsCorporationIDIconsParams{
		Datasource: &datasourceDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCorporationsCorporationIDIconsParamsWithTimeout creates a new GetCorporationsCorporationIDIconsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCorporationsCorporationIDIconsParamsWithTimeout(timeout time.Duration) *GetCorporationsCorporationIDIconsParams {
	var (
		datasourceDefault = string("tranquility")
	)
	return &GetCorporationsCorporationIDIconsParams{
		Datasource: &datasourceDefault,

		timeout: timeout,
	}
}

// NewGetCorporationsCorporationIDIconsParamsWithContext creates a new GetCorporationsCorporationIDIconsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCorporationsCorporationIDIconsParamsWithContext(ctx context.Context) *GetCorporationsCorporationIDIconsParams {
	var (
		datasourceDefault = string("tranquility")
	)
	return &GetCorporationsCorporationIDIconsParams{
		Datasource: &datasourceDefault,

		Context: ctx,
	}
}

/*GetCorporationsCorporationIDIconsParams contains all the parameters to send to the API endpoint
for the get corporations corporation id icons operation typically these are written to a http.Request
*/
type GetCorporationsCorporationIDIconsParams struct {

	/*CorporationID
	  An EVE corporation ID

	*/
	CorporationID int32
	/*Datasource
	  The server name you would like data from

	*/
	Datasource *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get corporations corporation id icons params
func (o *GetCorporationsCorporationIDIconsParams) WithTimeout(timeout time.Duration) *GetCorporationsCorporationIDIconsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get corporations corporation id icons params
func (o *GetCorporationsCorporationIDIconsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get corporations corporation id icons params
func (o *GetCorporationsCorporationIDIconsParams) WithContext(ctx context.Context) *GetCorporationsCorporationIDIconsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get corporations corporation id icons params
func (o *GetCorporationsCorporationIDIconsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithCorporationID adds the corporationID to the get corporations corporation id icons params
func (o *GetCorporationsCorporationIDIconsParams) WithCorporationID(corporationID int32) *GetCorporationsCorporationIDIconsParams {
	o.SetCorporationID(corporationID)
	return o
}

// SetCorporationID adds the corporationId to the get corporations corporation id icons params
func (o *GetCorporationsCorporationIDIconsParams) SetCorporationID(corporationID int32) {
	o.CorporationID = corporationID
}

// WithDatasource adds the datasource to the get corporations corporation id icons params
func (o *GetCorporationsCorporationIDIconsParams) WithDatasource(datasource *string) *GetCorporationsCorporationIDIconsParams {
	o.SetDatasource(datasource)
	return o
}

// SetDatasource adds the datasource to the get corporations corporation id icons params
func (o *GetCorporationsCorporationIDIconsParams) SetDatasource(datasource *string) {
	o.Datasource = datasource
}

// WriteToRequest writes these params to a swagger request
func (o *GetCorporationsCorporationIDIconsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param corporation_id
	if err := r.SetPathParam("corporation_id", swag.FormatInt32(o.CorporationID)); err != nil {
		return err
	}

	if o.Datasource != nil {

		// query param datasource
		var qrDatasource string
		if o.Datasource != nil {
			qrDatasource = *o.Datasource
		}
		qDatasource := qrDatasource
		if qDatasource != "" {
			if err := r.SetQueryParam("datasource", qDatasource); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
