// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/evecentral/esiapi/models"
)

// GetSearchReader is a Reader for the GetSearch structure.
type GetSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 304:
		result := NewGetSearchNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 400:
		result := NewGetSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 420:
		result := NewGetSearchEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetSearchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewGetSearchServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewGetSearchGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSearchOK creates a GetSearchOK with default headers values
func NewGetSearchOK() *GetSearchOK {
	return &GetSearchOK{}
}

/*GetSearchOK handles this case with default header values.

A list of search results
*/
type GetSearchOK struct {
	/*The caching mechanism used
	 */
	CacheControl string
	/*The language used in the response
	 */
	ContentLanguage string
	/*RFC7232 compliant entity tag
	 */
	ETag string
	/*RFC7231 formatted datetime string
	 */
	Expires string
	/*RFC7231 formatted datetime string
	 */
	LastModified string

	Payload *models.GetSearchOKBody
}

func (o *GetSearchOK) Error() string {
	return fmt.Sprintf("[GET /search/][%d] getSearchOK  %+v", 200, o.Payload)
}

func (o *GetSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Cache-Control
	o.CacheControl = response.GetHeader("Cache-Control")

	// response header Content-Language
	o.ContentLanguage = response.GetHeader("Content-Language")

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	// response header Expires
	o.Expires = response.GetHeader("Expires")

	// response header Last-Modified
	o.LastModified = response.GetHeader("Last-Modified")

	o.Payload = new(models.GetSearchOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchNotModified creates a GetSearchNotModified with default headers values
func NewGetSearchNotModified() *GetSearchNotModified {
	return &GetSearchNotModified{}
}

/*GetSearchNotModified handles this case with default header values.

Not modified
*/
type GetSearchNotModified struct {
	/*The caching mechanism used
	 */
	CacheControl string
	/*RFC7232 compliant entity tag
	 */
	ETag string
	/*RFC7231 formatted datetime string
	 */
	Expires string
	/*RFC7231 formatted datetime string
	 */
	LastModified string
}

func (o *GetSearchNotModified) Error() string {
	return fmt.Sprintf("[GET /search/][%d] getSearchNotModified ", 304)
}

func (o *GetSearchNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Cache-Control
	o.CacheControl = response.GetHeader("Cache-Control")

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	// response header Expires
	o.Expires = response.GetHeader("Expires")

	// response header Last-Modified
	o.LastModified = response.GetHeader("Last-Modified")

	return nil
}

// NewGetSearchBadRequest creates a GetSearchBadRequest with default headers values
func NewGetSearchBadRequest() *GetSearchBadRequest {
	return &GetSearchBadRequest{}
}

/*GetSearchBadRequest handles this case with default header values.

Bad request
*/
type GetSearchBadRequest struct {
	Payload *models.BadRequest
}

func (o *GetSearchBadRequest) Error() string {
	return fmt.Sprintf("[GET /search/][%d] getSearchBadRequest  %+v", 400, o.Payload)
}

func (o *GetSearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchEnhanceYourCalm creates a GetSearchEnhanceYourCalm with default headers values
func NewGetSearchEnhanceYourCalm() *GetSearchEnhanceYourCalm {
	return &GetSearchEnhanceYourCalm{}
}

/*GetSearchEnhanceYourCalm handles this case with default header values.

Error limited
*/
type GetSearchEnhanceYourCalm struct {
	Payload *models.ErrorLimited
}

func (o *GetSearchEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[GET /search/][%d] getSearchEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *GetSearchEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorLimited)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchInternalServerError creates a GetSearchInternalServerError with default headers values
func NewGetSearchInternalServerError() *GetSearchInternalServerError {
	return &GetSearchInternalServerError{}
}

/*GetSearchInternalServerError handles this case with default header values.

Internal server error
*/
type GetSearchInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *GetSearchInternalServerError) Error() string {
	return fmt.Sprintf("[GET /search/][%d] getSearchInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSearchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchServiceUnavailable creates a GetSearchServiceUnavailable with default headers values
func NewGetSearchServiceUnavailable() *GetSearchServiceUnavailable {
	return &GetSearchServiceUnavailable{}
}

/*GetSearchServiceUnavailable handles this case with default header values.

Service unavailable
*/
type GetSearchServiceUnavailable struct {
	Payload *models.ServiceUnavailable
}

func (o *GetSearchServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /search/][%d] getSearchServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetSearchServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceUnavailable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchGatewayTimeout creates a GetSearchGatewayTimeout with default headers values
func NewGetSearchGatewayTimeout() *GetSearchGatewayTimeout {
	return &GetSearchGatewayTimeout{}
}

/*GetSearchGatewayTimeout handles this case with default header values.

Gateway timeout
*/
type GetSearchGatewayTimeout struct {
	Payload *models.GatewayTimeout
}

func (o *GetSearchGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /search/][%d] getSearchGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetSearchGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayTimeout)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
