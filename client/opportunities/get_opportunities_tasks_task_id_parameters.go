// Code generated by go-swagger; DO NOT EDIT.

package opportunities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetOpportunitiesTasksTaskIDParams creates a new GetOpportunitiesTasksTaskIDParams object
// with the default values initialized.
func NewGetOpportunitiesTasksTaskIDParams() *GetOpportunitiesTasksTaskIDParams {
	var (
		datasourceDefault = string("tranquility")
	)
	return &GetOpportunitiesTasksTaskIDParams{
		Datasource: &datasourceDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOpportunitiesTasksTaskIDParamsWithTimeout creates a new GetOpportunitiesTasksTaskIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOpportunitiesTasksTaskIDParamsWithTimeout(timeout time.Duration) *GetOpportunitiesTasksTaskIDParams {
	var (
		datasourceDefault = string("tranquility")
	)
	return &GetOpportunitiesTasksTaskIDParams{
		Datasource: &datasourceDefault,

		timeout: timeout,
	}
}

// NewGetOpportunitiesTasksTaskIDParamsWithContext creates a new GetOpportunitiesTasksTaskIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOpportunitiesTasksTaskIDParamsWithContext(ctx context.Context) *GetOpportunitiesTasksTaskIDParams {
	var (
		datasourceDefault = string("tranquility")
	)
	return &GetOpportunitiesTasksTaskIDParams{
		Datasource: &datasourceDefault,

		Context: ctx,
	}
}

// NewGetOpportunitiesTasksTaskIDParamsWithHTTPClient creates a new GetOpportunitiesTasksTaskIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOpportunitiesTasksTaskIDParamsWithHTTPClient(client *http.Client) *GetOpportunitiesTasksTaskIDParams {
	var (
		datasourceDefault = string("tranquility")
	)
	return &GetOpportunitiesTasksTaskIDParams{
		Datasource: &datasourceDefault,
		HTTPClient: client,
	}
}

/*GetOpportunitiesTasksTaskIDParams contains all the parameters to send to the API endpoint
for the get opportunities tasks task id operation typically these are written to a http.Request
*/
type GetOpportunitiesTasksTaskIDParams struct {

	/*IfNoneMatch
	  ETag from a previous request. A 304 will be returned if this matches the current ETag

	*/
	IfNoneMatch *string
	/*Datasource
	  The server name you would like data from

	*/
	Datasource *string
	/*TaskID
	  ID of an opportunities task

	*/
	TaskID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get opportunities tasks task id params
func (o *GetOpportunitiesTasksTaskIDParams) WithTimeout(timeout time.Duration) *GetOpportunitiesTasksTaskIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get opportunities tasks task id params
func (o *GetOpportunitiesTasksTaskIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get opportunities tasks task id params
func (o *GetOpportunitiesTasksTaskIDParams) WithContext(ctx context.Context) *GetOpportunitiesTasksTaskIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get opportunities tasks task id params
func (o *GetOpportunitiesTasksTaskIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get opportunities tasks task id params
func (o *GetOpportunitiesTasksTaskIDParams) WithHTTPClient(client *http.Client) *GetOpportunitiesTasksTaskIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get opportunities tasks task id params
func (o *GetOpportunitiesTasksTaskIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfNoneMatch adds the ifNoneMatch to the get opportunities tasks task id params
func (o *GetOpportunitiesTasksTaskIDParams) WithIfNoneMatch(ifNoneMatch *string) *GetOpportunitiesTasksTaskIDParams {
	o.SetIfNoneMatch(ifNoneMatch)
	return o
}

// SetIfNoneMatch adds the ifNoneMatch to the get opportunities tasks task id params
func (o *GetOpportunitiesTasksTaskIDParams) SetIfNoneMatch(ifNoneMatch *string) {
	o.IfNoneMatch = ifNoneMatch
}

// WithDatasource adds the datasource to the get opportunities tasks task id params
func (o *GetOpportunitiesTasksTaskIDParams) WithDatasource(datasource *string) *GetOpportunitiesTasksTaskIDParams {
	o.SetDatasource(datasource)
	return o
}

// SetDatasource adds the datasource to the get opportunities tasks task id params
func (o *GetOpportunitiesTasksTaskIDParams) SetDatasource(datasource *string) {
	o.Datasource = datasource
}

// WithTaskID adds the taskID to the get opportunities tasks task id params
func (o *GetOpportunitiesTasksTaskIDParams) WithTaskID(taskID int32) *GetOpportunitiesTasksTaskIDParams {
	o.SetTaskID(taskID)
	return o
}

// SetTaskID adds the taskId to the get opportunities tasks task id params
func (o *GetOpportunitiesTasksTaskIDParams) SetTaskID(taskID int32) {
	o.TaskID = taskID
}

// WriteToRequest writes these params to a swagger request
func (o *GetOpportunitiesTasksTaskIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IfNoneMatch != nil {

		// header param If-None-Match
		if err := r.SetHeaderParam("If-None-Match", *o.IfNoneMatch); err != nil {
			return err
		}

	}

	if o.Datasource != nil {

		// query param datasource
		var qrDatasource string
		if o.Datasource != nil {
			qrDatasource = *o.Datasource
		}
		qDatasource := qrDatasource
		if qDatasource != "" {
			if err := r.SetQueryParam("datasource", qDatasource); err != nil {
				return err
			}
		}

	}

	// path param task_id
	if err := r.SetPathParam("task_id", swag.FormatInt32(o.TaskID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
