// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/evecentral/esiapi/models"
)

// GetRouteOriginDestinationReader is a Reader for the GetRouteOriginDestination structure.
type GetRouteOriginDestinationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRouteOriginDestinationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetRouteOriginDestinationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 304:
		result := NewGetRouteOriginDestinationNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 400:
		result := NewGetRouteOriginDestinationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetRouteOriginDestinationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 420:
		result := NewGetRouteOriginDestinationEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetRouteOriginDestinationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewGetRouteOriginDestinationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewGetRouteOriginDestinationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetRouteOriginDestinationOK creates a GetRouteOriginDestinationOK with default headers values
func NewGetRouteOriginDestinationOK() *GetRouteOriginDestinationOK {
	return &GetRouteOriginDestinationOK{}
}

/*GetRouteOriginDestinationOK handles this case with default header values.

Solar systems in route from origin to destination
*/
type GetRouteOriginDestinationOK struct {
	/*The caching mechanism used
	 */
	CacheControl string
	/*RFC7232 compliant entity tag
	 */
	ETag string
	/*RFC7231 formatted datetime string
	 */
	Expires string
	/*RFC7231 formatted datetime string
	 */
	LastModified string

	Payload []int32
}

func (o *GetRouteOriginDestinationOK) Error() string {
	return fmt.Sprintf("[GET /route/{origin}/{destination}/][%d] getRouteOriginDestinationOK  %+v", 200, o.Payload)
}

func (o *GetRouteOriginDestinationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Cache-Control
	o.CacheControl = response.GetHeader("Cache-Control")

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	// response header Expires
	o.Expires = response.GetHeader("Expires")

	// response header Last-Modified
	o.LastModified = response.GetHeader("Last-Modified")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRouteOriginDestinationNotModified creates a GetRouteOriginDestinationNotModified with default headers values
func NewGetRouteOriginDestinationNotModified() *GetRouteOriginDestinationNotModified {
	return &GetRouteOriginDestinationNotModified{}
}

/*GetRouteOriginDestinationNotModified handles this case with default header values.

Not modified
*/
type GetRouteOriginDestinationNotModified struct {
	/*The caching mechanism used
	 */
	CacheControl string
	/*RFC7232 compliant entity tag
	 */
	ETag string
	/*RFC7231 formatted datetime string
	 */
	Expires string
	/*RFC7231 formatted datetime string
	 */
	LastModified string
}

func (o *GetRouteOriginDestinationNotModified) Error() string {
	return fmt.Sprintf("[GET /route/{origin}/{destination}/][%d] getRouteOriginDestinationNotModified ", 304)
}

func (o *GetRouteOriginDestinationNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Cache-Control
	o.CacheControl = response.GetHeader("Cache-Control")

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	// response header Expires
	o.Expires = response.GetHeader("Expires")

	// response header Last-Modified
	o.LastModified = response.GetHeader("Last-Modified")

	return nil
}

// NewGetRouteOriginDestinationBadRequest creates a GetRouteOriginDestinationBadRequest with default headers values
func NewGetRouteOriginDestinationBadRequest() *GetRouteOriginDestinationBadRequest {
	return &GetRouteOriginDestinationBadRequest{}
}

/*GetRouteOriginDestinationBadRequest handles this case with default header values.

Bad request
*/
type GetRouteOriginDestinationBadRequest struct {
	Payload *models.BadRequest
}

func (o *GetRouteOriginDestinationBadRequest) Error() string {
	return fmt.Sprintf("[GET /route/{origin}/{destination}/][%d] getRouteOriginDestinationBadRequest  %+v", 400, o.Payload)
}

func (o *GetRouteOriginDestinationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRouteOriginDestinationNotFound creates a GetRouteOriginDestinationNotFound with default headers values
func NewGetRouteOriginDestinationNotFound() *GetRouteOriginDestinationNotFound {
	return &GetRouteOriginDestinationNotFound{}
}

/*GetRouteOriginDestinationNotFound handles this case with default header values.

No route found
*/
type GetRouteOriginDestinationNotFound struct {
	Payload *models.GetRouteOriginDestinationNotFoundBody
}

func (o *GetRouteOriginDestinationNotFound) Error() string {
	return fmt.Sprintf("[GET /route/{origin}/{destination}/][%d] getRouteOriginDestinationNotFound  %+v", 404, o.Payload)
}

func (o *GetRouteOriginDestinationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetRouteOriginDestinationNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRouteOriginDestinationEnhanceYourCalm creates a GetRouteOriginDestinationEnhanceYourCalm with default headers values
func NewGetRouteOriginDestinationEnhanceYourCalm() *GetRouteOriginDestinationEnhanceYourCalm {
	return &GetRouteOriginDestinationEnhanceYourCalm{}
}

/*GetRouteOriginDestinationEnhanceYourCalm handles this case with default header values.

Error limited
*/
type GetRouteOriginDestinationEnhanceYourCalm struct {
	Payload *models.ErrorLimited
}

func (o *GetRouteOriginDestinationEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[GET /route/{origin}/{destination}/][%d] getRouteOriginDestinationEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *GetRouteOriginDestinationEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorLimited)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRouteOriginDestinationInternalServerError creates a GetRouteOriginDestinationInternalServerError with default headers values
func NewGetRouteOriginDestinationInternalServerError() *GetRouteOriginDestinationInternalServerError {
	return &GetRouteOriginDestinationInternalServerError{}
}

/*GetRouteOriginDestinationInternalServerError handles this case with default header values.

Internal server error
*/
type GetRouteOriginDestinationInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *GetRouteOriginDestinationInternalServerError) Error() string {
	return fmt.Sprintf("[GET /route/{origin}/{destination}/][%d] getRouteOriginDestinationInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRouteOriginDestinationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRouteOriginDestinationServiceUnavailable creates a GetRouteOriginDestinationServiceUnavailable with default headers values
func NewGetRouteOriginDestinationServiceUnavailable() *GetRouteOriginDestinationServiceUnavailable {
	return &GetRouteOriginDestinationServiceUnavailable{}
}

/*GetRouteOriginDestinationServiceUnavailable handles this case with default header values.

Service unavailable
*/
type GetRouteOriginDestinationServiceUnavailable struct {
	Payload *models.ServiceUnavailable
}

func (o *GetRouteOriginDestinationServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /route/{origin}/{destination}/][%d] getRouteOriginDestinationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetRouteOriginDestinationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceUnavailable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRouteOriginDestinationGatewayTimeout creates a GetRouteOriginDestinationGatewayTimeout with default headers values
func NewGetRouteOriginDestinationGatewayTimeout() *GetRouteOriginDestinationGatewayTimeout {
	return &GetRouteOriginDestinationGatewayTimeout{}
}

/*GetRouteOriginDestinationGatewayTimeout handles this case with default header values.

Gateway timeout
*/
type GetRouteOriginDestinationGatewayTimeout struct {
	Payload *models.GatewayTimeout
}

func (o *GetRouteOriginDestinationGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /route/{origin}/{destination}/][%d] getRouteOriginDestinationGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetRouteOriginDestinationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayTimeout)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
