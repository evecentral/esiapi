package market

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new market API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for market API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetMarketsPrices lists market prices

Return a list of prices

---

Alternate route: `/v1/markets/prices/`

Alternate route: `/legacy/markets/prices/`

Alternate route: `/dev/markets/prices/`


---

This route is cached for up to 3600 seconds
*/
func (a *Client) GetMarketsPrices(params *GetMarketsPricesParams) (*GetMarketsPricesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMarketsPricesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_markets_prices",
		Method:             "GET",
		PathPattern:        "/markets/prices/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMarketsPricesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMarketsPricesOK), nil

}

/*
GetMarketsRegionIDHistory lists historical market statistics in a region

Return a list of historical market statistics for the specified type in a region

---

Alternate route: `/v1/markets/{region_id}/history/`

Alternate route: `/legacy/markets/{region_id}/history/`

Alternate route: `/dev/markets/{region_id}/history/`


---

This route is cached for up to 300 seconds
*/
func (a *Client) GetMarketsRegionIDHistory(params *GetMarketsRegionIDHistoryParams) (*GetMarketsRegionIDHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMarketsRegionIDHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_markets_region_id_history",
		Method:             "GET",
		PathPattern:        "/markets/{region_id}/history/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMarketsRegionIDHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMarketsRegionIDHistoryOK), nil

}

/*
GetMarketsRegionIDOrders lists orders in a region

Return a list of orders in a region

---

Alternate route: `/v1/markets/{region_id}/orders/`

Alternate route: `/legacy/markets/{region_id}/orders/`

Alternate route: `/dev/markets/{region_id}/orders/`


---

This route is cached for up to 300 seconds
*/
func (a *Client) GetMarketsRegionIDOrders(params *GetMarketsRegionIDOrdersParams) (*GetMarketsRegionIDOrdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMarketsRegionIDOrdersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_markets_region_id_orders",
		Method:             "GET",
		PathPattern:        "/markets/{region_id}/orders/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMarketsRegionIDOrdersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMarketsRegionIDOrdersOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
