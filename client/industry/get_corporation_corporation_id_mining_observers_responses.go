// Code generated by go-swagger; DO NOT EDIT.

package industry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/evecentral/esiapi/models"
)

// GetCorporationCorporationIDMiningObserversReader is a Reader for the GetCorporationCorporationIDMiningObservers structure.
type GetCorporationCorporationIDMiningObserversReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCorporationCorporationIDMiningObserversReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetCorporationCorporationIDMiningObserversOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 304:
		result := NewGetCorporationCorporationIDMiningObserversNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 400:
		result := NewGetCorporationCorporationIDMiningObserversBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetCorporationCorporationIDMiningObserversUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetCorporationCorporationIDMiningObserversForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 420:
		result := NewGetCorporationCorporationIDMiningObserversEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetCorporationCorporationIDMiningObserversInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewGetCorporationCorporationIDMiningObserversServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewGetCorporationCorporationIDMiningObserversGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCorporationCorporationIDMiningObserversOK creates a GetCorporationCorporationIDMiningObserversOK with default headers values
func NewGetCorporationCorporationIDMiningObserversOK() *GetCorporationCorporationIDMiningObserversOK {
	return &GetCorporationCorporationIDMiningObserversOK{
		XPages: 1,
	}
}

/*GetCorporationCorporationIDMiningObserversOK handles this case with default header values.

Observer list of a corporation
*/
type GetCorporationCorporationIDMiningObserversOK struct {
	/*The caching mechanism used
	 */
	CacheControl string
	/*RFC7232 compliant entity tag
	 */
	ETag string
	/*RFC7231 formatted datetime string
	 */
	Expires string
	/*RFC7231 formatted datetime string
	 */
	LastModified string
	/*Maximum page number
	 */
	XPages int32

	Payload []*models.GetCorporationCorporationIDMiningObserversOKBodyItems
}

func (o *GetCorporationCorporationIDMiningObserversOK) Error() string {
	return fmt.Sprintf("[GET /corporation/{corporation_id}/mining/observers/][%d] getCorporationCorporationIdMiningObserversOK  %+v", 200, o.Payload)
}

func (o *GetCorporationCorporationIDMiningObserversOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Cache-Control
	o.CacheControl = response.GetHeader("Cache-Control")

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	// response header Expires
	o.Expires = response.GetHeader("Expires")

	// response header Last-Modified
	o.LastModified = response.GetHeader("Last-Modified")

	// response header X-Pages
	xPages, err := swag.ConvertInt32(response.GetHeader("X-Pages"))
	if err != nil {
		return errors.InvalidType("X-Pages", "header", "int32", response.GetHeader("X-Pages"))
	}
	o.XPages = xPages

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationCorporationIDMiningObserversNotModified creates a GetCorporationCorporationIDMiningObserversNotModified with default headers values
func NewGetCorporationCorporationIDMiningObserversNotModified() *GetCorporationCorporationIDMiningObserversNotModified {
	return &GetCorporationCorporationIDMiningObserversNotModified{}
}

/*GetCorporationCorporationIDMiningObserversNotModified handles this case with default header values.

Not modified
*/
type GetCorporationCorporationIDMiningObserversNotModified struct {
	/*The caching mechanism used
	 */
	CacheControl string
	/*RFC7232 compliant entity tag
	 */
	ETag string
	/*RFC7231 formatted datetime string
	 */
	Expires string
	/*RFC7231 formatted datetime string
	 */
	LastModified string
}

func (o *GetCorporationCorporationIDMiningObserversNotModified) Error() string {
	return fmt.Sprintf("[GET /corporation/{corporation_id}/mining/observers/][%d] getCorporationCorporationIdMiningObserversNotModified ", 304)
}

func (o *GetCorporationCorporationIDMiningObserversNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Cache-Control
	o.CacheControl = response.GetHeader("Cache-Control")

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	// response header Expires
	o.Expires = response.GetHeader("Expires")

	// response header Last-Modified
	o.LastModified = response.GetHeader("Last-Modified")

	return nil
}

// NewGetCorporationCorporationIDMiningObserversBadRequest creates a GetCorporationCorporationIDMiningObserversBadRequest with default headers values
func NewGetCorporationCorporationIDMiningObserversBadRequest() *GetCorporationCorporationIDMiningObserversBadRequest {
	return &GetCorporationCorporationIDMiningObserversBadRequest{}
}

/*GetCorporationCorporationIDMiningObserversBadRequest handles this case with default header values.

Bad request
*/
type GetCorporationCorporationIDMiningObserversBadRequest struct {
	Payload *models.BadRequest
}

func (o *GetCorporationCorporationIDMiningObserversBadRequest) Error() string {
	return fmt.Sprintf("[GET /corporation/{corporation_id}/mining/observers/][%d] getCorporationCorporationIdMiningObserversBadRequest  %+v", 400, o.Payload)
}

func (o *GetCorporationCorporationIDMiningObserversBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationCorporationIDMiningObserversUnauthorized creates a GetCorporationCorporationIDMiningObserversUnauthorized with default headers values
func NewGetCorporationCorporationIDMiningObserversUnauthorized() *GetCorporationCorporationIDMiningObserversUnauthorized {
	return &GetCorporationCorporationIDMiningObserversUnauthorized{}
}

/*GetCorporationCorporationIDMiningObserversUnauthorized handles this case with default header values.

Unauthorized
*/
type GetCorporationCorporationIDMiningObserversUnauthorized struct {
	Payload *models.Unauthorized
}

func (o *GetCorporationCorporationIDMiningObserversUnauthorized) Error() string {
	return fmt.Sprintf("[GET /corporation/{corporation_id}/mining/observers/][%d] getCorporationCorporationIdMiningObserversUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCorporationCorporationIDMiningObserversUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Unauthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationCorporationIDMiningObserversForbidden creates a GetCorporationCorporationIDMiningObserversForbidden with default headers values
func NewGetCorporationCorporationIDMiningObserversForbidden() *GetCorporationCorporationIDMiningObserversForbidden {
	return &GetCorporationCorporationIDMiningObserversForbidden{}
}

/*GetCorporationCorporationIDMiningObserversForbidden handles this case with default header values.

Forbidden
*/
type GetCorporationCorporationIDMiningObserversForbidden struct {
	Payload *models.Forbidden
}

func (o *GetCorporationCorporationIDMiningObserversForbidden) Error() string {
	return fmt.Sprintf("[GET /corporation/{corporation_id}/mining/observers/][%d] getCorporationCorporationIdMiningObserversForbidden  %+v", 403, o.Payload)
}

func (o *GetCorporationCorporationIDMiningObserversForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationCorporationIDMiningObserversEnhanceYourCalm creates a GetCorporationCorporationIDMiningObserversEnhanceYourCalm with default headers values
func NewGetCorporationCorporationIDMiningObserversEnhanceYourCalm() *GetCorporationCorporationIDMiningObserversEnhanceYourCalm {
	return &GetCorporationCorporationIDMiningObserversEnhanceYourCalm{}
}

/*GetCorporationCorporationIDMiningObserversEnhanceYourCalm handles this case with default header values.

Error limited
*/
type GetCorporationCorporationIDMiningObserversEnhanceYourCalm struct {
	Payload *models.ErrorLimited
}

func (o *GetCorporationCorporationIDMiningObserversEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[GET /corporation/{corporation_id}/mining/observers/][%d] getCorporationCorporationIdMiningObserversEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *GetCorporationCorporationIDMiningObserversEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorLimited)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationCorporationIDMiningObserversInternalServerError creates a GetCorporationCorporationIDMiningObserversInternalServerError with default headers values
func NewGetCorporationCorporationIDMiningObserversInternalServerError() *GetCorporationCorporationIDMiningObserversInternalServerError {
	return &GetCorporationCorporationIDMiningObserversInternalServerError{}
}

/*GetCorporationCorporationIDMiningObserversInternalServerError handles this case with default header values.

Internal server error
*/
type GetCorporationCorporationIDMiningObserversInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *GetCorporationCorporationIDMiningObserversInternalServerError) Error() string {
	return fmt.Sprintf("[GET /corporation/{corporation_id}/mining/observers/][%d] getCorporationCorporationIdMiningObserversInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCorporationCorporationIDMiningObserversInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationCorporationIDMiningObserversServiceUnavailable creates a GetCorporationCorporationIDMiningObserversServiceUnavailable with default headers values
func NewGetCorporationCorporationIDMiningObserversServiceUnavailable() *GetCorporationCorporationIDMiningObserversServiceUnavailable {
	return &GetCorporationCorporationIDMiningObserversServiceUnavailable{}
}

/*GetCorporationCorporationIDMiningObserversServiceUnavailable handles this case with default header values.

Service unavailable
*/
type GetCorporationCorporationIDMiningObserversServiceUnavailable struct {
	Payload *models.ServiceUnavailable
}

func (o *GetCorporationCorporationIDMiningObserversServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /corporation/{corporation_id}/mining/observers/][%d] getCorporationCorporationIdMiningObserversServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetCorporationCorporationIDMiningObserversServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceUnavailable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationCorporationIDMiningObserversGatewayTimeout creates a GetCorporationCorporationIDMiningObserversGatewayTimeout with default headers values
func NewGetCorporationCorporationIDMiningObserversGatewayTimeout() *GetCorporationCorporationIDMiningObserversGatewayTimeout {
	return &GetCorporationCorporationIDMiningObserversGatewayTimeout{}
}

/*GetCorporationCorporationIDMiningObserversGatewayTimeout handles this case with default header values.

Gateway timeout
*/
type GetCorporationCorporationIDMiningObserversGatewayTimeout struct {
	Payload *models.GatewayTimeout
}

func (o *GetCorporationCorporationIDMiningObserversGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /corporation/{corporation_id}/mining/observers/][%d] getCorporationCorporationIdMiningObserversGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetCorporationCorporationIDMiningObserversGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayTimeout)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
