// Code generated by go-swagger; DO NOT EDIT.

package industry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new industry API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for industry API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetCharactersCharacterIDIndustryJobs lists character industry jobs

List industry jobs placed by a character

---
Alternate route: `/dev/characters/{character_id}/industry/jobs/`

Alternate route: `/legacy/characters/{character_id}/industry/jobs/`

Alternate route: `/v1/characters/{character_id}/industry/jobs/`

---
This route is cached for up to 300 seconds
*/
func (a *Client) GetCharactersCharacterIDIndustryJobs(params *GetCharactersCharacterIDIndustryJobsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDIndustryJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDIndustryJobsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_industry_jobs",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/industry/jobs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDIndustryJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDIndustryJobsOK), nil

}

/*
GetCharactersCharacterIDMining characters mining ledger

Paginated record of all mining done by a character for the past 30 days


---
Alternate route: `/dev/characters/{character_id}/mining/`

Alternate route: `/legacy/characters/{character_id}/mining/`

Alternate route: `/v1/characters/{character_id}/mining/`

---
This route is cached for up to 600 seconds
*/
func (a *Client) GetCharactersCharacterIDMining(params *GetCharactersCharacterIDMiningParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDMiningOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDMiningParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_mining",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/mining/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDMiningReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDMiningOK), nil

}

/*
GetCorporationCorporationIDMiningExtractions moons extraction timers

Extraction timers for all moon chunks being extracted by refineries belonging to a corporation.


---
Alternate route: `/dev/corporation/{corporation_id}/mining/extractions/`

Alternate route: `/legacy/corporation/{corporation_id}/mining/extractions/`

Alternate route: `/v1/corporation/{corporation_id}/mining/extractions/`

---
This route is cached for up to 1800 seconds

---
Requires one of the following EVE corporation role(s): Structure_manager

*/
func (a *Client) GetCorporationCorporationIDMiningExtractions(params *GetCorporationCorporationIDMiningExtractionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationCorporationIDMiningExtractionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationCorporationIDMiningExtractionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporation_corporation_id_mining_extractions",
		Method:             "GET",
		PathPattern:        "/corporation/{corporation_id}/mining/extractions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationCorporationIDMiningExtractionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationCorporationIDMiningExtractionsOK), nil

}

/*
GetCorporationCorporationIDMiningObservers corporations mining observers

Paginated list of all entities capable of observing and recording mining for a corporation


---
Alternate route: `/dev/corporation/{corporation_id}/mining/observers/`

Alternate route: `/legacy/corporation/{corporation_id}/mining/observers/`

Alternate route: `/v1/corporation/{corporation_id}/mining/observers/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Accountant

*/
func (a *Client) GetCorporationCorporationIDMiningObservers(params *GetCorporationCorporationIDMiningObserversParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationCorporationIDMiningObserversOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationCorporationIDMiningObserversParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporation_corporation_id_mining_observers",
		Method:             "GET",
		PathPattern:        "/corporation/{corporation_id}/mining/observers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationCorporationIDMiningObserversReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationCorporationIDMiningObserversOK), nil

}

/*
GetCorporationCorporationIDMiningObserversObserverID observeds corporation mining

Paginated record of all mining seen by an observer


---
Alternate route: `/dev/corporation/{corporation_id}/mining/observers/{observer_id}/`

Alternate route: `/legacy/corporation/{corporation_id}/mining/observers/{observer_id}/`

Alternate route: `/v1/corporation/{corporation_id}/mining/observers/{observer_id}/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Accountant

*/
func (a *Client) GetCorporationCorporationIDMiningObserversObserverID(params *GetCorporationCorporationIDMiningObserversObserverIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationCorporationIDMiningObserversObserverIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationCorporationIDMiningObserversObserverIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporation_corporation_id_mining_observers_observer_id",
		Method:             "GET",
		PathPattern:        "/corporation/{corporation_id}/mining/observers/{observer_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationCorporationIDMiningObserversObserverIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationCorporationIDMiningObserversObserverIDOK), nil

}

/*
GetCorporationsCorporationIDIndustryJobs lists corporation industry jobs

List industry jobs run by a corporation

---
Alternate route: `/dev/corporations/{corporation_id}/industry/jobs/`

Alternate route: `/legacy/corporations/{corporation_id}/industry/jobs/`

Alternate route: `/v1/corporations/{corporation_id}/industry/jobs/`

---
This route is cached for up to 300 seconds

---
Requires one of the following EVE corporation role(s): FactoryManager

*/
func (a *Client) GetCorporationsCorporationIDIndustryJobs(params *GetCorporationsCorporationIDIndustryJobsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDIndustryJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDIndustryJobsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_industry_jobs",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/industry/jobs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDIndustryJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDIndustryJobsOK), nil

}

/*
GetIndustryFacilities lists industry facilities

Return a list of industry facilities

---
Alternate route: `/dev/industry/facilities/`

Alternate route: `/legacy/industry/facilities/`

Alternate route: `/v1/industry/facilities/`

---
This route is cached for up to 3600 seconds
*/
func (a *Client) GetIndustryFacilities(params *GetIndustryFacilitiesParams) (*GetIndustryFacilitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIndustryFacilitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_industry_facilities",
		Method:             "GET",
		PathPattern:        "/industry/facilities/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIndustryFacilitiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIndustryFacilitiesOK), nil

}

/*
GetIndustrySystems lists solar system cost indices

Return cost indices for solar systems

---
Alternate route: `/dev/industry/systems/`

Alternate route: `/legacy/industry/systems/`

Alternate route: `/v1/industry/systems/`

---
This route is cached for up to 3600 seconds
*/
func (a *Client) GetIndustrySystems(params *GetIndustrySystemsParams) (*GetIndustrySystemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIndustrySystemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_industry_systems",
		Method:             "GET",
		PathPattern:        "/industry/systems/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIndustrySystemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIndustrySystemsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
