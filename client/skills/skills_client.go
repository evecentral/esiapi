// Code generated by go-swagger; DO NOT EDIT.

package skills

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new skills API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for skills API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetCharactersCharacterIDAttributes gets character attributes

Return attributes of a character

---
Alternate route: `/dev/characters/{character_id}/attributes/`

Alternate route: `/legacy/characters/{character_id}/attributes/`

Alternate route: `/v1/characters/{character_id}/attributes/`

---
This route is cached for up to 3600 seconds
*/
func (a *Client) GetCharactersCharacterIDAttributes(params *GetCharactersCharacterIDAttributesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDAttributesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_attributes",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/attributes/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDAttributesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDAttributesOK), nil

}

/*
GetCharactersCharacterIDSkillqueue gets character s skill queue

List the configured skill queue for the given character

---
Alternate route: `/dev/characters/{character_id}/skillqueue/`

Alternate route: `/legacy/characters/{character_id}/skillqueue/`

Alternate route: `/v2/characters/{character_id}/skillqueue/`

---
This route is cached for up to 120 seconds
*/
func (a *Client) GetCharactersCharacterIDSkillqueue(params *GetCharactersCharacterIDSkillqueueParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDSkillqueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDSkillqueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_skillqueue",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/skillqueue/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDSkillqueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDSkillqueueOK), nil

}

/*
GetCharactersCharacterIDSkills gets character skills

List all trained skills for the given character

---
Alternate route: `/dev/characters/{character_id}/skills/`

Alternate route: `/v4/characters/{character_id}/skills/`

---
This route is cached for up to 120 seconds
*/
func (a *Client) GetCharactersCharacterIDSkills(params *GetCharactersCharacterIDSkillsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCharactersCharacterIDSkillsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCharacterIDSkillsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_characters_character_id_skills",
		Method:             "GET",
		PathPattern:        "/characters/{character_id}/skills/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCharactersCharacterIDSkillsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCharacterIDSkillsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
