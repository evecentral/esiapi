// Code generated by go-swagger; DO NOT EDIT.

package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/evecentral/esiapi/models"
)

// PostUniverseIdsReader is a Reader for the PostUniverseIds structure.
type PostUniverseIdsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostUniverseIdsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostUniverseIdsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostUniverseIdsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 420:
		result := NewPostUniverseIdsEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPostUniverseIdsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewPostUniverseIdsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewPostUniverseIdsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostUniverseIdsOK creates a PostUniverseIdsOK with default headers values
func NewPostUniverseIdsOK() *PostUniverseIdsOK {
	return &PostUniverseIdsOK{}
}

/*PostUniverseIdsOK handles this case with default header values.

List of id/name associations for a set of names divided by category. Any name passed in that did not have a match will be ommitted.
*/
type PostUniverseIdsOK struct {
	/*The language used in the response
	 */
	ContentLanguage string

	Payload *models.PostUniverseIdsOKBody
}

func (o *PostUniverseIdsOK) Error() string {
	return fmt.Sprintf("[POST /universe/ids/][%d] postUniverseIdsOK  %+v", 200, o.Payload)
}

func (o *PostUniverseIdsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Language
	o.ContentLanguage = response.GetHeader("Content-Language")

	o.Payload = new(models.PostUniverseIdsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUniverseIdsBadRequest creates a PostUniverseIdsBadRequest with default headers values
func NewPostUniverseIdsBadRequest() *PostUniverseIdsBadRequest {
	return &PostUniverseIdsBadRequest{}
}

/*PostUniverseIdsBadRequest handles this case with default header values.

Bad request
*/
type PostUniverseIdsBadRequest struct {
	Payload *models.BadRequest
}

func (o *PostUniverseIdsBadRequest) Error() string {
	return fmt.Sprintf("[POST /universe/ids/][%d] postUniverseIdsBadRequest  %+v", 400, o.Payload)
}

func (o *PostUniverseIdsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUniverseIdsEnhanceYourCalm creates a PostUniverseIdsEnhanceYourCalm with default headers values
func NewPostUniverseIdsEnhanceYourCalm() *PostUniverseIdsEnhanceYourCalm {
	return &PostUniverseIdsEnhanceYourCalm{}
}

/*PostUniverseIdsEnhanceYourCalm handles this case with default header values.

Error limited
*/
type PostUniverseIdsEnhanceYourCalm struct {
	Payload *models.ErrorLimited
}

func (o *PostUniverseIdsEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[POST /universe/ids/][%d] postUniverseIdsEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *PostUniverseIdsEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorLimited)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUniverseIdsInternalServerError creates a PostUniverseIdsInternalServerError with default headers values
func NewPostUniverseIdsInternalServerError() *PostUniverseIdsInternalServerError {
	return &PostUniverseIdsInternalServerError{}
}

/*PostUniverseIdsInternalServerError handles this case with default header values.

Internal server error
*/
type PostUniverseIdsInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *PostUniverseIdsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /universe/ids/][%d] postUniverseIdsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostUniverseIdsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUniverseIdsServiceUnavailable creates a PostUniverseIdsServiceUnavailable with default headers values
func NewPostUniverseIdsServiceUnavailable() *PostUniverseIdsServiceUnavailable {
	return &PostUniverseIdsServiceUnavailable{}
}

/*PostUniverseIdsServiceUnavailable handles this case with default header values.

Service unavailable
*/
type PostUniverseIdsServiceUnavailable struct {
	Payload *models.ServiceUnavailable
}

func (o *PostUniverseIdsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /universe/ids/][%d] postUniverseIdsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostUniverseIdsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceUnavailable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUniverseIdsGatewayTimeout creates a PostUniverseIdsGatewayTimeout with default headers values
func NewPostUniverseIdsGatewayTimeout() *PostUniverseIdsGatewayTimeout {
	return &PostUniverseIdsGatewayTimeout{}
}

/*PostUniverseIdsGatewayTimeout handles this case with default header values.

Gateway timeout
*/
type PostUniverseIdsGatewayTimeout struct {
	Payload *models.GatewayTimeout
}

func (o *PostUniverseIdsGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /universe/ids/][%d] postUniverseIdsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PostUniverseIdsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayTimeout)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
