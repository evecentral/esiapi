// Code generated by go-swagger; DO NOT EDIT.

package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetUniverseCategoriesCategoryIDParams creates a new GetUniverseCategoriesCategoryIDParams object
// with the default values initialized.
func NewGetUniverseCategoriesCategoryIDParams() *GetUniverseCategoriesCategoryIDParams {
	var (
		acceptLanguageDefault = string("en-us")
		datasourceDefault     = string("tranquility")
		languageDefault       = string("en-us")
	)
	return &GetUniverseCategoriesCategoryIDParams{
		AcceptLanguage: &acceptLanguageDefault,
		Datasource:     &datasourceDefault,
		Language:       &languageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetUniverseCategoriesCategoryIDParamsWithTimeout creates a new GetUniverseCategoriesCategoryIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetUniverseCategoriesCategoryIDParamsWithTimeout(timeout time.Duration) *GetUniverseCategoriesCategoryIDParams {
	var (
		acceptLanguageDefault = string("en-us")
		datasourceDefault     = string("tranquility")
		languageDefault       = string("en-us")
	)
	return &GetUniverseCategoriesCategoryIDParams{
		AcceptLanguage: &acceptLanguageDefault,
		Datasource:     &datasourceDefault,
		Language:       &languageDefault,

		timeout: timeout,
	}
}

// NewGetUniverseCategoriesCategoryIDParamsWithContext creates a new GetUniverseCategoriesCategoryIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetUniverseCategoriesCategoryIDParamsWithContext(ctx context.Context) *GetUniverseCategoriesCategoryIDParams {
	var (
		acceptLanguageDefault = string("en-us")
		datasourceDefault     = string("tranquility")
		languageDefault       = string("en-us")
	)
	return &GetUniverseCategoriesCategoryIDParams{
		AcceptLanguage: &acceptLanguageDefault,
		Datasource:     &datasourceDefault,
		Language:       &languageDefault,

		Context: ctx,
	}
}

// NewGetUniverseCategoriesCategoryIDParamsWithHTTPClient creates a new GetUniverseCategoriesCategoryIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetUniverseCategoriesCategoryIDParamsWithHTTPClient(client *http.Client) *GetUniverseCategoriesCategoryIDParams {
	var (
		acceptLanguageDefault = string("en-us")
		datasourceDefault     = string("tranquility")
		languageDefault       = string("en-us")
	)
	return &GetUniverseCategoriesCategoryIDParams{
		AcceptLanguage: &acceptLanguageDefault,
		Datasource:     &datasourceDefault,
		Language:       &languageDefault,
		HTTPClient:     client,
	}
}

/*GetUniverseCategoriesCategoryIDParams contains all the parameters to send to the API endpoint
for the get universe categories category id operation typically these are written to a http.Request
*/
type GetUniverseCategoriesCategoryIDParams struct {

	/*AcceptLanguage
	  Language to use in the response

	*/
	AcceptLanguage *string
	/*IfNoneMatch
	  ETag from a previous request. A 304 will be returned if this matches the current ETag

	*/
	IfNoneMatch *string
	/*CategoryID
	  An Eve item category ID

	*/
	CategoryID int32
	/*Datasource
	  The server name you would like data from

	*/
	Datasource *string
	/*Language
	  Language to use in the response, takes precedence over Accept-Language

	*/
	Language *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get universe categories category id params
func (o *GetUniverseCategoriesCategoryIDParams) WithTimeout(timeout time.Duration) *GetUniverseCategoriesCategoryIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get universe categories category id params
func (o *GetUniverseCategoriesCategoryIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get universe categories category id params
func (o *GetUniverseCategoriesCategoryIDParams) WithContext(ctx context.Context) *GetUniverseCategoriesCategoryIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get universe categories category id params
func (o *GetUniverseCategoriesCategoryIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get universe categories category id params
func (o *GetUniverseCategoriesCategoryIDParams) WithHTTPClient(client *http.Client) *GetUniverseCategoriesCategoryIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get universe categories category id params
func (o *GetUniverseCategoriesCategoryIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAcceptLanguage adds the acceptLanguage to the get universe categories category id params
func (o *GetUniverseCategoriesCategoryIDParams) WithAcceptLanguage(acceptLanguage *string) *GetUniverseCategoriesCategoryIDParams {
	o.SetAcceptLanguage(acceptLanguage)
	return o
}

// SetAcceptLanguage adds the acceptLanguage to the get universe categories category id params
func (o *GetUniverseCategoriesCategoryIDParams) SetAcceptLanguage(acceptLanguage *string) {
	o.AcceptLanguage = acceptLanguage
}

// WithIfNoneMatch adds the ifNoneMatch to the get universe categories category id params
func (o *GetUniverseCategoriesCategoryIDParams) WithIfNoneMatch(ifNoneMatch *string) *GetUniverseCategoriesCategoryIDParams {
	o.SetIfNoneMatch(ifNoneMatch)
	return o
}

// SetIfNoneMatch adds the ifNoneMatch to the get universe categories category id params
func (o *GetUniverseCategoriesCategoryIDParams) SetIfNoneMatch(ifNoneMatch *string) {
	o.IfNoneMatch = ifNoneMatch
}

// WithCategoryID adds the categoryID to the get universe categories category id params
func (o *GetUniverseCategoriesCategoryIDParams) WithCategoryID(categoryID int32) *GetUniverseCategoriesCategoryIDParams {
	o.SetCategoryID(categoryID)
	return o
}

// SetCategoryID adds the categoryId to the get universe categories category id params
func (o *GetUniverseCategoriesCategoryIDParams) SetCategoryID(categoryID int32) {
	o.CategoryID = categoryID
}

// WithDatasource adds the datasource to the get universe categories category id params
func (o *GetUniverseCategoriesCategoryIDParams) WithDatasource(datasource *string) *GetUniverseCategoriesCategoryIDParams {
	o.SetDatasource(datasource)
	return o
}

// SetDatasource adds the datasource to the get universe categories category id params
func (o *GetUniverseCategoriesCategoryIDParams) SetDatasource(datasource *string) {
	o.Datasource = datasource
}

// WithLanguage adds the language to the get universe categories category id params
func (o *GetUniverseCategoriesCategoryIDParams) WithLanguage(language *string) *GetUniverseCategoriesCategoryIDParams {
	o.SetLanguage(language)
	return o
}

// SetLanguage adds the language to the get universe categories category id params
func (o *GetUniverseCategoriesCategoryIDParams) SetLanguage(language *string) {
	o.Language = language
}

// WriteToRequest writes these params to a swagger request
func (o *GetUniverseCategoriesCategoryIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AcceptLanguage != nil {

		// header param Accept-Language
		if err := r.SetHeaderParam("Accept-Language", *o.AcceptLanguage); err != nil {
			return err
		}

	}

	if o.IfNoneMatch != nil {

		// header param If-None-Match
		if err := r.SetHeaderParam("If-None-Match", *o.IfNoneMatch); err != nil {
			return err
		}

	}

	// path param category_id
	if err := r.SetPathParam("category_id", swag.FormatInt32(o.CategoryID)); err != nil {
		return err
	}

	if o.Datasource != nil {

		// query param datasource
		var qrDatasource string
		if o.Datasource != nil {
			qrDatasource = *o.Datasource
		}
		qDatasource := qrDatasource
		if qDatasource != "" {
			if err := r.SetQueryParam("datasource", qDatasource); err != nil {
				return err
			}
		}

	}

	if o.Language != nil {

		// query param language
		var qrLanguage string
		if o.Language != nil {
			qrLanguage = *o.Language
		}
		qLanguage := qrLanguage
		if qLanguage != "" {
			if err := r.SetQueryParam("language", qLanguage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
