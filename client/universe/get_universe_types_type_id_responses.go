// Code generated by go-swagger; DO NOT EDIT.

package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/evecentral/esiapi/models"
)

// GetUniverseTypesTypeIDReader is a Reader for the GetUniverseTypesTypeID structure.
type GetUniverseTypesTypeIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUniverseTypesTypeIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetUniverseTypesTypeIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 304:
		result := NewGetUniverseTypesTypeIDNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 400:
		result := NewGetUniverseTypesTypeIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetUniverseTypesTypeIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 420:
		result := NewGetUniverseTypesTypeIDEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetUniverseTypesTypeIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewGetUniverseTypesTypeIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewGetUniverseTypesTypeIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetUniverseTypesTypeIDOK creates a GetUniverseTypesTypeIDOK with default headers values
func NewGetUniverseTypesTypeIDOK() *GetUniverseTypesTypeIDOK {
	return &GetUniverseTypesTypeIDOK{}
}

/*GetUniverseTypesTypeIDOK handles this case with default header values.

Information about a type
*/
type GetUniverseTypesTypeIDOK struct {
	/*The caching mechanism used
	 */
	CacheControl string
	/*The language used in the response
	 */
	ContentLanguage string
	/*RFC7232 compliant entity tag
	 */
	ETag string
	/*RFC7231 formatted datetime string
	 */
	Expires string
	/*RFC7231 formatted datetime string
	 */
	LastModified string

	Payload *models.GetUniverseTypesTypeIDOKBody
}

func (o *GetUniverseTypesTypeIDOK) Error() string {
	return fmt.Sprintf("[GET /universe/types/{type_id}/][%d] getUniverseTypesTypeIdOK  %+v", 200, o.Payload)
}

func (o *GetUniverseTypesTypeIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Cache-Control
	o.CacheControl = response.GetHeader("Cache-Control")

	// response header Content-Language
	o.ContentLanguage = response.GetHeader("Content-Language")

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	// response header Expires
	o.Expires = response.GetHeader("Expires")

	// response header Last-Modified
	o.LastModified = response.GetHeader("Last-Modified")

	o.Payload = new(models.GetUniverseTypesTypeIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUniverseTypesTypeIDNotModified creates a GetUniverseTypesTypeIDNotModified with default headers values
func NewGetUniverseTypesTypeIDNotModified() *GetUniverseTypesTypeIDNotModified {
	return &GetUniverseTypesTypeIDNotModified{}
}

/*GetUniverseTypesTypeIDNotModified handles this case with default header values.

Not modified
*/
type GetUniverseTypesTypeIDNotModified struct {
	/*The caching mechanism used
	 */
	CacheControl string
	/*RFC7232 compliant entity tag
	 */
	ETag string
	/*RFC7231 formatted datetime string
	 */
	Expires string
	/*RFC7231 formatted datetime string
	 */
	LastModified string
}

func (o *GetUniverseTypesTypeIDNotModified) Error() string {
	return fmt.Sprintf("[GET /universe/types/{type_id}/][%d] getUniverseTypesTypeIdNotModified ", 304)
}

func (o *GetUniverseTypesTypeIDNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Cache-Control
	o.CacheControl = response.GetHeader("Cache-Control")

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	// response header Expires
	o.Expires = response.GetHeader("Expires")

	// response header Last-Modified
	o.LastModified = response.GetHeader("Last-Modified")

	return nil
}

// NewGetUniverseTypesTypeIDBadRequest creates a GetUniverseTypesTypeIDBadRequest with default headers values
func NewGetUniverseTypesTypeIDBadRequest() *GetUniverseTypesTypeIDBadRequest {
	return &GetUniverseTypesTypeIDBadRequest{}
}

/*GetUniverseTypesTypeIDBadRequest handles this case with default header values.

Bad request
*/
type GetUniverseTypesTypeIDBadRequest struct {
	Payload *models.BadRequest
}

func (o *GetUniverseTypesTypeIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /universe/types/{type_id}/][%d] getUniverseTypesTypeIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetUniverseTypesTypeIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUniverseTypesTypeIDNotFound creates a GetUniverseTypesTypeIDNotFound with default headers values
func NewGetUniverseTypesTypeIDNotFound() *GetUniverseTypesTypeIDNotFound {
	return &GetUniverseTypesTypeIDNotFound{}
}

/*GetUniverseTypesTypeIDNotFound handles this case with default header values.

Type not found
*/
type GetUniverseTypesTypeIDNotFound struct {
	Payload *models.GetUniverseTypesTypeIDNotFoundBody
}

func (o *GetUniverseTypesTypeIDNotFound) Error() string {
	return fmt.Sprintf("[GET /universe/types/{type_id}/][%d] getUniverseTypesTypeIdNotFound  %+v", 404, o.Payload)
}

func (o *GetUniverseTypesTypeIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetUniverseTypesTypeIDNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUniverseTypesTypeIDEnhanceYourCalm creates a GetUniverseTypesTypeIDEnhanceYourCalm with default headers values
func NewGetUniverseTypesTypeIDEnhanceYourCalm() *GetUniverseTypesTypeIDEnhanceYourCalm {
	return &GetUniverseTypesTypeIDEnhanceYourCalm{}
}

/*GetUniverseTypesTypeIDEnhanceYourCalm handles this case with default header values.

Error limited
*/
type GetUniverseTypesTypeIDEnhanceYourCalm struct {
	Payload *models.ErrorLimited
}

func (o *GetUniverseTypesTypeIDEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[GET /universe/types/{type_id}/][%d] getUniverseTypesTypeIdEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *GetUniverseTypesTypeIDEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorLimited)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUniverseTypesTypeIDInternalServerError creates a GetUniverseTypesTypeIDInternalServerError with default headers values
func NewGetUniverseTypesTypeIDInternalServerError() *GetUniverseTypesTypeIDInternalServerError {
	return &GetUniverseTypesTypeIDInternalServerError{}
}

/*GetUniverseTypesTypeIDInternalServerError handles this case with default header values.

Internal server error
*/
type GetUniverseTypesTypeIDInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *GetUniverseTypesTypeIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /universe/types/{type_id}/][%d] getUniverseTypesTypeIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUniverseTypesTypeIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUniverseTypesTypeIDServiceUnavailable creates a GetUniverseTypesTypeIDServiceUnavailable with default headers values
func NewGetUniverseTypesTypeIDServiceUnavailable() *GetUniverseTypesTypeIDServiceUnavailable {
	return &GetUniverseTypesTypeIDServiceUnavailable{}
}

/*GetUniverseTypesTypeIDServiceUnavailable handles this case with default header values.

Service unavailable
*/
type GetUniverseTypesTypeIDServiceUnavailable struct {
	Payload *models.ServiceUnavailable
}

func (o *GetUniverseTypesTypeIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /universe/types/{type_id}/][%d] getUniverseTypesTypeIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetUniverseTypesTypeIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceUnavailable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUniverseTypesTypeIDGatewayTimeout creates a GetUniverseTypesTypeIDGatewayTimeout with default headers values
func NewGetUniverseTypesTypeIDGatewayTimeout() *GetUniverseTypesTypeIDGatewayTimeout {
	return &GetUniverseTypesTypeIDGatewayTimeout{}
}

/*GetUniverseTypesTypeIDGatewayTimeout handles this case with default header values.

Gateway timeout
*/
type GetUniverseTypesTypeIDGatewayTimeout struct {
	Payload *models.GatewayTimeout
}

func (o *GetUniverseTypesTypeIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /universe/types/{type_id}/][%d] getUniverseTypesTypeIdGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetUniverseTypesTypeIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayTimeout)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
