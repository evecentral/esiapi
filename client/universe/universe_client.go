// Code generated by go-swagger; DO NOT EDIT.

package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new universe API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for universe API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetUniverseAncestries gets ancestries

Get all character ancestries

---
Alternate route: `/dev/universe/ancestries/`

Alternate route: `/legacy/universe/ancestries/`

Alternate route: `/v1/universe/ancestries/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseAncestries(params *GetUniverseAncestriesParams) (*GetUniverseAncestriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseAncestriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_ancestries",
		Method:             "GET",
		PathPattern:        "/universe/ancestries/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseAncestriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseAncestriesOK), nil

}

/*
GetUniverseAsteroidBeltsAsteroidBeltID gets asteroid belt information

Get information on an asteroid belt

---
Alternate route: `/dev/universe/asteroid_belts/{asteroid_belt_id}/`

Alternate route: `/legacy/universe/asteroid_belts/{asteroid_belt_id}/`

Alternate route: `/v1/universe/asteroid_belts/{asteroid_belt_id}/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseAsteroidBeltsAsteroidBeltID(params *GetUniverseAsteroidBeltsAsteroidBeltIDParams) (*GetUniverseAsteroidBeltsAsteroidBeltIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseAsteroidBeltsAsteroidBeltIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_asteroid_belts_asteroid_belt_id",
		Method:             "GET",
		PathPattern:        "/universe/asteroid_belts/{asteroid_belt_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseAsteroidBeltsAsteroidBeltIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseAsteroidBeltsAsteroidBeltIDOK), nil

}

/*
GetUniverseBloodlines gets bloodlines

Get a list of bloodlines

---
Alternate route: `/dev/universe/bloodlines/`

Alternate route: `/legacy/universe/bloodlines/`

Alternate route: `/v1/universe/bloodlines/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseBloodlines(params *GetUniverseBloodlinesParams) (*GetUniverseBloodlinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseBloodlinesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_bloodlines",
		Method:             "GET",
		PathPattern:        "/universe/bloodlines/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseBloodlinesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseBloodlinesOK), nil

}

/*
GetUniverseCategories gets item categories

Get a list of item categories

---
Alternate route: `/dev/universe/categories/`

Alternate route: `/legacy/universe/categories/`

Alternate route: `/v1/universe/categories/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseCategories(params *GetUniverseCategoriesParams) (*GetUniverseCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseCategoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_categories",
		Method:             "GET",
		PathPattern:        "/universe/categories/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseCategoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseCategoriesOK), nil

}

/*
GetUniverseCategoriesCategoryID gets item category information

Get information of an item category

---
Alternate route: `/dev/universe/categories/{category_id}/`

Alternate route: `/legacy/universe/categories/{category_id}/`

Alternate route: `/v1/universe/categories/{category_id}/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseCategoriesCategoryID(params *GetUniverseCategoriesCategoryIDParams) (*GetUniverseCategoriesCategoryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseCategoriesCategoryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_categories_category_id",
		Method:             "GET",
		PathPattern:        "/universe/categories/{category_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseCategoriesCategoryIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseCategoriesCategoryIDOK), nil

}

/*
GetUniverseConstellations gets constellations

Get a list of constellations

---
Alternate route: `/dev/universe/constellations/`

Alternate route: `/legacy/universe/constellations/`

Alternate route: `/v1/universe/constellations/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseConstellations(params *GetUniverseConstellationsParams) (*GetUniverseConstellationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseConstellationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_constellations",
		Method:             "GET",
		PathPattern:        "/universe/constellations/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseConstellationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseConstellationsOK), nil

}

/*
GetUniverseConstellationsConstellationID gets constellation information

Get information on a constellation

---
Alternate route: `/dev/universe/constellations/{constellation_id}/`

Alternate route: `/legacy/universe/constellations/{constellation_id}/`

Alternate route: `/v1/universe/constellations/{constellation_id}/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseConstellationsConstellationID(params *GetUniverseConstellationsConstellationIDParams) (*GetUniverseConstellationsConstellationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseConstellationsConstellationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_constellations_constellation_id",
		Method:             "GET",
		PathPattern:        "/universe/constellations/{constellation_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseConstellationsConstellationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseConstellationsConstellationIDOK), nil

}

/*
GetUniverseFactions gets factions

Get a list of factions

---
Alternate route: `/dev/universe/factions/`

Alternate route: `/v2/universe/factions/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseFactions(params *GetUniverseFactionsParams) (*GetUniverseFactionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseFactionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_factions",
		Method:             "GET",
		PathPattern:        "/universe/factions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseFactionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseFactionsOK), nil

}

/*
GetUniverseGraphics gets graphics

Get a list of graphics

---
Alternate route: `/dev/universe/graphics/`

Alternate route: `/legacy/universe/graphics/`

Alternate route: `/v1/universe/graphics/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseGraphics(params *GetUniverseGraphicsParams) (*GetUniverseGraphicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseGraphicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_graphics",
		Method:             "GET",
		PathPattern:        "/universe/graphics/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseGraphicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseGraphicsOK), nil

}

/*
GetUniverseGraphicsGraphicID gets graphic information

Get information on a graphic

---
Alternate route: `/dev/universe/graphics/{graphic_id}/`

Alternate route: `/legacy/universe/graphics/{graphic_id}/`

Alternate route: `/v1/universe/graphics/{graphic_id}/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseGraphicsGraphicID(params *GetUniverseGraphicsGraphicIDParams) (*GetUniverseGraphicsGraphicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseGraphicsGraphicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_graphics_graphic_id",
		Method:             "GET",
		PathPattern:        "/universe/graphics/{graphic_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseGraphicsGraphicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseGraphicsGraphicIDOK), nil

}

/*
GetUniverseGroups gets item groups

Get a list of item groups

---
Alternate route: `/dev/universe/groups/`

Alternate route: `/legacy/universe/groups/`

Alternate route: `/v1/universe/groups/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseGroups(params *GetUniverseGroupsParams) (*GetUniverseGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_groups",
		Method:             "GET",
		PathPattern:        "/universe/groups/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseGroupsOK), nil

}

/*
GetUniverseGroupsGroupID gets item group information

Get information on an item group

---
Alternate route: `/dev/universe/groups/{group_id}/`

Alternate route: `/legacy/universe/groups/{group_id}/`

Alternate route: `/v1/universe/groups/{group_id}/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseGroupsGroupID(params *GetUniverseGroupsGroupIDParams) (*GetUniverseGroupsGroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseGroupsGroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_groups_group_id",
		Method:             "GET",
		PathPattern:        "/universe/groups/{group_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseGroupsGroupIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseGroupsGroupIDOK), nil

}

/*
GetUniverseMoonsMoonID gets moon information

Get information on a moon

---
Alternate route: `/dev/universe/moons/{moon_id}/`

Alternate route: `/legacy/universe/moons/{moon_id}/`

Alternate route: `/v1/universe/moons/{moon_id}/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseMoonsMoonID(params *GetUniverseMoonsMoonIDParams) (*GetUniverseMoonsMoonIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseMoonsMoonIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_moons_moon_id",
		Method:             "GET",
		PathPattern:        "/universe/moons/{moon_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseMoonsMoonIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseMoonsMoonIDOK), nil

}

/*
GetUniversePlanetsPlanetID gets planet information

Get information on a planet

---
Alternate route: `/dev/universe/planets/{planet_id}/`

Alternate route: `/legacy/universe/planets/{planet_id}/`

Alternate route: `/v1/universe/planets/{planet_id}/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniversePlanetsPlanetID(params *GetUniversePlanetsPlanetIDParams) (*GetUniversePlanetsPlanetIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniversePlanetsPlanetIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_planets_planet_id",
		Method:             "GET",
		PathPattern:        "/universe/planets/{planet_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniversePlanetsPlanetIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniversePlanetsPlanetIDOK), nil

}

/*
GetUniverseRaces gets character races

Get a list of character races

---
Alternate route: `/dev/universe/races/`

Alternate route: `/legacy/universe/races/`

Alternate route: `/v1/universe/races/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseRaces(params *GetUniverseRacesParams) (*GetUniverseRacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseRacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_races",
		Method:             "GET",
		PathPattern:        "/universe/races/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseRacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseRacesOK), nil

}

/*
GetUniverseRegions gets regions

Get a list of regions

---
Alternate route: `/dev/universe/regions/`

Alternate route: `/legacy/universe/regions/`

Alternate route: `/v1/universe/regions/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseRegions(params *GetUniverseRegionsParams) (*GetUniverseRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_regions",
		Method:             "GET",
		PathPattern:        "/universe/regions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseRegionsOK), nil

}

/*
GetUniverseRegionsRegionID gets region information

Get information on a region

---
Alternate route: `/dev/universe/regions/{region_id}/`

Alternate route: `/legacy/universe/regions/{region_id}/`

Alternate route: `/v1/universe/regions/{region_id}/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseRegionsRegionID(params *GetUniverseRegionsRegionIDParams) (*GetUniverseRegionsRegionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseRegionsRegionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_regions_region_id",
		Method:             "GET",
		PathPattern:        "/universe/regions/{region_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseRegionsRegionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseRegionsRegionIDOK), nil

}

/*
GetUniverseStargatesStargateID gets stargate information

Get information on a stargate

---
Alternate route: `/dev/universe/stargates/{stargate_id}/`

Alternate route: `/legacy/universe/stargates/{stargate_id}/`

Alternate route: `/v1/universe/stargates/{stargate_id}/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseStargatesStargateID(params *GetUniverseStargatesStargateIDParams) (*GetUniverseStargatesStargateIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseStargatesStargateIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_stargates_stargate_id",
		Method:             "GET",
		PathPattern:        "/universe/stargates/{stargate_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseStargatesStargateIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseStargatesStargateIDOK), nil

}

/*
GetUniverseStarsStarID gets star information

Get information on a star

---
Alternate route: `/dev/universe/stars/{star_id}/`

Alternate route: `/legacy/universe/stars/{star_id}/`

Alternate route: `/v1/universe/stars/{star_id}/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseStarsStarID(params *GetUniverseStarsStarIDParams) (*GetUniverseStarsStarIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseStarsStarIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_stars_star_id",
		Method:             "GET",
		PathPattern:        "/universe/stars/{star_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseStarsStarIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseStarsStarIDOK), nil

}

/*
GetUniverseStationsStationID gets station information

Get information on a station

---
Alternate route: `/dev/universe/stations/{station_id}/`

Alternate route: `/v2/universe/stations/{station_id}/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseStationsStationID(params *GetUniverseStationsStationIDParams) (*GetUniverseStationsStationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseStationsStationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_stations_station_id",
		Method:             "GET",
		PathPattern:        "/universe/stations/{station_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseStationsStationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseStationsStationIDOK), nil

}

/*
GetUniverseStructures lists all public structures

List all public structures

---
Alternate route: `/dev/universe/structures/`

Alternate route: `/legacy/universe/structures/`

Alternate route: `/v1/universe/structures/`

---
This route is cached for up to 3600 seconds
*/
func (a *Client) GetUniverseStructures(params *GetUniverseStructuresParams) (*GetUniverseStructuresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseStructuresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_structures",
		Method:             "GET",
		PathPattern:        "/universe/structures/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseStructuresReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseStructuresOK), nil

}

/*
GetUniverseStructuresStructureID gets structure information

Returns information on requested structure, if you are on the ACL. Otherwise, returns "Forbidden" for all inputs.

---
Alternate route: `/legacy/universe/structures/{structure_id}/`

Alternate route: `/v1/universe/structures/{structure_id}/`

---
This route is cached for up to 3600 seconds

---
Warning: This route has an upgrade available.

---
[Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/universe/structures/{structure_id}/)
*/
func (a *Client) GetUniverseStructuresStructureID(params *GetUniverseStructuresStructureIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetUniverseStructuresStructureIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseStructuresStructureIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_structures_structure_id",
		Method:             "GET",
		PathPattern:        "/universe/structures/{structure_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseStructuresStructureIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseStructuresStructureIDOK), nil

}

/*
GetUniverseSystemJumps gets system jumps

Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed

---
Alternate route: `/dev/universe/system_jumps/`

Alternate route: `/legacy/universe/system_jumps/`

Alternate route: `/v1/universe/system_jumps/`

---
This route is cached for up to 3600 seconds
*/
func (a *Client) GetUniverseSystemJumps(params *GetUniverseSystemJumpsParams) (*GetUniverseSystemJumpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseSystemJumpsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_system_jumps",
		Method:             "GET",
		PathPattern:        "/universe/system_jumps/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseSystemJumpsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseSystemJumpsOK), nil

}

/*
GetUniverseSystemKills gets system kills

Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed

---
Alternate route: `/dev/universe/system_kills/`

Alternate route: `/v2/universe/system_kills/`

---
This route is cached for up to 3600 seconds
*/
func (a *Client) GetUniverseSystemKills(params *GetUniverseSystemKillsParams) (*GetUniverseSystemKillsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseSystemKillsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_system_kills",
		Method:             "GET",
		PathPattern:        "/universe/system_kills/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseSystemKillsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseSystemKillsOK), nil

}

/*
GetUniverseSystems gets solar systems

Get a list of solar systems

---
Alternate route: `/dev/universe/systems/`

Alternate route: `/legacy/universe/systems/`

Alternate route: `/v1/universe/systems/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseSystems(params *GetUniverseSystemsParams) (*GetUniverseSystemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseSystemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_systems",
		Method:             "GET",
		PathPattern:        "/universe/systems/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseSystemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseSystemsOK), nil

}

/*
GetUniverseSystemsSystemID gets solar system information

Get information on a solar system. NOTE: This route does not work with abyssal systems.

---
Alternate route: `/v3/universe/systems/{system_id}/`

---
This route expires daily at 11:05

---
Warning: This route has an upgrade available.

---
[Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/universe/systems/{system_id}/)
*/
func (a *Client) GetUniverseSystemsSystemID(params *GetUniverseSystemsSystemIDParams) (*GetUniverseSystemsSystemIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseSystemsSystemIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_systems_system_id",
		Method:             "GET",
		PathPattern:        "/universe/systems/{system_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseSystemsSystemIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseSystemsSystemIDOK), nil

}

/*
GetUniverseTypes gets types

Get a list of type ids

---
Alternate route: `/dev/universe/types/`

Alternate route: `/legacy/universe/types/`

Alternate route: `/v1/universe/types/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseTypes(params *GetUniverseTypesParams) (*GetUniverseTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_types",
		Method:             "GET",
		PathPattern:        "/universe/types/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseTypesOK), nil

}

/*
GetUniverseTypesTypeID gets type information

Get information on a type

---
Alternate route: `/dev/universe/types/{type_id}/`

Alternate route: `/v3/universe/types/{type_id}/`

---
This route expires daily at 11:05
*/
func (a *Client) GetUniverseTypesTypeID(params *GetUniverseTypesTypeIDParams) (*GetUniverseTypesTypeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseTypesTypeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_universe_types_type_id",
		Method:             "GET",
		PathPattern:        "/universe/types/{type_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUniverseTypesTypeIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUniverseTypesTypeIDOK), nil

}

/*
PostUniverseIds bulks names to ids

Resolve a set of names to IDs in the following categories: agents, alliances, characters, constellations, corporations factions, inventory_types, regions, stations, and systems. Only exact matches will be returned. All names searched for are cached for 12 hours.

---
Alternate route: `/dev/universe/ids/`

Alternate route: `/legacy/universe/ids/`

Alternate route: `/v1/universe/ids/`

*/
func (a *Client) PostUniverseIds(params *PostUniverseIdsParams) (*PostUniverseIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUniverseIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post_universe_ids",
		Method:             "POST",
		PathPattern:        "/universe/ids/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUniverseIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUniverseIdsOK), nil

}

/*
PostUniverseNames gets names and categories for a set of ID s

Resolve a set of IDs to names and categories. Supported ID's for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.

---
Alternate route: `/dev/universe/names/`

Alternate route: `/v2/universe/names/`

*/
func (a *Client) PostUniverseNames(params *PostUniverseNamesParams) (*PostUniverseNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUniverseNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post_universe_names",
		Method:             "POST",
		PathPattern:        "/universe/names/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUniverseNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUniverseNamesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
