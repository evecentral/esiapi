// Code generated by go-swagger; DO NOT EDIT.

package corporation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/evecentral/esiapi/models"
)

// GetCorporationsCorporationIDContainersLogsReader is a Reader for the GetCorporationsCorporationIDContainersLogs structure.
type GetCorporationsCorporationIDContainersLogsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCorporationsCorporationIDContainersLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetCorporationsCorporationIDContainersLogsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 304:
		result := NewGetCorporationsCorporationIDContainersLogsNotModified()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 400:
		result := NewGetCorporationsCorporationIDContainersLogsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetCorporationsCorporationIDContainersLogsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetCorporationsCorporationIDContainersLogsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 420:
		result := NewGetCorporationsCorporationIDContainersLogsEnhanceYourCalm()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetCorporationsCorporationIDContainersLogsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewGetCorporationsCorporationIDContainersLogsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewGetCorporationsCorporationIDContainersLogsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCorporationsCorporationIDContainersLogsOK creates a GetCorporationsCorporationIDContainersLogsOK with default headers values
func NewGetCorporationsCorporationIDContainersLogsOK() *GetCorporationsCorporationIDContainersLogsOK {
	return &GetCorporationsCorporationIDContainersLogsOK{
		XPages: 1,
	}
}

/*GetCorporationsCorporationIDContainersLogsOK handles this case with default header values.

List of corporation ALSC logs
*/
type GetCorporationsCorporationIDContainersLogsOK struct {
	/*The caching mechanism used
	 */
	CacheControl string
	/*RFC7232 compliant entity tag
	 */
	ETag string
	/*RFC7231 formatted datetime string
	 */
	Expires string
	/*RFC7231 formatted datetime string
	 */
	LastModified string
	/*Maximum page number
	 */
	XPages int32

	Payload []*models.GetCorporationsCorporationIDContainersLogsOKBodyItems
}

func (o *GetCorporationsCorporationIDContainersLogsOK) Error() string {
	return fmt.Sprintf("[GET /corporations/{corporation_id}/containers/logs/][%d] getCorporationsCorporationIdContainersLogsOK  %+v", 200, o.Payload)
}

func (o *GetCorporationsCorporationIDContainersLogsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Cache-Control
	o.CacheControl = response.GetHeader("Cache-Control")

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	// response header Expires
	o.Expires = response.GetHeader("Expires")

	// response header Last-Modified
	o.LastModified = response.GetHeader("Last-Modified")

	// response header X-Pages
	xPages, err := swag.ConvertInt32(response.GetHeader("X-Pages"))
	if err != nil {
		return errors.InvalidType("X-Pages", "header", "int32", response.GetHeader("X-Pages"))
	}
	o.XPages = xPages

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationsCorporationIDContainersLogsNotModified creates a GetCorporationsCorporationIDContainersLogsNotModified with default headers values
func NewGetCorporationsCorporationIDContainersLogsNotModified() *GetCorporationsCorporationIDContainersLogsNotModified {
	return &GetCorporationsCorporationIDContainersLogsNotModified{}
}

/*GetCorporationsCorporationIDContainersLogsNotModified handles this case with default header values.

Not modified
*/
type GetCorporationsCorporationIDContainersLogsNotModified struct {
	/*The caching mechanism used
	 */
	CacheControl string
	/*RFC7232 compliant entity tag
	 */
	ETag string
	/*RFC7231 formatted datetime string
	 */
	Expires string
	/*RFC7231 formatted datetime string
	 */
	LastModified string
}

func (o *GetCorporationsCorporationIDContainersLogsNotModified) Error() string {
	return fmt.Sprintf("[GET /corporations/{corporation_id}/containers/logs/][%d] getCorporationsCorporationIdContainersLogsNotModified ", 304)
}

func (o *GetCorporationsCorporationIDContainersLogsNotModified) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Cache-Control
	o.CacheControl = response.GetHeader("Cache-Control")

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	// response header Expires
	o.Expires = response.GetHeader("Expires")

	// response header Last-Modified
	o.LastModified = response.GetHeader("Last-Modified")

	return nil
}

// NewGetCorporationsCorporationIDContainersLogsBadRequest creates a GetCorporationsCorporationIDContainersLogsBadRequest with default headers values
func NewGetCorporationsCorporationIDContainersLogsBadRequest() *GetCorporationsCorporationIDContainersLogsBadRequest {
	return &GetCorporationsCorporationIDContainersLogsBadRequest{}
}

/*GetCorporationsCorporationIDContainersLogsBadRequest handles this case with default header values.

Bad request
*/
type GetCorporationsCorporationIDContainersLogsBadRequest struct {
	Payload *models.BadRequest
}

func (o *GetCorporationsCorporationIDContainersLogsBadRequest) Error() string {
	return fmt.Sprintf("[GET /corporations/{corporation_id}/containers/logs/][%d] getCorporationsCorporationIdContainersLogsBadRequest  %+v", 400, o.Payload)
}

func (o *GetCorporationsCorporationIDContainersLogsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationsCorporationIDContainersLogsUnauthorized creates a GetCorporationsCorporationIDContainersLogsUnauthorized with default headers values
func NewGetCorporationsCorporationIDContainersLogsUnauthorized() *GetCorporationsCorporationIDContainersLogsUnauthorized {
	return &GetCorporationsCorporationIDContainersLogsUnauthorized{}
}

/*GetCorporationsCorporationIDContainersLogsUnauthorized handles this case with default header values.

Unauthorized
*/
type GetCorporationsCorporationIDContainersLogsUnauthorized struct {
	Payload *models.Unauthorized
}

func (o *GetCorporationsCorporationIDContainersLogsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /corporations/{corporation_id}/containers/logs/][%d] getCorporationsCorporationIdContainersLogsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCorporationsCorporationIDContainersLogsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Unauthorized)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationsCorporationIDContainersLogsForbidden creates a GetCorporationsCorporationIDContainersLogsForbidden with default headers values
func NewGetCorporationsCorporationIDContainersLogsForbidden() *GetCorporationsCorporationIDContainersLogsForbidden {
	return &GetCorporationsCorporationIDContainersLogsForbidden{}
}

/*GetCorporationsCorporationIDContainersLogsForbidden handles this case with default header values.

Forbidden
*/
type GetCorporationsCorporationIDContainersLogsForbidden struct {
	Payload *models.Forbidden
}

func (o *GetCorporationsCorporationIDContainersLogsForbidden) Error() string {
	return fmt.Sprintf("[GET /corporations/{corporation_id}/containers/logs/][%d] getCorporationsCorporationIdContainersLogsForbidden  %+v", 403, o.Payload)
}

func (o *GetCorporationsCorporationIDContainersLogsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Forbidden)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationsCorporationIDContainersLogsEnhanceYourCalm creates a GetCorporationsCorporationIDContainersLogsEnhanceYourCalm with default headers values
func NewGetCorporationsCorporationIDContainersLogsEnhanceYourCalm() *GetCorporationsCorporationIDContainersLogsEnhanceYourCalm {
	return &GetCorporationsCorporationIDContainersLogsEnhanceYourCalm{}
}

/*GetCorporationsCorporationIDContainersLogsEnhanceYourCalm handles this case with default header values.

Error limited
*/
type GetCorporationsCorporationIDContainersLogsEnhanceYourCalm struct {
	Payload *models.ErrorLimited
}

func (o *GetCorporationsCorporationIDContainersLogsEnhanceYourCalm) Error() string {
	return fmt.Sprintf("[GET /corporations/{corporation_id}/containers/logs/][%d] getCorporationsCorporationIdContainersLogsEnhanceYourCalm  %+v", 420, o.Payload)
}

func (o *GetCorporationsCorporationIDContainersLogsEnhanceYourCalm) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorLimited)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationsCorporationIDContainersLogsInternalServerError creates a GetCorporationsCorporationIDContainersLogsInternalServerError with default headers values
func NewGetCorporationsCorporationIDContainersLogsInternalServerError() *GetCorporationsCorporationIDContainersLogsInternalServerError {
	return &GetCorporationsCorporationIDContainersLogsInternalServerError{}
}

/*GetCorporationsCorporationIDContainersLogsInternalServerError handles this case with default header values.

Internal server error
*/
type GetCorporationsCorporationIDContainersLogsInternalServerError struct {
	Payload *models.InternalServerError
}

func (o *GetCorporationsCorporationIDContainersLogsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /corporations/{corporation_id}/containers/logs/][%d] getCorporationsCorporationIdContainersLogsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCorporationsCorporationIDContainersLogsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationsCorporationIDContainersLogsServiceUnavailable creates a GetCorporationsCorporationIDContainersLogsServiceUnavailable with default headers values
func NewGetCorporationsCorporationIDContainersLogsServiceUnavailable() *GetCorporationsCorporationIDContainersLogsServiceUnavailable {
	return &GetCorporationsCorporationIDContainersLogsServiceUnavailable{}
}

/*GetCorporationsCorporationIDContainersLogsServiceUnavailable handles this case with default header values.

Service unavailable
*/
type GetCorporationsCorporationIDContainersLogsServiceUnavailable struct {
	Payload *models.ServiceUnavailable
}

func (o *GetCorporationsCorporationIDContainersLogsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /corporations/{corporation_id}/containers/logs/][%d] getCorporationsCorporationIdContainersLogsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetCorporationsCorporationIDContainersLogsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceUnavailable)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCorporationsCorporationIDContainersLogsGatewayTimeout creates a GetCorporationsCorporationIDContainersLogsGatewayTimeout with default headers values
func NewGetCorporationsCorporationIDContainersLogsGatewayTimeout() *GetCorporationsCorporationIDContainersLogsGatewayTimeout {
	return &GetCorporationsCorporationIDContainersLogsGatewayTimeout{}
}

/*GetCorporationsCorporationIDContainersLogsGatewayTimeout handles this case with default header values.

Gateway timeout
*/
type GetCorporationsCorporationIDContainersLogsGatewayTimeout struct {
	Payload *models.GatewayTimeout
}

func (o *GetCorporationsCorporationIDContainersLogsGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /corporations/{corporation_id}/containers/logs/][%d] getCorporationsCorporationIdContainersLogsGatewayTimeout  %+v", 504, o.Payload)
}

func (o *GetCorporationsCorporationIDContainersLogsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayTimeout)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
