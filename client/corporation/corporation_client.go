// Code generated by go-swagger; DO NOT EDIT.

package corporation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new corporation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for corporation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetCorporationsCorporationID gets corporation information

Public information about a corporation

---
Alternate route: `/dev/corporations/{corporation_id}/`

Alternate route: `/v4/corporations/{corporation_id}/`

---
This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsCorporationID(params *GetCorporationsCorporationIDParams) (*GetCorporationsCorporationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDOK), nil

}

/*
GetCorporationsCorporationIDAlliancehistory gets alliance history

Get a list of all the alliances a corporation has been a member of

---
Alternate route: `/dev/corporations/{corporation_id}/alliancehistory/`

Alternate route: `/v2/corporations/{corporation_id}/alliancehistory/`

---
This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsCorporationIDAlliancehistory(params *GetCorporationsCorporationIDAlliancehistoryParams) (*GetCorporationsCorporationIDAlliancehistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDAlliancehistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_alliancehistory",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/alliancehistory/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDAlliancehistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDAlliancehistoryOK), nil

}

/*
GetCorporationsCorporationIDBlueprints gets corporation blueprints

Returns a list of blueprints the corporation owns

---
Alternate route: `/dev/corporations/{corporation_id}/blueprints/`

Alternate route: `/v2/corporations/{corporation_id}/blueprints/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

*/
func (a *Client) GetCorporationsCorporationIDBlueprints(params *GetCorporationsCorporationIDBlueprintsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDBlueprintsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDBlueprintsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_blueprints",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/blueprints/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDBlueprintsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDBlueprintsOK), nil

}

/*
GetCorporationsCorporationIDContainersLogs gets all corporation a l s c logs

Returns logs recorded in the past seven days from all audit log secure containers (ALSC) owned by a given corporation

---
Alternate route: `/dev/corporations/{corporation_id}/containers/logs/`

Alternate route: `/v2/corporations/{corporation_id}/containers/logs/`

---
This route is cached for up to 600 seconds

---
Requires one of the following EVE corporation role(s): Director

*/
func (a *Client) GetCorporationsCorporationIDContainersLogs(params *GetCorporationsCorporationIDContainersLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDContainersLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDContainersLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_containers_logs",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/containers/logs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDContainersLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDContainersLogsOK), nil

}

/*
GetCorporationsCorporationIDDivisions gets corporation divisions

Return corporation hangar and wallet division names, only show if a division is not using the default name

---
Alternate route: `/dev/corporations/{corporation_id}/divisions/`

Alternate route: `/legacy/corporations/{corporation_id}/divisions/`

Alternate route: `/v1/corporations/{corporation_id}/divisions/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

*/
func (a *Client) GetCorporationsCorporationIDDivisions(params *GetCorporationsCorporationIDDivisionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDDivisionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDDivisionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_divisions",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/divisions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDDivisionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDDivisionsOK), nil

}

/*
GetCorporationsCorporationIDFacilities gets corporation facilities

Return a corporation's facilities

---
Alternate route: `/dev/corporations/{corporation_id}/facilities/`

Alternate route: `/legacy/corporations/{corporation_id}/facilities/`

Alternate route: `/v1/corporations/{corporation_id}/facilities/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Factory_Manager

*/
func (a *Client) GetCorporationsCorporationIDFacilities(params *GetCorporationsCorporationIDFacilitiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDFacilitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDFacilitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_facilities",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/facilities/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDFacilitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDFacilitiesOK), nil

}

/*
GetCorporationsCorporationIDIcons gets corporation icon

Get the icon urls for a corporation

---
Alternate route: `/dev/corporations/{corporation_id}/icons/`

Alternate route: `/legacy/corporations/{corporation_id}/icons/`

Alternate route: `/v1/corporations/{corporation_id}/icons/`

---
This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsCorporationIDIcons(params *GetCorporationsCorporationIDIconsParams) (*GetCorporationsCorporationIDIconsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDIconsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_icons",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/icons/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDIconsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDIconsOK), nil

}

/*
GetCorporationsCorporationIDMedals gets corporation medals

Returns a corporation's medals

---
Alternate route: `/dev/corporations/{corporation_id}/medals/`

Alternate route: `/legacy/corporations/{corporation_id}/medals/`

Alternate route: `/v1/corporations/{corporation_id}/medals/`

---
This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsCorporationIDMedals(params *GetCorporationsCorporationIDMedalsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDMedalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDMedalsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_medals",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/medals/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDMedalsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDMedalsOK), nil

}

/*
GetCorporationsCorporationIDMedalsIssued gets corporation issued medals

Returns medals issued by a corporation

---
Alternate route: `/dev/corporations/{corporation_id}/medals/issued/`

Alternate route: `/legacy/corporations/{corporation_id}/medals/issued/`

Alternate route: `/v1/corporations/{corporation_id}/medals/issued/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

*/
func (a *Client) GetCorporationsCorporationIDMedalsIssued(params *GetCorporationsCorporationIDMedalsIssuedParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDMedalsIssuedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDMedalsIssuedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_medals_issued",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/medals/issued/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDMedalsIssuedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDMedalsIssuedOK), nil

}

/*
GetCorporationsCorporationIDMembers gets corporation members

Return the current member list of a corporation, the token's character need to be a member of the corporation.

---
Alternate route: `/dev/corporations/{corporation_id}/members/`

Alternate route: `/v3/corporations/{corporation_id}/members/`

---
This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsCorporationIDMembers(params *GetCorporationsCorporationIDMembersParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_members",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/members/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDMembersOK), nil

}

/*
GetCorporationsCorporationIDMembersLimit gets corporation member limit

Return a corporation's member limit, not including CEO himself

---
Alternate route: `/dev/corporations/{corporation_id}/members/limit/`

Alternate route: `/legacy/corporations/{corporation_id}/members/limit/`

Alternate route: `/v1/corporations/{corporation_id}/members/limit/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

*/
func (a *Client) GetCorporationsCorporationIDMembersLimit(params *GetCorporationsCorporationIDMembersLimitParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDMembersLimitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDMembersLimitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_members_limit",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/members/limit/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDMembersLimitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDMembersLimitOK), nil

}

/*
GetCorporationsCorporationIDMembersTitles gets corporation s members titles

Returns a corporation's members' titles

---
Alternate route: `/dev/corporations/{corporation_id}/members/titles/`

Alternate route: `/legacy/corporations/{corporation_id}/members/titles/`

Alternate route: `/v1/corporations/{corporation_id}/members/titles/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

*/
func (a *Client) GetCorporationsCorporationIDMembersTitles(params *GetCorporationsCorporationIDMembersTitlesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDMembersTitlesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDMembersTitlesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_members_titles",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/members/titles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDMembersTitlesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDMembersTitlesOK), nil

}

/*
GetCorporationsCorporationIDMembertracking tracks corporation members

Returns additional information about a corporation's members which helps tracking their activities

---
Alternate route: `/dev/corporations/{corporation_id}/membertracking/`

Alternate route: `/legacy/corporations/{corporation_id}/membertracking/`

Alternate route: `/v1/corporations/{corporation_id}/membertracking/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

*/
func (a *Client) GetCorporationsCorporationIDMembertracking(params *GetCorporationsCorporationIDMembertrackingParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDMembertrackingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDMembertrackingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_membertracking",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/membertracking/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDMembertrackingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDMembertrackingOK), nil

}

/*
GetCorporationsCorporationIDOutposts gets corporation outposts

Get a list of corporation outpost IDs Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/

---
Alternate route: `/dev/corporations/{corporation_id}/outposts/`

Alternate route: `/legacy/corporations/{corporation_id}/outposts/`

Alternate route: `/v1/corporations/{corporation_id}/outposts/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

*/
func (a *Client) GetCorporationsCorporationIDOutposts(params *GetCorporationsCorporationIDOutpostsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDOutpostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDOutpostsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_outposts",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/outposts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDOutpostsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDOutpostsOK), nil

}

/*
GetCorporationsCorporationIDOutpostsOutpostID gets corporation outpost details

Get details about a given outpost. Note: This endpoint will be removed once outposts are migrated to Citadels as talked about in this blog: https://community.eveonline.com/news/dev-blogs/the-next-steps-in-structure-transition/

---
Alternate route: `/dev/corporations/{corporation_id}/outposts/{outpost_id}/`

Alternate route: `/legacy/corporations/{corporation_id}/outposts/{outpost_id}/`

Alternate route: `/v1/corporations/{corporation_id}/outposts/{outpost_id}/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

*/
func (a *Client) GetCorporationsCorporationIDOutpostsOutpostID(params *GetCorporationsCorporationIDOutpostsOutpostIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDOutpostsOutpostIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDOutpostsOutpostIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_outposts_outpost_id",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/outposts/{outpost_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDOutpostsOutpostIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDOutpostsOutpostIDOK), nil

}

/*
GetCorporationsCorporationIDRoles gets corporation member roles

Return the roles of all members if the character has the personnel manager role or any grantable role.

---
Alternate route: `/dev/corporations/{corporation_id}/roles/`

Alternate route: `/legacy/corporations/{corporation_id}/roles/`

Alternate route: `/v1/corporations/{corporation_id}/roles/`

---
This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsCorporationIDRoles(params *GetCorporationsCorporationIDRolesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_roles",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/roles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDRolesOK), nil

}

/*
GetCorporationsCorporationIDRolesHistory gets corporation member roles history

Return how roles have changed for a coporation's members, up to a month

---
Alternate route: `/dev/corporations/{corporation_id}/roles/history/`

Alternate route: `/legacy/corporations/{corporation_id}/roles/history/`

Alternate route: `/v1/corporations/{corporation_id}/roles/history/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

*/
func (a *Client) GetCorporationsCorporationIDRolesHistory(params *GetCorporationsCorporationIDRolesHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDRolesHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDRolesHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_roles_history",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/roles/history/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDRolesHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDRolesHistoryOK), nil

}

/*
GetCorporationsCorporationIDShareholders gets corporation shareholders

Return the current shareholders of a corporation.

---
Alternate route: `/dev/corporations/{corporation_id}/shareholders/`

Alternate route: `/legacy/corporations/{corporation_id}/shareholders/`

Alternate route: `/v1/corporations/{corporation_id}/shareholders/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

*/
func (a *Client) GetCorporationsCorporationIDShareholders(params *GetCorporationsCorporationIDShareholdersParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDShareholdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDShareholdersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_shareholders",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/shareholders/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDShareholdersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDShareholdersOK), nil

}

/*
GetCorporationsCorporationIDStandings gets corporation standings

Return corporation standings from agents, NPC corporations, and factions

---
Alternate route: `/dev/corporations/{corporation_id}/standings/`

Alternate route: `/legacy/corporations/{corporation_id}/standings/`

Alternate route: `/v1/corporations/{corporation_id}/standings/`

---
This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsCorporationIDStandings(params *GetCorporationsCorporationIDStandingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDStandingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDStandingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_standings",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/standings/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDStandingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDStandingsOK), nil

}

/*
GetCorporationsCorporationIDStarbases gets corporation starbases p o ses

Returns list of corporation starbases (POSes)

---
Alternate route: `/dev/corporations/{corporation_id}/starbases/`

Alternate route: `/legacy/corporations/{corporation_id}/starbases/`

Alternate route: `/v1/corporations/{corporation_id}/starbases/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

*/
func (a *Client) GetCorporationsCorporationIDStarbases(params *GetCorporationsCorporationIDStarbasesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDStarbasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDStarbasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_starbases",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/starbases/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDStarbasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDStarbasesOK), nil

}

/*
GetCorporationsCorporationIDStarbasesStarbaseID gets starbase p o s detail

Returns various settings and fuels of a starbase (POS)

---
Alternate route: `/dev/corporations/{corporation_id}/starbases/{starbase_id}/`

Alternate route: `/legacy/corporations/{corporation_id}/starbases/{starbase_id}/`

Alternate route: `/v1/corporations/{corporation_id}/starbases/{starbase_id}/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

*/
func (a *Client) GetCorporationsCorporationIDStarbasesStarbaseID(params *GetCorporationsCorporationIDStarbasesStarbaseIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDStarbasesStarbaseIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDStarbasesStarbaseIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_starbases_starbase_id",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/starbases/{starbase_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDStarbasesStarbaseIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDStarbasesStarbaseIDOK), nil

}

/*
GetCorporationsCorporationIDStructures gets corporation structures

Get a list of corporation structures. This route's version includes the changes to structures detailed in this blog: https://www.eveonline.com/article/upwell-2.0-structures-changes-coming-on-february-13th

---
Alternate route: `/dev/corporations/{corporation_id}/structures/`

Alternate route: `/v2/corporations/{corporation_id}/structures/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): StationManager

*/
func (a *Client) GetCorporationsCorporationIDStructures(params *GetCorporationsCorporationIDStructuresParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDStructuresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDStructuresParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_structures",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/structures/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDStructuresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDStructuresOK), nil

}

/*
GetCorporationsCorporationIDTitles gets corporation titles

Returns a corporation's titles

---
Alternate route: `/dev/corporations/{corporation_id}/titles/`

Alternate route: `/legacy/corporations/{corporation_id}/titles/`

Alternate route: `/v1/corporations/{corporation_id}/titles/`

---
This route is cached for up to 3600 seconds

---
Requires one of the following EVE corporation role(s): Director

*/
func (a *Client) GetCorporationsCorporationIDTitles(params *GetCorporationsCorporationIDTitlesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCorporationsCorporationIDTitlesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsCorporationIDTitlesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_corporation_id_titles",
		Method:             "GET",
		PathPattern:        "/corporations/{corporation_id}/titles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsCorporationIDTitlesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsCorporationIDTitlesOK), nil

}

/*
GetCorporationsNames gets corporation names

Resolve a set of corporation IDs to corporation names

---
Alternate route: `/dev/corporations/names/`

Alternate route: `/v2/corporations/names/`

---
This route is cached for up to 3600 seconds
*/
func (a *Client) GetCorporationsNames(params *GetCorporationsNamesParams) (*GetCorporationsNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_names",
		Method:             "GET",
		PathPattern:        "/corporations/names/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsNamesOK), nil

}

/*
GetCorporationsNpccorps gets npc corporations

Get a list of npc corporations

---
Alternate route: `/dev/corporations/npccorps/`

Alternate route: `/legacy/corporations/npccorps/`

Alternate route: `/v1/corporations/npccorps/`

---
This route expires daily at 11:05
*/
func (a *Client) GetCorporationsNpccorps(params *GetCorporationsNpccorpsParams) (*GetCorporationsNpccorpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCorporationsNpccorpsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_corporations_npccorps",
		Method:             "GET",
		PathPattern:        "/corporations/npccorps/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCorporationsNpccorpsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCorporationsNpccorpsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
